Running automated test file(s):

Go packages: letter 


===============================================================================

Running: ../../.github/citools/go/go-lint-golangci-lint

Running GoLangCi-Lint

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.014s
user	0m0.009s
sys	0m0.008s


 ==============================================================================

Running: golangci-lint run --enable-all ./...

level=warning msg="[runner] The linter 'exhaustivestruct' is deprecated (since v1.46.0) due to: The owner seems to have abandoned the linter. Replaced by exhaustruct."
level=warning msg="[runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'maligned' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'."
level=warning msg="[runner] The linter 'nosnakecase' is deprecated (since v1.48.1) due to: The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming)."
level=warning msg="[runner] The linter 'scopelint' is deprecated (since v1.39.0) due to: The repository of the linter has been deprecated by the owner. Replaced by exportloopref."
level=warning msg="[runner] The linter 'golint' is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner. Replaced by revive."
level=warning msg="[runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'interfacer' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. "
level=warning msg="[runner] The linter 'ifshort' is deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner. "
level=warning msg="[runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[linters_context] rowserrcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
level=warning msg="[linters_context] structcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
level=warning msg="[linters_context] wastedassign is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
parallel_letter_frequency_benchmarks_test.go:84:2: use of `fmt.Printf` forbidden by pattern `^(fmt\.Print(|f|ln)|print|println)$` (forbidigo)
	fmt.Printf("Using function %s()\n", funcName)
	^
parallel_letter_frequency_benchmarks_test.go:12:40: Comment should end in a period (godot)
// benchMode values: serial, concurrent
                                       ^
parallel_letter_frequency_benchmarks_test.go:79:20: error strings should not be capitalized or end with punctuation or a newline (golint)
		panic(fmt.Errorf("Can't find %q in benchModes -> %#v\n", benchMode, benchModes))
		                 ^
parallel_letter_frequency_test.go:130: line is 123 characters (lll)
it's the result of forty years underground! Allow me to indulge my fancy. You see, gentlemen, reason is an excellent thing,
parallel_letter_frequency_test.go:133: line is 126 characters (lll)
And although our life, in this manifestation of it, is often worthless, yet it is life and not simply extracting square roots.
parallel_letter_frequency_test.go:134: line is 126 characters (lll)
Here I, for instance, quite naturally want to live, in order to satisfy all my capacities for life, and not simply my capacity
parallel_letter_frequency_test.go:135: line is 126 characters (lll)
for reasoning, that is, not simply one twentieth of my capacity for life. What does reason know? Reason only knows what it has
parallel_letter_frequency_test.go:137: line is 132 characters (lll)
and human nature acts as a whole, with everything that is in it, consciously or unconsciously, and, even it if goes wrong, it lives.
parallel_letter_frequency_test.go:138: line is 122 characters (lll)
I suspect, gentlemen, that you are looking at me with compassion; you tell me again that an enlightened and developed man,
parallel_letter_frequency_test.go:139: line is 145 characters (lll)
such, in short, as the future man will be, cannot consciously desire anything disadvantageous to himself, that that can be proved mathematically.
parallel_letter_frequency_test.go:140: line is 147 characters (lll)
I thoroughly agree, it can - by mathematics. But I repeat for the hundredth time, there is one case, one only, when man may consciously, purposely,
parallel_letter_frequency_test.go:141: line is 147 characters (lll)
desire what is injurious to himself, what is stupid, very stupid - simply in order to have the right to desire for himself even what is very stupid
parallel_letter_frequency_test.go:142: line is 145 characters (lll)
and not to be bound by an obligation to desire only what is sensible. Of course, this very stupid thing, this caprice of ours, may be in reality,
parallel_letter_frequency_test.go:143: line is 144 characters (lll)
gentlemen, more advantageous for us than anything else on earth, especially in certain cases. And in particular it may be more advantageous than
parallel_letter_frequency_test.go:144: line is 130 characters (lll)
any advantage even when it does us obvious harm, and contradicts the soundest conclusions of our reason concerning our advantage -
parallel_letter_frequency_test.go:145: line is 132 characters (lll)
for in any circumstances it preserves for us what is most precious and most important - that is, our personality, our individuality.
parallel_letter_frequency_test.go:146: line is 134 characters (lll)
Some, you see, maintain that this really is the most precious thing for mankind; choice can, of course, if it chooses, be in agreement
parallel_letter_frequency_test.go:147: line is 125 characters (lll)
with reason; and especially if this be not abused but kept within bounds. It is profitable and some- times even praiseworthy.
parallel_letter_frequency_test.go:148: line is 130 characters (lll)
But very often, and even most often, choice is utterly and stubbornly opposed to reason ... and ... and ... do you know that that,
parallel_letter_frequency_test.go:149: line is 141 characters (lll)
too, is profitable, sometimes even praiseworthy? Gentlemen, let us suppose that man is not stupid. (Indeed one cannot refuse to suppose that,
parallel_letter_frequency_test.go:150: line is 133 characters (lll)
if only from the one consideration, that, if man is stupid, then who is wise?) But if he is not stupid, he is monstrously ungrateful!
parallel_letter_frequency_test.go:151: line is 151 characters (lll)
Phenomenally ungrateful. In fact, I believe that the best definition of man is the ungrateful biped. But that is not all, that is not his worst defect;
parallel_letter_frequency_test.go:152: line is 124 characters (lll)
his worst defect is his perpetual moral obliquity, perpetual - from the days of the Flood to the Schleswig-Holstein period.`
parallel_letter_frequency_benchmarks_test.go:27:9: `interchangably` is a misspelling of `interchangeably` (misspell)
// used interchangably in the benchmark function.
        ^
parallel_letter_frequency_benchmarks_test.go:75:20: `algorithims` is a misspelling of `algorithm` (misspell)
	// with different algorithims.
	                  ^
parallel_letter_frequency_benchmarks_test.go:42:2: Consider pre-allocating `inputs` (prealloc)
	var inputs []book = []book{}
	^
parallel_letter_frequency_benchmarks_test.go:13:15: var-declaration: should omit type string from declaration of var benchMode; it will be inferred from the right-hand side (revive)
var benchMode string = "concurency"
              ^
parallel_letter_frequency_benchmarks_test.go:17:16: var-declaration: should omit type freqFunc from declaration of var benchModes; it will be inferred from the right-hand side (revive)
var benchModes freqFunc = freqFunc{
               ^
parallel_letter_frequency_benchmarks_test.go:36:16: var-declaration: should omit type []string from declaration of var bookFiles; it will be inferred from the right-hand side (revive)
	var bookFiles []string = []string{
	              ^
parallel_letter_frequency_benchmarks_test.go:69:12: var-declaration: should omit type []book from declaration of var table; it will be inferred from the right-hand side (revive)
	var table []book = setup()
	          ^
parallel_letter_frequency_benchmarks_test.go:92:23: Using the variable on range scope `v` in function literal (scopelint)
				r = benchmarkFunc(v.input)
				                  ^
parallel_letter_frequency.go:13:2: return statements should not be cuddled if block has more than two lines (wsl)
	return m
	^
parallel_letter_frequency.go:38:3: ranges should only be cuddled with assignments used in the iteration (wsl)
		for k, v := range <-c {
		^
parallel_letter_frequency_benchmarks_test.go:58:2: block should not end with a whitespace (or comment) (wsl)
	}
	^
parallel_letter_frequency_benchmarks_test.go:72:2: declarations should never be cuddled (wsl)
	var r FreqMap
	^
parallel_letter_frequency_test.go:160:2: return statements should not be cuddled if block has more than two lines (wsl)
	return m
	^
parallel_letter_frequency_test.go:175:2: only one cuddle assignment allowed before if statement (wsl)
	if !reflect.DeepEqual(oSeq, seq) {
	^
parallel_letter_frequency_test.go:184:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
parallel_letter_frequency_test.go:193:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
parallel_letter_frequency_test.go:129:16: Duplicate words (that) found (dupword)
	dostoevsky4 = `"Yes, but here I come to a stop! Gentlemen, you must excuse me for being over-philosophical;
	              ^
parallel_letter_frequency_test.go:15:2: dostoevsky1 is a global variable (gochecknoglobals)
	dostoevsky1 = `I am a sick man.... I am a spiteful man. I am an unattractive man.
	^
parallel_letter_frequency_test.go:58:2: dostoevsky2 is a global variable (gochecknoglobals)
	dostoevsky2 = `Gentlemen, I am joking, and I know myself that my jokes are not brilliant
	^
parallel_letter_frequency_test.go:97:2: dostoevsky3 is a global variable (gochecknoglobals)
	dostoevsky3 = `But these are all golden dreams. Oh, tell me, who was it first announced,
	^
parallel_letter_frequency_test.go:163:1: Function TestConcurrentFrequency missing the call to method parallel (paralleltest)
func TestConcurrentFrequency(t *testing.T) {
^
parallel_letter_frequency_test.go:172:1: Function TestSequentialFrequency missing the call to method parallel (paralleltest)
func TestSequentialFrequency(t *testing.T) {
^
parallel_letter_frequency_benchmarks_test.go:83:13: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck)
	funcName = strings.Title(funcName)
	           ^
parallel_letter_frequency_benchmarks_test.go:1:9: package should be `letter_test` instead of `letter` (testpackage)
package letter
        ^
parallel_letter_frequency_examples_test.go:1:9: package should be `letter_test` instead of `letter` (testpackage)
package letter
        ^
parallel_letter_frequency_test.go:1:9: package should be `letter_test` instead of `letter` (testpackage)
package letter
        ^
parallel_letter_frequency.go:23:2: variable name 'c' is too short for the scope of its usage (varnamelen)
	c := make(chan FreqMap, len(lines))
	^

real	0m0.658s
user	0m0.997s
sys	0m0.686s


 ==============================================================================

Exit code: -1

real	0m0.683s
user	0m1.011s
sys	0m0.703s

real	0m0.685s
user	0m1.011s
sys	0m0.705s

===============================================================================

Running: ../../.github/citools/go/go-lint-revive

Running Go Lint Revive

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.012s
user	0m0.004s
sys	0m0.011s


 ==============================================================================

Running: revive -formatter=stylish ./...

parallel_letter_frequency.go
  (1, 1)  https://revive.run/r#package-comments  should have a package comment  

parallel_letter_frequency_benchmarks_test.go
  (13, 15)  https://revive.run/r#var-declaration  should omit type string from declaration of var benchMode; it will be inferred from the right-hand side     
  (17, 16)  https://revive.run/r#var-declaration  should omit type freqFunc from declaration of var benchModes; it will be inferred from the right-hand side  
  (36, 16)  https://revive.run/r#var-declaration  should omit type []string from declaration of var bookFiles; it will be inferred from the right-hand side   
  (42, 13)  https://revive.run/r#var-declaration  should omit type []book from declaration of var inputs; it will be inferred from the right-hand side        
  (69, 12)  https://revive.run/r#var-declaration  should omit type []book from declaration of var table; it will be inferred from the right-hand side         
  (79, 20)  https://revive.run/r#error-strings    error strings should not be capitalized or end with punctuation or a newline                                


 ✖ 7 problems (0 errors) (7 warnings)

real	0m0.104s
user	0m0.065s
sys	0m0.054s


 ==============================================================================

Exit code: 0

real	0m0.127s
user	0m0.073s
sys	0m0.077s

real	0m0.129s
user	0m0.074s
sys	0m0.078s

===============================================================================

Running: ../../.github/citools/go/go-lint-ineffassign
../run-tests: line 41: .github/citools/go/go-lint-ineffassign: No such file or directory

real	0m0.001s
user	0m0.000s
sys	0m0.001s

===============================================================================

Running: ../../.github/citools/go/go-lint-go-consistent

Running Go go-consistent

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.017s
user	0m0.011s
sys	0m0.010s


 ==============================================================================

Running: go-consistent -v ./...

	info: check "./."
internal error: package "fmt" without types was imported from "letter [letter.test]"

real	0m0.093s
user	0m0.130s
sys	0m0.104s


 ==============================================================================

Exit code: -1

real	0m0.124s
user	0m0.149s
sys	0m0.124s

real	0m0.125s
user	0m0.150s
sys	0m0.125s

===============================================================================

Running: ../../.github/citools/go/go-lint-staticcheck

Running Go StaticCheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.014s
user	0m0.003s
sys	0m0.013s


 ==============================================================================

Running: staticcheck -checks=all ./...

parallel_letter_frequency.go:1:1: at least one file in a package should have a package comment (ST1000)
parallel_letter_frequency_benchmarks_test.go:36:16: should omit type []string from declaration; it will be inferred from the right-hand side (ST1023)
parallel_letter_frequency_benchmarks_test.go:42:13: should omit type []book from declaration; it will be inferred from the right-hand side (ST1023)
parallel_letter_frequency_benchmarks_test.go:69:12: should omit type []book from declaration; it will be inferred from the right-hand side (ST1023)
parallel_letter_frequency_benchmarks_test.go:83:13: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead.  (SA1019)

real	0m0.180s
user	0m0.232s
sys	0m0.140s


 ==============================================================================

Exit code: -1

real	0m0.206s
user	0m0.245s
sys	0m0.159s

real	0m0.208s
user	0m0.247s
sys	0m0.160s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocritic

Running Go gocritic

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.016s
user	0m0.013s
sys	0m0.007s


 ==============================================================================

Running: gocritic check -enableAll ./...

./parallel_letter_frequency_test.go:166:2: commentedOutCode: may want to remove commented-out code

real	0m0.844s
user	0m2.025s
sys	0m0.318s


 ==============================================================================

Exit code: -1

real	0m0.871s
user	0m2.044s
sys	0m0.333s

real	0m0.873s
user	0m2.046s
sys	0m0.333s

===============================================================================

Running: ../../.github/citools/go/go-lint-go_vet

Running Go Vet

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.011s
user	0m0.002s
sys	0m0.012s


 ==============================================================================

Running: go vet ./...


real	0m0.086s
user	0m0.104s
sys	0m0.095s


 ==============================================================================

Exit code: 0

real	0m0.108s
user	0m0.114s
sys	0m0.113s

real	0m0.110s
user	0m0.116s
sys	0m0.113s

===============================================================================

Running: ../../.github/citools/go/go-fixer-go_fix

Running go fix

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.016s
user	0m0.006s
sys	0m0.014s


 ==============================================================================

Running: go fix ./...


real	0m0.022s
user	0m0.014s
sys	0m0.013s


 ==============================================================================

Exit code: 0

real	0m0.051s
user	0m0.028s
sys	0m0.036s

real	0m0.053s
user	0m0.030s
sys	0m0.036s

===============================================================================

Running: ../../.github/citools/go/go-lint-errcheck

Running Go errcheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.021s
user	0m0.013s
sys	0m0.013s


 ==============================================================================

Running: errcheck ./...


real	0m0.485s
user	0m1.383s
sys	0m0.326s


 ==============================================================================

Exit code: 0

real	0m0.528s
user	0m1.407s
sys	0m0.358s

real	0m0.530s
user	0m1.408s
sys	0m0.359s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocyclo

Running Go gocyclo

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.013s
user	0m0.007s
sys	0m0.009s


 ==============================================================================

Running: gocyclo .

5 letter BenchmarkFrequency parallel_letter_frequency_benchmarks_test.go:66:1
5 letter ConcurrentFrequency parallel_letter_frequency.go:18:1
3 letter BenchmarkConcurrentFrequency parallel_letter_frequency_test.go:189:1
3 letter BenchmarkSequentialFrequency parallel_letter_frequency_test.go:180:1
3 letter setup parallel_letter_frequency_benchmarks_test.go:34:1
2 letter TestSequentialFrequency parallel_letter_frequency_test.go:172:1
2 letter TestConcurrentFrequency parallel_letter_frequency_test.go:163:1
2 letter OriginalFrequency parallel_letter_frequency_test.go:155:1
2 letter Frequency parallel_letter_frequency.go:8:1
1 letter ExampleFrequency parallel_letter_frequency_examples_test.go:7:1
1 letter cleanup parallel_letter_frequency_benchmarks_test.go:63:1
1 letter concurrentFrequency parallel_letter_frequency_benchmarks_test.go:28:1

real	0m0.003s
user	0m0.001s
sys	0m0.002s


 ==============================================================================

Exit code: 0

real	0m0.027s
user	0m0.013s
sys	0m0.023s

real	0m0.029s
user	0m0.013s
sys	0m0.025s

===============================================================================

Running: ../../.github/citools/go/go-lint-misspell

Running Go misspell

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: misspell .

parallel_letter_frequency_benchmarks_test.go:27:8: "interchangably" is a misspelling of "interchangeably"
parallel_letter_frequency_benchmarks_test.go:75:19: "algorithims" is a misspelling of "algorithm"
run-tests-go.txt:93:52: "interchangably" is a misspelling of "interchangeably"
run-tests-go.txt:94:8: "interchangably" is a misspelling of "interchangeably"
run-tests-go.txt:96:53: "algorithims" is a misspelling of "algorithm"
run-tests-go.txt:97:19: "algorithims" is a misspelling of "algorithm"
resources-pride_and_prejudice.txt:2897:33: "Phillipses" is a misspelling of "Phillies"
resources-pride_and_prejudice.txt:5377:6: "Phillipses" is a misspelling of "Phillies"
resources-pride_and_prejudice.txt:14166:25: "expences" is a misspelling of "expense"
resources-moby_dick_or_the_whale.txt:4136:0: "shrinked" is a misspelling of "shrunk"
resources-moby_dick_or_the_whale.txt:5420:16: "unforseen" is a misspelling of "unforeseen"
resources-moby_dick_or_the_whale.txt:15535:18: "sufficit" is a misspelling of "sufficient"
resources-war_and_peace.txt:4104:64: "vell" is a misspelling of "well"
resources-war_and_peace.txt:4136:3: "vell" is a misspelling of "well"
resources-war_and_peace.txt:7477:56: "Quarante" is a misspelling of "Quarantine"
resources-war_and_peace.txt:16575:0: "unconciousness" is a misspelling of "unconsciousness"
resources-war_and_peace.txt:19350:4: "accidently" is a misspelling of "accidentally"
resources-war_and_peace.txt:20444:21: "affaires" is a misspelling of "affairs"
resources-war_and_peace.txt:20483:4: "affaires" is a misspelling of "affairs"
resources-war_and_peace.txt:36548:0: "quarante" is a misspelling of "quarantine"
resources-war_and_peace.txt:57074:43: "Ukranian" is a misspelling of "Ukrainian"
resources-war_and_peace.txt:58865:12: "occuring" is a misspelling of "occurring"

real	0m0.333s
user	0m0.628s
sys	0m0.039s


 ==============================================================================

Exit code: 0

real	0m0.345s
user	0m0.635s
sys	0m0.049s

real	0m0.347s
user	0m0.636s
sys	0m0.051s

===============================================================================

Running: ../../.github/citools/go/go-lint-gosec

Running Go GoSec

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.013s
user	0m0.005s
sys	0m0.012s


 ==============================================================================

Running: gosec ./...

[gosec] 2023/09/07 00:25:40 Including rules: default
[gosec] 2023/09/07 00:25:40 Excluding rules: default
[gosec] 2023/09/07 00:25:40 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/parallel-letter-frequency
[gosec] 2023/09/07 00:25:40 Checking package: letter
[gosec] 2023/09/07 00:25:40 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/parallel-letter-frequency/parallel_letter_frequency.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 44
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.087s
user	0m0.073s
sys	0m0.046s


 ==============================================================================

Exit code: 0

real	0m0.122s
user	0m0.088s
sys	0m0.075s

real	0m0.124s
user	0m0.090s
sys	0m0.076s

===============================================================================

Running: ../../.github/citools/go/go-test-cover-report

Running Go Test, Coverage & Reports

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.013s
user	0m0.005s
sys	0m0.011s


 ==============================================================================

Running: gotest -v -covermode=count -coverprofile coverage.out ./...

=== RUN   TestConcurrentFrequency
--- PASS: TestConcurrentFrequency (0.00s)
=== RUN   TestSequentialFrequency
--- PASS: TestSequentialFrequency (0.00s)
=== RUN   ExampleFrequency
--- PASS: ExampleFrequency (0.00s)
PASS
coverage: 100.0% of statements
ok  	letter	0.004s	coverage: 100.0% of statements

real	0m0.180s
user	0m0.246s
sys	0m0.144s


 ==============================================================================

Running: go tool cover -func=coverage.out

letter/parallel_letter_frequency.go:8:	Frequency		100.0%
letter/parallel_letter_frequency.go:18:	ConcurrentFrequency	100.0%
total:					(statements)		100.0%

real	0m0.028s
user	0m0.012s
sys	0m0.024s


 ==============================================================================

Running: go tool cover -html coverage.out -o coverage.html


real	0m0.029s
user	0m0.008s
sys	0m0.028s


 ==============================================================================

Running: cover_annotate

Running: gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

real	0m0.019s
user	0m0.011s
sys	0m0.014s

real	0m0.019s
user	0m0.011s
sys	0m0.014s


 ==============================================================================

Running: gotest -v -race -covermode=atomic ./...

=== RUN   TestConcurrentFrequency
--- PASS: TestConcurrentFrequency (0.01s)
=== RUN   TestSequentialFrequency
--- PASS: TestSequentialFrequency (0.00s)
=== RUN   ExampleFrequency
--- PASS: ExampleFrequency (0.00s)
PASS
coverage: 100.0% of statements
ok  	letter	1.029s	coverage: 100.0% of statements

real	0m1.273s
user	0m0.332s
sys	0m0.181s


 ==============================================================================

Exit code: 0

real	0m1.558s
user	0m0.622s
sys	0m0.416s

real	0m1.561s
user	0m0.622s
sys	0m0.419s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: letter
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkFrequency
Using function ConcurrentFrequency()
BenchmarkFrequency/input_size_0
BenchmarkFrequency/input_size_0-8         	      64	  20260311 ns/op	12324932 B/op	   95852 allocs/op
BenchmarkFrequency/input_size_1
BenchmarkFrequency/input_size_1-8         	      37	  29984914 ns/op	20376356 B/op	  154535 allocs/op
BenchmarkFrequency/input_size_2
BenchmarkFrequency/input_size_2-8         	      16	  74479344 ns/op	55023086 B/op	  415782 allocs/op
BenchmarkSequentialFrequency
BenchmarkSequentialFrequency-8            	    5330	    225888 ns/op	   17454 B/op	      11 allocs/op
BenchmarkConcurrentFrequency
BenchmarkConcurrentFrequency-8            	    6834	    152324 ns/op	   14302 B/op	      63 allocs/op
PASS
ok  	letter	9.512s

real	0m9.672s
user	0m32.749s
sys	0m1.178s

===============================================================================

gotest -v -tags bonus
=== RUN   TestConcurrentFrequency
--- PASS: TestConcurrentFrequency (0.00s)
=== RUN   TestSequentialFrequency
--- PASS: TestSequentialFrequency (0.00s)
=== RUN   ExampleFrequency
--- PASS: ExampleFrequency (0.00s)
PASS
ok  	letter	0.003s

real	0m0.140s
user	0m0.194s
sys	0m0.120s

===============================================================================

benchstat benchstat-old.txt benchstat-new.txt
benchstat-new.txt:5: missing iteration count
benchstat-new.txt:7: missing iteration count
benchstat-new.txt:9: missing iteration count
benchstat-new.txt:11: missing iteration count
benchstat-new.txt:13: missing iteration count
benchstat-new.txt:15: missing iteration count
goos: linux
goarch: amd64
pkg: letter
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
                         │ benchstat-new.txt │
                         │      sec/op       │
Frequency/input_size_0-8        20.26m ± ∞ ¹
Frequency/input_size_1-8        29.98m ± ∞ ¹
Frequency/input_size_2-8        74.48m ± ∞ ¹
SequentialFrequency-8           225.9µ ± ∞ ¹
ConcurrentFrequency-8           152.3µ ± ∞ ¹
geomean                         4.350m
¹ need >= 6 samples for confidence interval at level 0.95

                         │ benchstat-new.txt │
                         │       B/op        │
Frequency/input_size_0-8       11.75Mi ± ∞ ¹
Frequency/input_size_1-8       19.43Mi ± ∞ ¹
Frequency/input_size_2-8       52.47Mi ± ∞ ¹
SequentialFrequency-8          17.04Ki ± ∞ ¹
ConcurrentFrequency-8          13.97Ki ± ∞ ¹
geomean                        1.222Mi
¹ need >= 6 samples for confidence interval at level 0.95

                         │ benchstat-new.txt │
                         │     allocs/op     │
Frequency/input_size_0-8        95.85k ± ∞ ¹
Frequency/input_size_1-8        154.5k ± ∞ ¹
Frequency/input_size_2-8        415.8k ± ∞ ¹
SequentialFrequency-8            11.00 ± ∞ ¹
ConcurrentFrequency-8            63.00 ± ∞ ¹
geomean                         5.322k
¹ need >= 6 samples for confidence interval at level 0.95

cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
                         │ benchstat-old.txt │
                         │      sec/op       │
Frequency/input_size_0-4        70.98m ± ∞ ¹
Frequency/input_size_1-4        127.0m ± ∞ ¹
Frequency/input_size_2-4        333.8m ± ∞ ¹
SequentialFrequency-4           436.5µ ± ∞ ¹
ConcurrentFrequency-4           612.0µ ± ∞ ¹
geomean                         15.17m
¹ need >= 6 samples for confidence interval at level 0.95

                         │ benchstat-old.txt │
                         │       B/op        │
Frequency/input_size_0-4       11.42Mi ± ∞ ¹
Frequency/input_size_1-4       18.71Mi ± ∞ ¹
Frequency/input_size_2-4       49.80Mi ± ∞ ¹
SequentialFrequency-4          17.16Ki ± ∞ ¹
ConcurrentFrequency-4          12.29Ki ± ∞ ¹
geomean                        1.164Mi
¹ need >= 6 samples for confidence interval at level 0.95

                         │ benchstat-old.txt │
                         │     allocs/op     │
Frequency/input_size_0-4        99.32k ± ∞ ¹
Frequency/input_size_1-4        160.3k ± ∞ ¹
Frequency/input_size_2-4        429.9k ± ∞ ¹
SequentialFrequency-4            13.00 ± ∞ ¹
ConcurrentFrequency-4            68.00 ± ∞ ¹
geomean                         5.707k
¹ need >= 6 samples for confidence interval at level 0.95

real	0m0.002s
user	0m0.001s
sys	0m0.002s

===============================================================================

gomarkdoc --output letter-doc.md

real	0m0.009s
user	0m0.005s
sys	0m0.004s

===============================================================================

go doc -all letter
package letter // import "letter"


TYPES

type FreqMap map[rune]int
    FreqMap records the frequency of each rune in a given text.

func ConcurrentFrequency(lines []string) FreqMap
    ConcurrentFrequency counts the frequency of each rune in the given strings,
    by making use of concurrency.

func Frequency(s string) FreqMap
    Frequency counts the frequency of each rune in a given text and returns this
    data as a FreqMap.


real	0m1.466s
user	0m0.051s
sys	0m0.051s


===============================================================================

