Running automated test file(s):

Go packages: letter 


===============================================================================

golint letter
/home/vpayno/git_vpayno/exercism-workspace/go/parallel-letter-frequency/parallel_letter_frequency_benchmarks_test.go:79:20: error strings should not be capitalized or end with punctuation or a newline

real	0m0.272s
user	0m0.341s
sys	0m0.224s

===============================================================================

go install golang.org/x/tools/cmd/cover@latest

real	0m1.159s
user	0m0.770s
sys	0m0.583s

go test -v -covermode=count -coverprofile coverage.out letter
=== RUN   TestConcurrentFrequency
--- PASS: TestConcurrentFrequency (0.00s)
=== RUN   TestSequentialFrequency
--- PASS: TestSequentialFrequency (0.00s)
=== RUN   ExampleFrequency
--- PASS: ExampleFrequency (0.00s)
PASS
coverage: 100.0% of statements
ok  	letter	0.018s	coverage: 100.0% of statements

real	0m0.762s
user	0m0.887s
sys	0m0.570s

===============================================================================

go tool cover -func=coverage.out
letter/parallel_letter_frequency.go:8:	Frequency		100.0%
letter/parallel_letter_frequency.go:18:	ConcurrentFrequency	100.0%
total:					(statements)		100.0%

real	0m0.120s
user	0m0.048s
sys	0m0.102s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.142s
user	0m0.054s
sys	0m0.121s

===============================================================================

go test -v -race -covermode=atomic letter
=== RUN   TestConcurrentFrequency
--- PASS: TestConcurrentFrequency (0.02s)
=== RUN   TestSequentialFrequency
--- PASS: TestSequentialFrequency (0.01s)
=== RUN   ExampleFrequency
--- PASS: ExampleFrequency (0.00s)
PASS
coverage: 100.0% of statements
ok  	letter	0.074s	coverage: 100.0% of statements

real	0m1.172s
user	0m1.229s
sys	0m0.720s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
Using function ConcurrentFrequency()
goos: linux
goarch: amd64
pkg: letter
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkFrequency/input_size_0-4         	      16	  70983193 ns/op	11973416 B/op	   99321 allocs/op
BenchmarkFrequency/input_size_1-4         	       9	 126952655 ns/op	19622605 B/op	  160333 allocs/op
BenchmarkFrequency/input_size_2-4         	       3	 333811087 ns/op	52220378 B/op	  429904 allocs/op
BenchmarkSequentialFrequency-4            	    2300	    436503 ns/op	   17572 B/op	      13 allocs/op
BenchmarkConcurrentFrequency-4            	    2443	    611976 ns/op	   12581 B/op	      68 allocs/op
PASS
ok  	letter	8.529s

real	0m9.073s
user	0m20.333s
sys	0m2.750s

===============================================================================

go test -tags bonus
PASS
ok  	letter	0.015s

real	0m0.611s
user	0m0.758s
sys	0m0.484s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m3.274s
user	0m0.683s
sys	0m0.544s

benchstat benchstat-old.txt benchstat-new.txt
benchstat: open benchstat-old.txt: no such file or directory

real	0m0.014s
user	0m0.000s
sys	0m0.003s

===============================================================================

go vet letter

real	0m0.413s
user	0m0.439s
sys	0m0.492s

===============================================================================

go fix letter

real	0m0.057s
user	0m0.032s
sys	0m0.036s

===============================================================================

gosec ./parallel-letter-frequency
[gosec] 2022/06/26 16:48:49 Including rules: default
[gosec] 2022/06/26 16:48:49 Excluding rules: default
[gosec] 2022/06/26 16:48:49 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/parallel-letter-frequency
[gosec] 2022/06/26 16:48:49 Checking package: letter
[gosec] 2022/06/26 16:48:49 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/parallel-letter-frequency/parallel_letter_frequency.go
Results:


Summary:
   Files: 1
   Lines: 44
   Nosec: 0
  Issues: 0


real	0m0.283s
user	0m0.355s
sys	0m0.182s

===============================================================================

gomarkdoc --output letter-doc.md

real	0m0.053s
user	0m0.056s
sys	0m0.029s

===============================================================================

go doc -all letter
package letter // import "letter"


TYPES

type FreqMap map[rune]int
    FreqMap records the frequency of each rune in a given text.

func ConcurrentFrequency(lines []string) FreqMap
    ConcurrentFrequency counts the frequency of each rune in the given strings,
    by making use of concurrency.

func Frequency(s string) FreqMap
    Frequency counts the frequency of each rune in a given text and returns this
    data as a FreqMap.


real	0m0.428s
user	0m0.124s
sys	0m0.268s


===============================================================================

