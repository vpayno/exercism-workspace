Running automated test file(s):

Go packages: acronym 


===============================================================================

golint acronym

real	0m0.197s
user	0m0.153s
sys	0m0.215s

===============================================================================

go install golang.org/x/tools/cmd/cover@latest

real	0m0.881s
user	0m0.629s
sys	0m0.419s

go test -v -covermode=count -coverprofile coverage.out acronym
=== RUN   TestAcronym
--- PASS: TestAcronym (0.00s)
=== RUN   ExampleAbbreviate
--- PASS: ExampleAbbreviate (0.00s)
PASS
coverage: 85.7% of statements
ok  	acronym	0.004s	coverage: 85.7% of statements

real	0m0.748s
user	0m0.836s
sys	0m0.564s

===============================================================================

go tool cover -func=coverage.out
acronym/acronym.go:11:	Abbreviate	85.7%
total:			(statements)	85.7%

real	0m0.207s
user	0m0.165s
sys	0m0.199s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.213s
user	0m0.195s
sys	0m0.201s

===============================================================================

go test -v -race -covermode=atomic acronym
=== RUN   TestAcronym
--- PASS: TestAcronym (0.01s)
=== RUN   ExampleAbbreviate
--- PASS: ExampleAbbreviate (0.00s)
PASS
coverage: 85.7% of statements
ok  	acronym	0.044s	coverage: 85.7% of statements

real	0m0.773s
user	0m0.783s
sys	0m0.535s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: acronym
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkAcronym-4   	    6241	    173929 ns/op	   30896 B/op	     426 allocs/op
PASS
ok  	acronym	2.051s

real	0m2.606s
user	0m3.171s
sys	0m0.490s

===============================================================================

go test -tags bonus
PASS
ok  	acronym	0.018s

real	0m0.604s
user	0m0.684s
sys	0m0.507s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.675s
user	0m0.843s
sys	0m0.476s

benchstat benchstat-old.txt benchstat-new.txt
name       old time/op    new time/op    delta
Acronym-4     169µs ± 0%     174µs ± 0%   ~     (p=1.000 n=1+1)

name       old alloc/op   new alloc/op   delta
Acronym-4    19.2kB ± 0%    30.9kB ± 0%   ~     (p=1.000 n=1+1)

name       old allocs/op  new allocs/op  delta
Acronym-4       248 ± 0%       426 ± 0%   ~     (p=1.000 n=1+1)

real	0m0.038s
user	0m0.011s
sys	0m0.039s

===============================================================================

go vet acronym

real	0m0.411s
user	0m0.464s
sys	0m0.390s

===============================================================================

go fix acronym

real	0m0.219s
user	0m0.215s
sys	0m0.185s

===============================================================================

gosec ./acronym
[gosec] 2022/06/29 08:06:30 Including rules: default
[gosec] 2022/06/29 08:06:30 Excluding rules: default
[gosec] 2022/06/29 08:06:30 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/acronym
2022/06/29 08:06:30 internal error: package "regexp" without types was imported from "command-line-arguments"

real	0m0.534s
user	0m0.552s
sys	0m0.446s

===============================================================================

gomarkdoc --output acronym-doc.md

real	0m0.067s
user	0m0.053s
sys	0m0.020s

===============================================================================

go doc -all acronym
package acronym // import "acronym"

Package acronym converts a phrase to its acronym. The 1st iteration is
better than the second one.

FUNCTIONS

func Abbreviate(s string) string
    Abbreviate returns an acronym from the supplied string.


real	0m0.262s
user	0m0.182s
sys	0m0.222s


===============================================================================

