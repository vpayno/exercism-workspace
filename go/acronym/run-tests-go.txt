Running automated test file(s):

Go packages: acronym 


===============================================================================

golint acronym

real	0m0.382s
user	0m0.388s
sys	0m0.343s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out acronym
=== RUN   TestAcronym
=== RUN   TestAcronym/basic
=== RUN   TestAcronym/lowercase_words
=== RUN   TestAcronym/punctuation
=== RUN   TestAcronym/all_caps_word
=== RUN   TestAcronym/punctuation_without_whitespace
=== RUN   TestAcronym/very_long_abbreviation
=== RUN   TestAcronym/consecutive_delimiters
=== RUN   TestAcronym/apostrophes
=== RUN   TestAcronym/underscore_emphasis
--- PASS: TestAcronym (0.00s)
    --- PASS: TestAcronym/basic (0.00s)
    --- PASS: TestAcronym/lowercase_words (0.00s)
    --- PASS: TestAcronym/punctuation (0.00s)
    --- PASS: TestAcronym/all_caps_word (0.00s)
    --- PASS: TestAcronym/punctuation_without_whitespace (0.00s)
    --- PASS: TestAcronym/very_long_abbreviation (0.00s)
    --- PASS: TestAcronym/consecutive_delimiters (0.00s)
    --- PASS: TestAcronym/apostrophes (0.00s)
    --- PASS: TestAcronym/underscore_emphasis (0.00s)
=== RUN   ExampleAbbreviate
--- PASS: ExampleAbbreviate (0.00s)
PASS
coverage: 85.7% of statements
ok  	acronym	0.013s	coverage: 85.7% of statements

real	0m1.055s
user	0m1.253s
sys	0m0.742s

===============================================================================

go tool cover -func=coverage.out
acronym/acronym.go:11:	Abbreviate	85.7%
total:			(statements)	85.7%

real	0m0.413s
user	0m0.373s
sys	0m0.324s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.420s
user	0m0.389s
sys	0m0.409s

===============================================================================

go test -v -race -covermode=atomic acronym
=== RUN   TestAcronym
=== RUN   TestAcronym/basic
=== RUN   TestAcronym/lowercase_words
=== RUN   TestAcronym/punctuation
=== RUN   TestAcronym/all_caps_word
=== RUN   TestAcronym/punctuation_without_whitespace
=== RUN   TestAcronym/very_long_abbreviation
=== RUN   TestAcronym/consecutive_delimiters
=== RUN   TestAcronym/apostrophes
=== RUN   TestAcronym/underscore_emphasis
--- PASS: TestAcronym (0.09s)
    --- PASS: TestAcronym/basic (0.00s)
    --- PASS: TestAcronym/lowercase_words (0.00s)
    --- PASS: TestAcronym/punctuation (0.01s)
    --- PASS: TestAcronym/all_caps_word (0.01s)
    --- PASS: TestAcronym/punctuation_without_whitespace (0.02s)
    --- PASS: TestAcronym/very_long_abbreviation (0.00s)
    --- PASS: TestAcronym/consecutive_delimiters (0.02s)
    --- PASS: TestAcronym/apostrophes (0.00s)
    --- PASS: TestAcronym/underscore_emphasis (0.02s)
=== RUN   ExampleAbbreviate
--- PASS: ExampleAbbreviate (0.00s)
PASS
coverage: 85.7% of statements
ok  	acronym	0.175s	coverage: 85.7% of statements

real	0m1.510s
user	0m1.833s
sys	0m0.944s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: acronym
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkAcronym-4   	    5791	    305661 ns/op	   30838 B/op	     426 allocs/op
PASS
ok  	acronym	1.839s

real	0m2.645s
user	0m3.681s
sys	0m0.713s

===============================================================================

go test -tags bonus
PASS
ok  	acronym	0.027s

real	0m0.826s
user	0m0.975s
sys	0m0.639s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m1.144s
user	0m1.412s
sys	0m0.612s

benchstat benchstat-old.txt benchstat-new.txt
name       old time/op    new time/op    delta
Acronym-4     174µs ± 0%     306µs ± 0%   ~     (p=1.000 n=1+1)

name       old alloc/op   new alloc/op   delta
Acronym-4    30.9kB ± 0%    30.8kB ± 0%   ~     (p=1.000 n=1+1)

name       old allocs/op  new allocs/op  delta
Acronym-4       426 ± 0%       426 ± 0%   ~     (all equal)

real	0m0.070s
user	0m0.097s
sys	0m0.046s

===============================================================================

go vet acronym

real	0m0.570s
user	0m0.654s
sys	0m0.461s

===============================================================================

go fix acronym

real	0m0.192s
user	0m0.215s
sys	0m0.137s

===============================================================================

gosec ./acronym
[gosec] 2022/07/30 14:00:21 Including rules: default
[gosec] 2022/07/30 14:00:21 Excluding rules: default
[gosec] 2022/07/30 14:00:21 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/acronym
2022/07/30 14:00:21 internal error: package "regexp" without types was imported from "command-line-arguments"

real	0m0.778s
user	0m0.775s
sys	0m0.526s

===============================================================================

gomarkdoc --output acronym-doc.md

real	0m0.049s
user	0m0.024s
sys	0m0.042s

===============================================================================

go doc -all acronym
package acronym // import "acronym"

Package acronym converts a phrase to its acronym. The 1st iteration is
better than the second one.

FUNCTIONS

func Abbreviate(s string) string
    Abbreviate returns an acronym from the supplied string.


real	0m0.338s
user	0m0.262s
sys	0m0.350s


===============================================================================

