Running automated test file(s):

Go packages: perfect 


===============================================================================

Running: ../../.github/citools/go/go-lint-golangci-lint

Running GoLangCi-Lint

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.018s
user	0m0.009s
sys	0m0.014s


 ==============================================================================

Running: golangci-lint run --enable-all ./...

level=warning msg="[runner] The linter 'ifshort' is deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner. "
level=warning msg="[runner] The linter 'maligned' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'."
level=warning msg="[runner] The linter 'nosnakecase' is deprecated (since v1.48.1) due to: The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming)."
level=warning msg="[runner] The linter 'scopelint' is deprecated (since v1.39.0) due to: The repository of the linter has been deprecated by the owner. Replaced by exportloopref."
level=warning msg="[runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'golint' is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner. Replaced by revive."
level=warning msg="[runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'interfacer' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. "
level=warning msg="[runner] The linter 'exhaustivestruct' is deprecated (since v1.46.0) due to: The owner seems to have abandoned the linter. Replaced by exhaustruct."
level=warning msg="[runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
perfect_numbers.go:1: line is 141 characters (lll)
// Package perfect is used to determinte the classification scheme of a number using Nicomachus' classification scheme for positive integers.
perfect_numbers.go:40:21: var-declaration: should omit type error from declaration of var ErrOnlyPositive; it will be inferred from the right-hand side (revive)
var ErrOnlyPositive error = errors.New("only positive errors")
                    ^
perfect_numbers_test.go:16:28: Using the variable on range scope `tc` in function literal (scopelint)
			actual, err := Classify(tc.input)
			                        ^
perfect_numbers_test.go:18:10: Using the variable on range scope `tc` in function literal (scopelint)
			case !tc.ok:
			      ^
perfect_numbers_test.go:21:55: Using the variable on range scope `tc` in function literal (scopelint)
					t.Errorf("Classify(%d) expected error, got: %q", tc.input, actual)
					                                                 ^
perfect_numbers.go:89:2: declarations should never be cuddled (wsl)
	var factor int64
	^
perfect_numbers_test.go:58:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
perfect_numbers_test.go:7:29: comparing with != will fail on wrapped errors. Use errors.Is to check for a specific error (errorlint)
		if _, err := Classify(0); err != ErrOnlyPositive {
		                          ^
perfect_numbers.go:27:2: missing cases in switch of type perfect.Classification: perfect.Unknown (exhaustive)
	switch c {
	^
perfect_numbers.go:18:5: ClassificationNames is a global variable (gochecknoglobals)
var ClassificationNames = map[Classification]string{
    ^
cases_test.go:8:5: classificationTestCases is a global variable (gochecknoglobals)
var classificationTestCases = []struct {
    ^
perfect_numbers_test.go:5:1: Function TestZeroGivesPositiveRequiredError missing the call to method parallel (paralleltest)
func TestZeroGivesPositiveRequiredError(t *testing.T) {
^
perfect_numbers_test.go:13:1: Function TestClassifiesCorrectly missing the call to method parallel (paralleltest)
func TestClassifiesCorrectly(t *testing.T) {
^
perfect_numbers_test.go:14:2: Range statement for test TestClassifiesCorrectly missing the call to method parallel in test Run (paralleltest)
	for _, tc := range classificationTestCases {
	^
perfect_numbers_test.go:34:1: Function TestClassificationsNotEqual missing the call to method parallel (paralleltest)
func TestClassificationsNotEqual(t *testing.T) {
^
cases_test.go:1:9: package should be `perfect_test` instead of `perfect` (testpackage)
package perfect
        ^
perfect_numbers_examples_test.go:1:9: package should be `perfect_test` instead of `perfect` (testpackage)
package perfect
        ^
perfect_numbers_test.go:1:9: package should be `perfect_test` instead of `perfect` (testpackage)
package perfect
        ^
perfect_numbers_examples_test.go:6:2: variable name 'c' is too short for the scope of its usage (varnamelen)
	c, _ := Classify(6)
	^

real	0m0.488s
user	0m0.743s
sys	0m0.488s


 ==============================================================================

Exit code: -1

real	0m0.518s
user	0m0.757s
sys	0m0.515s

real	0m0.520s
user	0m0.758s
sys	0m0.517s

===============================================================================

Running: ../../.github/citools/go/go-lint-revive

Running Go Lint Revive

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.017s
user	0m0.008s
sys	0m0.014s


 ==============================================================================

Running: revive -formatter=stylish ./...


real	0m0.046s
user	0m0.022s
sys	0m0.035s


 ==============================================================================

Exit code: 0

real	0m0.075s
user	0m0.037s
sys	0m0.058s

real	0m0.077s
user	0m0.037s
sys	0m0.060s

===============================================================================

Running: ../../.github/citools/go/go-lint-ineffassign
../run-tests: line 41: .github/citools/go/go-lint-ineffassign: No such file or directory

real	0m0.001s
user	0m0.001s
sys	0m0.000s

===============================================================================

Running: ../../.github/citools/go/go-lint-go-consistent

Running Go go-consistent

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.025s
user	0m0.018s
sys	0m0.018s


 ==============================================================================

Running: go-consistent -v ./...

	info: check "./."
internal error: package "errors" without types was imported from "perfect"

real	0m0.097s
user	0m0.134s
sys	0m0.110s


 ==============================================================================

Exit code: -1

real	0m0.139s
user	0m0.163s
sys	0m0.140s

real	0m0.142s
user	0m0.165s
sys	0m0.141s

===============================================================================

Running: ../../.github/citools/go/go-lint-staticcheck

Running Go StaticCheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.030s
user	0m0.021s
sys	0m0.020s


 ==============================================================================

Running: staticcheck -checks=all ./...


real	0m0.164s
user	0m0.182s
sys	0m0.125s


 ==============================================================================

Exit code: 0

real	0m0.213s
user	0m0.209s
sys	0m0.163s

real	0m0.215s
user	0m0.209s
sys	0m0.165s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocritic

Running Go gocritic

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.016s
user	0m0.008s
sys	0m0.012s


 ==============================================================================

Running: gocritic check -enableAll ./...


real	0m0.798s
user	0m1.980s
sys	0m0.291s


 ==============================================================================

Exit code: 0

real	0m0.826s
user	0m1.992s
sys	0m0.316s

real	0m0.827s
user	0m1.992s
sys	0m0.317s

===============================================================================

Running: ../../.github/citools/go/go-lint-go_vet

Running Go Vet

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.020s
user	0m0.007s
sys	0m0.017s


 ==============================================================================

Running: go vet ./...


real	0m0.076s
user	0m0.119s
sys	0m0.114s


 ==============================================================================

Exit code: 0

real	0m0.107s
user	0m0.132s
sys	0m0.140s

real	0m0.109s
user	0m0.132s
sys	0m0.142s

===============================================================================

Running: ../../.github/citools/go/go-fixer-go_fix

Running go fix

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.021s
user	0m0.012s
sys	0m0.014s


 ==============================================================================

Running: go fix ./...


real	0m0.022s
user	0m0.014s
sys	0m0.014s


 ==============================================================================

Exit code: 0

real	0m0.059s
user	0m0.034s
sys	0m0.040s

real	0m0.060s
user	0m0.036s
sys	0m0.041s

===============================================================================

Running: ../../.github/citools/go/go-lint-errcheck

Running Go errcheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.019s
user	0m0.006s
sys	0m0.021s


 ==============================================================================

Running: errcheck ./...


real	0m0.471s
user	0m1.293s
sys	0m0.336s


 ==============================================================================

Exit code: 0

real	0m0.503s
user	0m1.308s
sys	0m0.364s

real	0m0.505s
user	0m1.308s
sys	0m0.366s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocyclo

Running Go gocyclo

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.026s
user	0m0.015s
sys	0m0.018s


 ==============================================================================

Running: gocyclo .

6 perfect TestClassifiesCorrectly perfect_numbers_test.go:13:1
5 perfect BenchmarkClassify perfect_numbers_test.go:54:1
5 perfect Classify perfect_numbers.go:43:1
4 perfect TestClassificationsNotEqual perfect_numbers_test.go:34:1
4 perfect Factors perfect_numbers.go:83:1
4 perfect (Classification).String perfect_numbers.go:26:1
3 perfect Sum perfect_numbers.go:67:1
2 perfect TestZeroGivesPositiveRequiredError perfect_numbers_test.go:5:1
1 perfect ExampleFactors perfect_numbers_examples_test.go:39:1
1 perfect ExampleSum perfect_numbers_examples_test.go:29:1
1 perfect ExampleClassify perfect_numbers_examples_test.go:5:1

real	0m0.003s
user	0m0.003s
sys	0m0.000s


 ==============================================================================

Exit code: 0

real	0m0.039s
user	0m0.024s
sys	0m0.028s

real	0m0.041s
user	0m0.025s
sys	0m0.029s

===============================================================================

Running: ../../.github/citools/go/go-lint-misspell

Running Go misspell

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: misspell .


real	0m0.033s
user	0m0.040s
sys	0m0.018s


 ==============================================================================

Exit code: 0

real	0m0.048s
user	0m0.048s
sys	0m0.032s

real	0m0.051s
user	0m0.050s
sys	0m0.033s

===============================================================================

Running: ../../.github/citools/go/go-lint-gosec

Running Go GoSec

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.036s
user	0m0.021s
sys	0m0.028s


 ==============================================================================

Running: gosec ./...

[gosec] 2023/09/07 00:26:14 Including rules: default
[gosec] 2023/09/07 00:26:14 Excluding rules: default
[gosec] 2023/09/07 00:26:14 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/perfect-numbers
[gosec] 2023/09/07 00:26:14 Checking package: perfect
[gosec] 2023/09/07 00:26:14 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/perfect-numbers/perfect_numbers.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 98
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.127s
user	0m0.141s
sys	0m0.076s


 ==============================================================================

Exit code: 0

real	0m0.180s
user	0m0.171s
sys	0m0.118s

real	0m0.184s
user	0m0.172s
sys	0m0.121s

===============================================================================

Running: ../../.github/citools/go/go-test-cover-report

Running Go Test, Coverage & Reports

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.021s
user	0m0.008s
sys	0m0.017s


 ==============================================================================

Running: gotest -v -covermode=count -coverprofile coverage.out ./...

=== RUN   TestZeroGivesPositiveRequiredError
=== RUN   TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError
--- PASS: TestZeroGivesPositiveRequiredError (0.00s)
    --- PASS: TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError (0.00s)
=== RUN   TestClassifiesCorrectly
=== RUN   TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer)
=== RUN   TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer)
--- PASS: TestClassifiesCorrectly (0.26s)
    --- PASS: TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly (0.08s)
    --- PASS: TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly (0.09s)
    --- PASS: TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly (0.09s)
    --- PASS: TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
    --- PASS: TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
=== RUN   TestClassificationsNotEqual
--- PASS: TestClassificationsNotEqual (0.00s)
=== RUN   ExampleClassify
--- PASS: ExampleClassify (0.00s)
=== RUN   ExampleSum
--- PASS: ExampleSum (0.00s)
=== RUN   ExampleFactors
--- PASS: ExampleFactors (0.00s)
PASS
coverage: 89.3% of statements
ok  	perfect	0.260s	coverage: 89.3% of statements

real	0m0.433s
user	0m0.474s
sys	0m0.164s


 ==============================================================================

Running: go tool cover -func=coverage.out

perfect/perfect_numbers.go:26:	String		80.0%
perfect/perfect_numbers.go:43:	Classify	88.9%
perfect/perfect_numbers.go:67:	Sum		100.0%
perfect/perfect_numbers.go:83:	Factors		87.5%
total:				(statements)	89.3%

real	0m0.039s
user	0m0.042s
sys	0m0.063s


 ==============================================================================

Running: go tool cover -html coverage.out -o coverage.html


real	0m0.037s
user	0m0.042s
sys	0m0.042s


 ==============================================================================

Running: cover_annotate

Running: gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

26     	func (c Classification) String() string {
27     		switch c {
28     		case ClassificationAbundant:
29     			return ClassificationNames[ClassificationAbundant]
30     		case ClassificationDeficient:
31     			return ClassificationNames[ClassificationDeficient]
32     		case ClassificationPerfect:
33     			return ClassificationNames[ClassificationPerfect]
34     		default:
35 MISS			return ClassificationNames[Unknown]
36     		}
37     	}


43     	func Classify(number int64) (Classification, error) {
44     		if number <= 0 {
45     			return Unknown, ErrOnlyPositive
46     		}
47     	
48     		// Factors: factors including 1 but not n.
49     		factors := Factors(number)
50     	
51     		// Aliquot sum: the sum of factors of a number.
52     		aliquotSum := Sum(factors)
53     	
54     		switch {
55     		case aliquotSum > number:
56     			return ClassificationAbundant, nil
57     		case aliquotSum < number:
58     			return ClassificationDeficient, nil
59     		case aliquotSum == number:
60     			return ClassificationPerfect, nil
61     		}
62     	
63 MISS		return 0, nil
64     	}


83     	func Factors(number int64) []int64 {
84     		if number == 0 {
85 MISS			return []int64{}
86     		}
87     	
88     		factors := []int64{}
89     		var factor int64
90     	
91     		for factor = 1; factor < number; factor++ {
92     			if number%factor == 0 {
93     				factors = append(factors, factor)
94     			}
95     		}
96     	
97     		return factors
98     	}


real	0m0.020s
user	0m0.012s
sys	0m0.015s

real	0m0.020s
user	0m0.012s
sys	0m0.015s


 ==============================================================================

Running: gotest -v -race -covermode=atomic ./...

=== RUN   TestZeroGivesPositiveRequiredError
=== RUN   TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError
--- PASS: TestZeroGivesPositiveRequiredError (0.00s)
    --- PASS: TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError (0.00s)
=== RUN   TestClassifiesCorrectly
=== RUN   TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer)
=== RUN   TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer)
--- PASS: TestClassifiesCorrectly (6.25s)
    --- PASS: TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly (2.08s)
    --- PASS: TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly (2.09s)
    --- PASS: TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly (2.08s)
    --- PASS: TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
    --- PASS: TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
=== RUN   TestClassificationsNotEqual
--- PASS: TestClassificationsNotEqual (0.00s)
=== RUN   ExampleClassify
--- PASS: ExampleClassify (0.00s)
=== RUN   ExampleSum
--- PASS: ExampleSum (0.00s)
=== RUN   ExampleFactors
--- PASS: ExampleFactors (0.00s)
PASS
coverage: 89.3% of statements
ok  	perfect	7.267s	coverage: 89.3% of statements

real	0m7.520s
user	0m6.591s
sys	0m0.197s


 ==============================================================================

Exit code: 0

real	0m8.082s
user	0m7.176s
sys	0m0.506s

real	0m8.084s
user	0m7.177s
sys	0m0.507s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: perfect
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkClassify
    perfect_numbers_test.go:62: error encountered during benchmark
    perfect_numbers_test.go:62: error encountered during benchmark
--- FAIL: BenchmarkClassify
FAIL
exit status 1
FAIL	perfect	0.236s

real	0m0.437s
user	0m0.525s
sys	0m0.187s

===============================================================================

gotest -v -tags bonus
=== RUN   TestZeroGivesPositiveRequiredError
=== RUN   TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError
--- PASS: TestZeroGivesPositiveRequiredError (0.00s)
    --- PASS: TestZeroGivesPositiveRequiredError/GivesPositiveRequiredError (0.00s)
=== RUN   TestClassifiesCorrectly
=== RUN   TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly
=== RUN   TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer)
=== RUN   TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer)
--- PASS: TestClassifiesCorrectly (0.24s)
    --- PASS: TestClassifiesCorrectly/Smallest_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_perfect_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_perfect_number_is_classified_correctly (0.08s)
    --- PASS: TestClassifiesCorrectly/Smallest_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_abundant_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_abundant_number_is_classified_correctly (0.08s)
    --- PASS: TestClassifiesCorrectly/Smallest_prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Smallest_non-prime_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Medium_deficient_number_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Large_deficient_number_is_classified_correctly (0.08s)
    --- PASS: TestClassifiesCorrectly/Edge_case_(no_factors_other_than_itself)_is_classified_correctly (0.00s)
    --- PASS: TestClassifiesCorrectly/Zero_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
    --- PASS: TestClassifiesCorrectly/Negative_integer_is_rejected_(as_it_is_not_a_positive_integer) (0.00s)
=== RUN   TestClassificationsNotEqual
--- PASS: TestClassificationsNotEqual (0.00s)
=== RUN   ExampleClassify
--- PASS: ExampleClassify (0.00s)
=== RUN   ExampleSum
--- PASS: ExampleSum (0.00s)
=== RUN   ExampleFactors
--- PASS: ExampleFactors (0.00s)
PASS
ok  	perfect	0.239s

real	0m0.370s
user	0m0.383s
sys	0m0.107s

===============================================================================

benchstat benchstat-old.txt benchstat-new.txt
benchstat-old.txt:5: missing iteration count
benchstat-new.txt:5: missing iteration count

real	0m0.002s
user	0m0.002s
sys	0m0.000s

===============================================================================

gomarkdoc --output perfect-doc.md

real	0m0.011s
user	0m0.006s
sys	0m0.005s

===============================================================================

go doc -all perfect
package perfect // import "perfect"

Package perfect is used to determinte the classification scheme of a number
using Nicomachus' classification scheme for positive integers.

VARIABLES

var ClassificationNames = map[Classification]string{
	Unknown:                 "unknown",
	ClassificationAbundant:  "abundant",
	ClassificationDeficient: "deficient",
	ClassificationPerfect:   "perfect",
}
    ClassificationNames maps the classifications to strings mappings.

var ErrOnlyPositive error = errors.New("only positive errors")
    ErrOnlyPositive is returned when an input number is not positive.


FUNCTIONS

func Classify(number int64) (Classification, error)
    Classify returns the classification of a number based on Nicomachus'
    classification scheme for positive integers.

func Factors(number int64) []int64
    Factors returns an int64 list of factors the given natural number.
    We include 1 but not the number itself.

func Sum(numbers []int64) int64
    Sum returns the sum of the list of numbers.


TYPES

type Classification int
    Classification type used in Nicomachus' classification scheme.

const (
	Unknown Classification = iota
	ClassificationAbundant
	ClassificationDeficient
	ClassificationPerfect
)
    The Classification enum.

func (c Classification) String() string
    String returns the lowercased classification name.


real	0m0.035s
user	0m0.022s
sys	0m0.024s


===============================================================================

