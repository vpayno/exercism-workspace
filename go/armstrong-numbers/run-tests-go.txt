Running automated test file(s):

Go packages: armstrong 


===============================================================================

golint armstrong

real	0m0.197s
user	0m0.256s
sys	0m0.232s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out armstrong
=== RUN   TestArmstrong
    armstrong_numbers_test.go:13: PASS: Zero is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Single digit numbers are Armstrong numbers
    armstrong_numbers_test.go:13: PASS: There are no 2 digit Armstrong numbers
    armstrong_numbers_test.go:13: PASS: Three digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Three digit number that is not an Armstrong number
    armstrong_numbers_test.go:13: PASS: Four digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Four digit number that is not an Armstrong number
    armstrong_numbers_test.go:13: PASS: Seven digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Seven digit number that is not an Armstrong number
--- PASS: TestArmstrong (0.00s)
=== RUN   ExampleIsNumber
--- PASS: ExampleIsNumber (0.00s)
PASS
coverage: 91.7% of statements
ok  	armstrong	0.006s	coverage: 91.7% of statements

real	0m0.629s
user	0m0.651s
sys	0m0.483s

===============================================================================

go tool cover -func=coverage.out
armstrong/armstrong_numbers.go:12:	IsNumber	91.7%
total:					(statements)	91.7%

real	0m0.256s
user	0m0.249s
sys	0m0.267s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.210s
user	0m0.187s
sys	0m0.209s

===============================================================================

go test -v -race -covermode=atomic armstrong
=== RUN   TestArmstrong
    armstrong_numbers_test.go:13: PASS: Zero is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Single digit numbers are Armstrong numbers
    armstrong_numbers_test.go:13: PASS: There are no 2 digit Armstrong numbers
    armstrong_numbers_test.go:13: PASS: Three digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Three digit number that is not an Armstrong number
    armstrong_numbers_test.go:13: PASS: Four digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Four digit number that is not an Armstrong number
    armstrong_numbers_test.go:13: PASS: Seven digit number that is an Armstrong number
    armstrong_numbers_test.go:13: PASS: Seven digit number that is not an Armstrong number
--- PASS: TestArmstrong (0.01s)
=== RUN   ExampleIsNumber
--- PASS: ExampleIsNumber (0.00s)
PASS
coverage: 91.7% of statements
ok  	armstrong	0.053s	coverage: 91.7% of statements

real	0m0.803s
user	0m0.880s
sys	0m0.531s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: armstrong
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkIsNumber/0-4 	 6247946	       165.2 ns/op	       4 B/op	       1 allocs/op
BenchmarkIsNumber/5-4 	 7303632	       167.6 ns/op	       4 B/op	       1 allocs/op
BenchmarkIsNumber/10-4         	 4960125	       270.0 ns/op	      12 B/op	       3 allocs/op
BenchmarkIsNumber/153-4        	 3109310	       368.2 ns/op	      16 B/op	       4 allocs/op
BenchmarkIsNumber/100-4        	 3486847	       299.8 ns/op	      16 B/op	       4 allocs/op
BenchmarkIsNumber/9474-4       	 2473671	       475.4 ns/op	      32 B/op	       6 allocs/op
BenchmarkIsNumber/9475-4       	 2123463	       525.2 ns/op	      32 B/op	       6 allocs/op
BenchmarkIsNumber/9926315-4    	 1591429	       783.3 ns/op	      48 B/op	       9 allocs/op
BenchmarkIsNumber/9926314-4    	 1539709	       746.1 ns/op	      48 B/op	       9 allocs/op
PASS
ok  	armstrong	15.886s

real	0m16.375s
user	0m18.441s
sys	0m0.818s

===============================================================================

go test -tags bonus
PASS
ok  	armstrong	0.015s

real	0m0.670s
user	0m0.787s
sys	0m0.473s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet armstrong

real	0m0.369s
user	0m0.480s
sys	0m0.381s

===============================================================================

go fix armstrong

real	0m0.155s
user	0m0.146s
sys	0m0.135s

===============================================================================

gosec ./armstrong-numbers
[gosec] 2022/06/30 06:59:45 Including rules: default
[gosec] 2022/06/30 06:59:45 Excluding rules: default
[gosec] 2022/06/30 06:59:45 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/armstrong-numbers
2022/06/30 06:59:46 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.559s
user	0m0.620s
sys	0m0.434s

===============================================================================

gomarkdoc --output armstrong-doc.md

real	0m0.035s
user	0m0.021s
sys	0m0.020s

===============================================================================

go doc -all armstrong
package armstrong // import "armstrong"

Package armstrong checks that a number is an Armstrong number.

FUNCTIONS

func IsNumber(number int) bool
    IsNumber returns true if the passed number equals the sum of it's digits to
    the power of the number of digits.


real	0m0.291s
user	0m0.233s
sys	0m0.253s


===============================================================================

