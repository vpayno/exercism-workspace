Running automated test file(s):

Go packages: armstrong 


===============================================================================

golint armstrong

real	0m0.185s
user	0m0.213s
sys	0m0.188s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out armstrong
=== RUN   TestArmstrong
=== RUN   TestArmstrong/Zero_is_an_Armstrong_number
=== RUN   TestArmstrong/Single-digit_numbers_are_Armstrong_numbers
=== RUN   TestArmstrong/There_are_no_two-digit_Armstrong_numbers
=== RUN   TestArmstrong/Three-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Three-digit_number_that_is_not_an_Armstrong_number
=== RUN   TestArmstrong/Four-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Four-digit_number_that_is_not_an_Armstrong_number
=== RUN   TestArmstrong/Seven-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Seven-digit_number_that_is_not_an_Armstrong_number
--- PASS: TestArmstrong (0.00s)
    --- PASS: TestArmstrong/Zero_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Single-digit_numbers_are_Armstrong_numbers (0.00s)
    --- PASS: TestArmstrong/There_are_no_two-digit_Armstrong_numbers (0.00s)
    --- PASS: TestArmstrong/Three-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Three-digit_number_that_is_not_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Four-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Four-digit_number_that_is_not_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Seven-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Seven-digit_number_that_is_not_an_Armstrong_number (0.00s)
=== RUN   ExampleIsNumber
--- PASS: ExampleIsNumber (0.00s)
PASS
coverage: 91.7% of statements
ok  	armstrong	0.010s	coverage: 91.7% of statements

real	0m0.534s
user	0m0.642s
sys	0m0.394s

===============================================================================

go tool cover -func=coverage.out
armstrong/armstrong_numbers.go:12:	IsNumber	91.7%
total:					(statements)	91.7%

real	0m0.225s
user	0m0.237s
sys	0m0.216s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.235s
user	0m0.209s
sys	0m0.221s

===============================================================================

go test -v -race -covermode=atomic armstrong
=== RUN   TestArmstrong
=== RUN   TestArmstrong/Zero_is_an_Armstrong_number
=== RUN   TestArmstrong/Single-digit_numbers_are_Armstrong_numbers
=== RUN   TestArmstrong/There_are_no_two-digit_Armstrong_numbers
=== RUN   TestArmstrong/Three-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Three-digit_number_that_is_not_an_Armstrong_number
=== RUN   TestArmstrong/Four-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Four-digit_number_that_is_not_an_Armstrong_number
=== RUN   TestArmstrong/Seven-digit_number_that_is_an_Armstrong_number
=== RUN   TestArmstrong/Seven-digit_number_that_is_not_an_Armstrong_number
--- PASS: TestArmstrong (0.01s)
    --- PASS: TestArmstrong/Zero_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Single-digit_numbers_are_Armstrong_numbers (0.00s)
    --- PASS: TestArmstrong/There_are_no_two-digit_Armstrong_numbers (0.00s)
    --- PASS: TestArmstrong/Three-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Three-digit_number_that_is_not_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Four-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Four-digit_number_that_is_not_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Seven-digit_number_that_is_an_Armstrong_number (0.00s)
    --- PASS: TestArmstrong/Seven-digit_number_that_is_not_an_Armstrong_number (0.00s)
=== RUN   ExampleIsNumber
--- PASS: ExampleIsNumber (0.00s)
PASS
coverage: 91.7% of statements
ok  	armstrong	0.045s	coverage: 91.7% of statements

real	0m0.730s
user	0m0.761s
sys	0m0.550s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: armstrong
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkIsNumber-4   	  461610	      3258 ns/op	     212 B/op	      43 allocs/op
PASS
ok  	armstrong	1.593s

real	0m2.053s
user	0m2.279s
sys	0m0.392s

===============================================================================

go test -tags bonus
PASS
ok  	armstrong	0.009s

real	0m0.534s
user	0m0.593s
sys	0m0.414s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.754s
user	0m0.709s
sys	0m0.411s

benchstat benchstat-old.txt benchstat-new.txt

real	0m0.009s
user	0m0.003s
sys	0m0.004s

===============================================================================

go vet armstrong

real	0m0.353s
user	0m0.402s
sys	0m0.337s

===============================================================================

go fix armstrong

real	0m0.187s
user	0m0.179s
sys	0m0.156s

===============================================================================

gosec ./armstrong-numbers
[gosec] 2022/07/24 00:20:42 Including rules: default
[gosec] 2022/07/24 00:20:42 Excluding rules: default
[gosec] 2022/07/24 00:20:42 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/armstrong-numbers
2022/07/24 00:20:42 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.519s
user	0m0.640s
sys	0m0.385s

===============================================================================

gomarkdoc --output armstrong-doc.md

real	0m0.033s
user	0m0.020s
sys	0m0.018s

===============================================================================

go doc -all armstrong
package armstrong // import "armstrong"

Package armstrong checks that a number is an Armstrong number.

FUNCTIONS

func IsNumber(number int) bool
    IsNumber returns true if the passed number equals the sum of it's digits to
    the power of the number of digits.


real	0m0.214s
user	0m0.219s
sys	0m0.205s


===============================================================================

