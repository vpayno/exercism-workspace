Running automated test file(s):

Go packages: house 


===============================================================================

golint ./...

real	0m0.123s
user	0m0.033s
sys	0m0.065s

===============================================================================

revive ./...

real	0m0.046s
user	0m0.013s
sys	0m0.021s

===============================================================================

ineffassign ./...

real	0m0.367s
user	0m0.347s
sys	0m0.412s

===============================================================================

go-consistent -v ./...
	info: check "./."

real	0m0.410s
user	0m0.378s
sys	0m0.359s

===============================================================================

staticcheck ./...

real	0m0.347s
user	0m0.366s
sys	0m0.313s

===============================================================================

gocritic check -enableAll ./...

real	0m2.549s
user	0m3.840s
sys	0m1.038s

===============================================================================

gotest -v -covermode=count -coverprofile coverage.out ./...
=== RUN   TestVerse
=== RUN   TestVerse/verse_1
=== RUN   TestVerse/verse_2
=== RUN   TestVerse/verse_3
=== RUN   TestVerse/verse_4
=== RUN   TestVerse/verse_5
=== RUN   TestVerse/verse_6
=== RUN   TestVerse/verse_7
=== RUN   TestVerse/verse_8
=== RUN   TestVerse/verse_9
=== RUN   TestVerse/verse_10
=== RUN   TestVerse/verse_11
=== RUN   TestVerse/verse_12
--- PASS: TestVerse (0.00s)
    --- PASS: TestVerse/verse_1 (0.00s)
    --- PASS: TestVerse/verse_2 (0.00s)
    --- PASS: TestVerse/verse_3 (0.00s)
    --- PASS: TestVerse/verse_4 (0.00s)
    --- PASS: TestVerse/verse_5 (0.00s)
    --- PASS: TestVerse/verse_6 (0.00s)
    --- PASS: TestVerse/verse_7 (0.00s)
    --- PASS: TestVerse/verse_8 (0.00s)
    --- PASS: TestVerse/verse_9 (0.00s)
    --- PASS: TestVerse/verse_10 (0.00s)
    --- PASS: TestVerse/verse_11 (0.00s)
    --- PASS: TestVerse/verse_12 (0.00s)
=== RUN   TestSong
--- PASS: TestSong (0.00s)
=== RUN   ExampleVerse
--- PASS: ExampleVerse (0.00s)
=== RUN   ExampleSong
--- PASS: ExampleSong (0.00s)
PASS
coverage: 95.5% of statements
ok  	house	0.009s	coverage: 95.5% of statements

real	0m0.817s
user	0m0.816s
sys	0m0.726s

===============================================================================

go tool cover -func=coverage.out
house/house.go:10:	Verse		93.3%
house/house.go:68:	Song		100.0%
total:			(statements)	95.5%

real	0m0.276s
user	0m0.223s
sys	0m0.329s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.234s
user	0m0.272s
sys	0m0.211s

===============================================================================

gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

10     	func Verse(level int) string {
11     		level--
12     	
13     		if level < 0 || level > 11 {
14 MISS			return ""
15     		}
16     	
17     		part1 := map[string]string{
18     			"0":                                "This is the",
19     			"horse and the hound and the horn": "This is the",
20     			"farmer sowing his corn":           "that belonged to the",
21     			"rooster that crowed in the morn":  "that kept the",
22     			"priest all shaven and shorn":      "that woke the",
23     			"man all tattered and torn":        "that married the",
24     			"maiden all forlorn":               "that kissed the",
25     			"cow with the crumpled horn":       "that milked the",
26     			"dog":                              "that tossed the",
27     			"cat":                              "that worried the",
28     			"rat":                              "that killed the",
29     			"malt":                             "that ate the",
30     			"house that Jack built.":           "that lay in the",
31     		}
32     		part2 := map[int]string{
33     			11: "horse and the hound and the horn",
34     			10: "farmer sowing his corn",
35     			9:  "rooster that crowed in the morn",
36     			8:  "priest all shaven and shorn",
37     			7:  "man all tattered and torn",
38     			6:  "maiden all forlorn",
39     			5:  "cow with the crumpled horn",
40     			4:  "dog",
41     			3:  "cat",
42     			2:  "rat",
43     			1:  "malt",
44     			0:  "house that Jack built.",
45     		}
46     	
47     		var verse strings.Builder
48     	
49     		for i, j := 0, level; i <= level; i, j = i+1, j-1 {
50     			var line strings.Builder
51     			if i == 0 {
52     				line.WriteString(fmt.Sprintf("%s %s", part1["0"], part2[j]))
53     			} else {
54     				line.WriteString(fmt.Sprintf("%s %s", part1[part2[j]], part2[j]))
55     			}
56     	
57     			verse.WriteString(line.String())
58     	
59     			if i != level {
60     				verse.WriteString("\n")
61     			}
62     		}
63     	
64     		return verse.String()
65     	}


real	0m0.110s
user	0m0.068s
sys	0m0.106s

===============================================================================

gotest -v -race -covermode=atomic ./...
=== RUN   TestVerse
=== RUN   TestVerse/verse_1
=== RUN   TestVerse/verse_2
=== RUN   TestVerse/verse_3
=== RUN   TestVerse/verse_4
=== RUN   TestVerse/verse_5
=== RUN   TestVerse/verse_6
=== RUN   TestVerse/verse_7
=== RUN   TestVerse/verse_8
=== RUN   TestVerse/verse_9
=== RUN   TestVerse/verse_10
=== RUN   TestVerse/verse_11
=== RUN   TestVerse/verse_12
--- PASS: TestVerse (0.01s)
    --- PASS: TestVerse/verse_1 (0.00s)
    --- PASS: TestVerse/verse_2 (0.00s)
    --- PASS: TestVerse/verse_3 (0.00s)
    --- PASS: TestVerse/verse_4 (0.00s)
    --- PASS: TestVerse/verse_5 (0.00s)
    --- PASS: TestVerse/verse_6 (0.00s)
    --- PASS: TestVerse/verse_7 (0.00s)
    --- PASS: TestVerse/verse_8 (0.00s)
    --- PASS: TestVerse/verse_9 (0.00s)
    --- PASS: TestVerse/verse_10 (0.00s)
    --- PASS: TestVerse/verse_11 (0.00s)
    --- PASS: TestVerse/verse_12 (0.00s)
=== RUN   TestSong
--- PASS: TestSong (0.00s)
=== RUN   ExampleVerse
--- PASS: ExampleVerse (0.00s)
=== RUN   ExampleSong
--- PASS: ExampleSong (0.00s)
PASS
coverage: 95.5% of statements
ok  	house	0.047s	coverage: 95.5% of statements

real	0m0.969s
user	0m0.772s
sys	0m0.587s

===============================================================================

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: house
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkVerse
BenchmarkVerse-4   	   12996	     98897 ns/op	   27315 B/op	     382 allocs/op
BenchmarkSong
BenchmarkSong-4    	   10000	    127415 ns/op	   34383 B/op	     391 allocs/op
PASS
ok  	house	3.457s

real	0m3.968s
user	0m5.966s
sys	0m1.089s

===============================================================================

gotest -v -tags bonus
=== RUN   TestVerse
=== RUN   TestVerse/verse_1
=== RUN   TestVerse/verse_2
=== RUN   TestVerse/verse_3
=== RUN   TestVerse/verse_4
=== RUN   TestVerse/verse_5
=== RUN   TestVerse/verse_6
=== RUN   TestVerse/verse_7
=== RUN   TestVerse/verse_8
=== RUN   TestVerse/verse_9
=== RUN   TestVerse/verse_10
=== RUN   TestVerse/verse_11
=== RUN   TestVerse/verse_12
--- PASS: TestVerse (0.00s)
    --- PASS: TestVerse/verse_1 (0.00s)
    --- PASS: TestVerse/verse_2 (0.00s)
    --- PASS: TestVerse/verse_3 (0.00s)
    --- PASS: TestVerse/verse_4 (0.00s)
    --- PASS: TestVerse/verse_5 (0.00s)
    --- PASS: TestVerse/verse_6 (0.00s)
    --- PASS: TestVerse/verse_7 (0.00s)
    --- PASS: TestVerse/verse_8 (0.00s)
    --- PASS: TestVerse/verse_9 (0.00s)
    --- PASS: TestVerse/verse_10 (0.00s)
    --- PASS: TestVerse/verse_11 (0.00s)
    --- PASS: TestVerse/verse_12 (0.00s)
=== RUN   TestSong
--- PASS: TestSong (0.00s)
=== RUN   ExampleVerse
--- PASS: ExampleVerse (0.00s)
=== RUN   ExampleSong
--- PASS: ExampleSong (0.00s)
PASS
ok  	house	0.024s

real	0m0.578s
user	0m0.597s
sys	0m0.524s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet ./...

real	0m0.286s
user	0m0.301s
sys	0m0.317s

===============================================================================

go fix ./...

real	0m0.127s
user	0m0.083s
sys	0m0.109s

===============================================================================

gocyclo .
6 house TestSong house_test.go:124:1
6 house Verse house.go:10:1
4 house BenchmarkVerse house_test.go:151:1
3 house BenchmarkSong house_test.go:162:1
3 house TestVerse house_test.go:114:1
3 house Song house.go:68:1
1 house ExampleSong house_examples_test.go:26:1
1 house ExampleVerse house_examples_test.go:5:1

real	0m0.023s
user	0m0.001s
sys	0m0.024s

===============================================================================

misspell .

real	0m0.104s
user	0m0.085s
sys	0m0.074s

===============================================================================

gosec ./...
[gosec] 2022/08/26 19:33:42 Including rules: default
[gosec] 2022/08/26 19:33:42 Excluding rules: default
[gosec] 2022/08/26 19:33:42 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/house
2022/08/26 19:33:42 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.531s
user	0m0.517s
sys	0m0.420s

===============================================================================

gomarkdoc --output house-doc.md

real	0m0.072s
user	0m0.026s
sys	0m0.020s

===============================================================================

go doc -all house
package house // import "house"

Package house generates the nursery rhyme "This is the House that Jack Built".

FUNCTIONS

func Song() string
    Song returns the whole nursery rhyme.

func Verse(level int) string
    Verse returns a specific verse from the nursery rhyme.


real	0m0.189s
user	0m0.101s
sys	0m0.246s


===============================================================================

