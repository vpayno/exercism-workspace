Running automated test file(s):

Go packages: scrabble 


===============================================================================

golint scrabble

real	0m0.192s
user	0m0.159s
sys	0m0.157s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out scrabble
=== RUN   TestScore
=== RUN   TestScore/lowercase_letter
=== RUN   TestScore/uppercase_letter
=== RUN   TestScore/valuable_letter
=== RUN   TestScore/short_word
=== RUN   TestScore/short,_valuable_word
=== RUN   TestScore/medium_word
=== RUN   TestScore/medium,_valuable_word
=== RUN   TestScore/long,_mixed-case_word
=== RUN   TestScore/english-like_word
=== RUN   TestScore/empty_input
=== RUN   TestScore/entire_alphabet_available
--- PASS: TestScore (0.00s)
    --- PASS: TestScore/lowercase_letter (0.00s)
    --- PASS: TestScore/uppercase_letter (0.00s)
    --- PASS: TestScore/valuable_letter (0.00s)
    --- PASS: TestScore/short_word (0.00s)
    --- PASS: TestScore/short,_valuable_word (0.00s)
    --- PASS: TestScore/medium_word (0.00s)
    --- PASS: TestScore/medium,_valuable_word (0.00s)
    --- PASS: TestScore/long,_mixed-case_word (0.00s)
    --- PASS: TestScore/english-like_word (0.00s)
    --- PASS: TestScore/empty_input (0.00s)
    --- PASS: TestScore/entire_alphabet_available (0.00s)
=== RUN   ExampleScore
--- PASS: ExampleScore (0.00s)
PASS
coverage: 100.0% of statements
ok  	scrabble	0.019s	coverage: 100.0% of statements

real	0m0.837s
user	0m0.914s
sys	0m0.639s

===============================================================================

go tool cover -func=coverage.out
scrabble/scrabble_score.go:11:	charScore	100.0%
scrabble/scrabble_score.go:34:	Score		100.0%
total:				(statements)	100.0%

real	0m0.282s
user	0m0.253s
sys	0m0.311s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.274s
user	0m0.269s
sys	0m0.306s

===============================================================================

go test -v -race -covermode=atomic scrabble
=== RUN   TestScore
=== RUN   TestScore/lowercase_letter
=== RUN   TestScore/uppercase_letter
=== RUN   TestScore/valuable_letter
=== RUN   TestScore/short_word
=== RUN   TestScore/short,_valuable_word
=== RUN   TestScore/medium_word
=== RUN   TestScore/medium,_valuable_word
=== RUN   TestScore/long,_mixed-case_word
=== RUN   TestScore/english-like_word
=== RUN   TestScore/empty_input
=== RUN   TestScore/entire_alphabet_available
--- PASS: TestScore (0.00s)
    --- PASS: TestScore/lowercase_letter (0.00s)
    --- PASS: TestScore/uppercase_letter (0.00s)
    --- PASS: TestScore/valuable_letter (0.00s)
    --- PASS: TestScore/short_word (0.00s)
    --- PASS: TestScore/short,_valuable_word (0.00s)
    --- PASS: TestScore/medium_word (0.00s)
    --- PASS: TestScore/medium,_valuable_word (0.00s)
    --- PASS: TestScore/long,_mixed-case_word (0.00s)
    --- PASS: TestScore/english-like_word (0.00s)
    --- PASS: TestScore/empty_input (0.00s)
    --- PASS: TestScore/entire_alphabet_available (0.00s)
=== RUN   ExampleScore
--- PASS: ExampleScore (0.00s)
PASS
coverage: 100.0% of statements
ok  	scrabble	0.038s	coverage: 100.0% of statements

real	0m0.948s
user	0m1.065s
sys	0m0.754s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: scrabble
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkScore-4   	   10000	    133667 ns/op	   26492 B/op	     385 allocs/op
PASS
ok  	scrabble	1.409s

real	0m2.205s
user	0m3.526s
sys	0m0.894s

===============================================================================

go test -tags bonus
PASS
ok  	scrabble	0.017s

real	0m0.970s
user	0m1.250s
sys	0m0.676s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet scrabble

real	0m0.619s
user	0m0.804s
sys	0m0.443s

===============================================================================

go fix scrabble

real	0m0.214s
user	0m0.282s
sys	0m0.192s

===============================================================================

gosec ./scrabble-score
[gosec] 2022/07/25 08:09:25 Including rules: default
[gosec] 2022/07/25 08:09:25 Excluding rules: default
[gosec] 2022/07/25 08:09:25 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/scrabble-score
2022/07/25 08:09:25 internal error: package "regexp" without types was imported from "command-line-arguments"

real	0m0.740s
user	0m0.841s
sys	0m0.542s

===============================================================================

gomarkdoc --output scrabble-doc.md

real	0m0.030s
user	0m0.021s
sys	0m0.015s

===============================================================================

go doc -all scrabble
package scrabble // import "scrabble"

Package scrabble Given a word, compute the Scrabble score for that word.

FUNCTIONS

func Score(word string) int
    Score returns an `int` scrablle score for a given word (`string`).


real	0m0.283s
user	0m0.226s
sys	0m0.191s


===============================================================================

