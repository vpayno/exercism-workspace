
 94     	func NewVigenere(key string) Cipher {
 95     		if key == "" {
 96     			return nil
 97     		}
 98     	
 99     		reStr := `^a+$`
100     		match, err := regexp.MatchString(reStr, key)
101     		if err != nil {
102 MISS			panic(err)
103     		}
104     	
105     		// a+ key not allowed
106     		if match {
107     			return nil
108     		}
109     	
110     		reStr = `^[a-z]+$`
111     		match, err = regexp.MatchString(reStr, key)
112     	
113     		if err != nil {
114 MISS			panic(err)
115     		}
116     	
117     		// key doesn't consist of just a-z letters
118     		if !match {
119     			return nil
120     		}
121     	
122     		cipher := vigenere{
123     			key: key,
124     		}
125     	
126     		return cipher
127     	}


202     	func fixKey(oldKey string, size int) string {
203     		if size <= 0 {
204 MISS			return ""
205     		}
206     	
207     		newKey := oldKey
208     	
209     		for len(newKey) < size {
210     			newKey += oldKey
211     		}
212     	
213     		newKey = newKey[:size]
214     	
215     		return newKey
216     	}


183     	func normalize(text string) string {
184     		if text == "" {
185 MISS			return ""
186     		}
187     	
188     		var output string
189     	
190     		reStr := `[[:^alpha:]]`
191     		re, err := regexp.Compile(reStr)
192     		if err != nil {
193 MISS			panic(err)
194     		}
195     	
196     		output = re.ReplaceAllString(text, "")
197     		output = strings.ToLower(output)
198     	
199     		return output
200     	}


157     	func (v vigenere) Decode(cipher string) string {
158     		if cipher == "" {
159 MISS			return ""
160     		}
161     	
162     		input := cipher
163     	
164     		key := fixKey(v.key, len(input))
165     	
166     		var plain strings.Builder
167     	
168     		for i, char := range key {
169     			offset := int(char) - 97
170     			target := int(input[i]) - offset
171     	
172     			// Chars below A need to roll back to top of the range.
173     			if target < 97 {
174     				target += 26
175     			}
176     	
177     			plain.WriteRune(rune(target))
178     		}
179     	
180     		return plain.String()
181     	}


130     	func (v vigenere) Encode(plain string) string {
131     		if plain == "" {
132 MISS			return ""
133     		}
134     	
135     		input := normalize(plain)
136     	
137     		key := fixKey(v.key, len(input))
138     	
139     		var cipher strings.Builder
140     	
141     		for i, char := range key {
142     			offset := int(char) - 97
143     			target := int(input[i]) + offset
144     	
145     			// Chars above Z need to roll back to bottom of the range.
146     			if target > 122 {
147     				target -= 26
148     			}
149     	
150     			cipher.WriteRune(rune(target))
151     		}
152     	
153     		return cipher.String()
154     	}

