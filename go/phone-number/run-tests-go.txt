Running automated test file(s):

Go packages: phonenumber 


===============================================================================

golint phonenumber

real	0m0.161s
user	0m0.191s
sys	0m0.179s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out phonenumber
=== RUN   TestNumber
--- PASS: TestNumber (0.00s)
=== RUN   TestAreaCode
--- PASS: TestAreaCode (0.00s)
=== RUN   TestFormat
--- PASS: TestFormat (0.00s)
=== RUN   ExampleNumber
--- PASS: ExampleNumber (0.00s)
=== RUN   ExampleAreaCode
--- PASS: ExampleAreaCode (0.00s)
=== RUN   ExampleFormat
--- PASS: ExampleFormat (0.00s)
PASS
coverage: 88.7% of statements
ok  	phonenumber	0.010s	coverage: 88.7% of statements

real	0m0.739s
user	0m0.838s
sys	0m0.634s

===============================================================================

go tool cover -func=coverage.out
phonenumber/phone_number.go:37:		ValidateInput	88.1%
phonenumber/phone_number.go:113:	Number		90.9%
phonenumber/phone_number.go:138:	AreaCode	88.9%
phonenumber/phone_number.go:158:	Format		88.9%
total:					(statements)	88.7%

real	0m0.243s
user	0m0.232s
sys	0m0.261s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.237s
user	0m0.210s
sys	0m0.224s

===============================================================================

go test -v -race -covermode=atomic phonenumber
=== RUN   TestNumber
--- PASS: TestNumber (0.02s)
=== RUN   TestAreaCode
--- PASS: TestAreaCode (0.02s)
=== RUN   TestFormat
--- PASS: TestFormat (0.02s)
=== RUN   ExampleNumber
--- PASS: ExampleNumber (0.00s)
=== RUN   ExampleAreaCode
--- PASS: ExampleAreaCode (0.00s)
=== RUN   ExampleFormat
--- PASS: ExampleFormat (0.01s)
PASS
coverage: 88.7% of statements
ok  	phonenumber	0.108s	coverage: 88.7% of statements

real	0m1.176s
user	0m1.006s
sys	0m0.606s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: phonenumber
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkNumber-4     	    2082	    754748 ns/op	  219575 B/op	    2160 allocs/op
BenchmarkAreaCode-4   	    1384	    919541 ns/op	  259687 B/op	    2490 allocs/op
BenchmarkFormat-4     	    1719	    862052 ns/op	  263049 B/op	    2525 allocs/op
PASS
ok  	phonenumber	4.653s

real	0m5.254s
user	0m8.038s
sys	0m1.078s

===============================================================================

go test -tags bonus
PASS
ok  	phonenumber	0.013s

real	0m0.599s
user	0m0.608s
sys	0m0.505s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet phonenumber

real	0m0.363s
user	0m0.461s
sys	0m0.375s

===============================================================================

go fix phonenumber

real	0m0.155s
user	0m0.133s
sys	0m0.129s

===============================================================================

gosec ./phone-number
[gosec] 2022/07/03 16:55:10 Including rules: default
[gosec] 2022/07/03 16:55:10 Excluding rules: default
[gosec] 2022/07/03 16:55:10 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/phone-number
2022/07/03 16:55:10 internal error: package "errors" without types was imported from "command-line-arguments"

real	0m0.467s
user	0m0.530s
sys	0m0.351s

===============================================================================

gomarkdoc --output phonenumber-doc.md

real	0m0.038s
user	0m0.031s
sys	0m0.014s

===============================================================================

go doc -all phonenumber
package phonenumber // import "phonenumber"

Package phonenumber used to clean up NANP (North American Numbering Plan)
phone numbers.

VARIABLES

var ErrAreaCodeStartsWithOne = errors.New("area code cannot start with one")
    ErrAreaCodeStartsWithOne is an error used when area codes start with one.

var ErrAreaCodeStartsWithZero = errors.New("area code cannot start with zero")
    ErrAreaCodeStartsWithZero is an error used when area codes start with zero.

var ErrContainsLetters = errors.New("letters not permitted")
    ErrContainsLetters is an error used when the phone number has letters in it.

var ErrContainsPunctuations = errors.New("punctuations not permitted")
    ErrContainsPunctuations is an error used when the phone number has
    punctuation in it.

var ErrElevenNotStartWithOne = errors.New("11 digits must start with 1")
    ErrElevenNotStartWithOne is an error used when the phone number has 11
    digits and it doesn't start with one.

var ErrExchangeCodeStartsWithOne = errors.New("exchange code cannot start with one")
    ErrExchangeCodeStartsWithOne is an error used when exchange codes start with
    one.

var ErrExchangeCodeStartsWithZero = errors.New("exchange code cannot start with zero")
    ErrExchangeCodeStartsWithZero is an error used when exchange codes start
    with zero.

var ErrNumOfDigits = errors.New("incorrect number of digits")
    ErrNumOfDigits is an error used when the phone number has less than 10
    digits.

var ErrTooManyNumbers = errors.New("more than 11 digits")
    ErrTooManyNumbers is an error used when the phone number has more than 11
    digits.


FUNCTIONS

func AreaCode(phoneNumber string) (string, error)
    AreaCode returns the area code from a phone number.

func Format(phoneNumber string) (string, error)
    Format returns a pretty phone number.

func Number(phoneNumber string) (string, error)
    Number returns just the digits of the passed phone number.

func ValidateInput(phoneNumber string) error
    ValidateInput returns an error if the phone number has invalid data in it.


real	0m0.278s
user	0m0.174s
sys	0m0.271s


===============================================================================

