Running automated test file(s):

Go packages: resistorcolorduo 


===============================================================================

golangci-lint run ./...
resistor_color_duo_example_test.go:14:11: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck)
		name := strings.Title(color.String())
		        ^
resistor_color_duo_example_test.go:45:11: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck)
		name := strings.Title(color.String())
		        ^

real	0m0.237s
user	0m0.368s
sys	0m0.205s

===============================================================================

golint ./...

real	0m0.005s
user	0m0.002s
sys	0m0.004s

===============================================================================

revive -formatter=stylish ./...

real	0m0.190s
user	0m0.303s
sys	0m0.291s

===============================================================================

ineffassign ./...

real	0m0.099s
user	0m0.237s
sys	0m0.179s

===============================================================================

go-consistent -v ./...
	info: check "./."
internal error: package "fmt" without types was imported from "resistorcolorduo [resistorcolorduo.test]"

real	0m0.111s
user	0m0.245s
sys	0m0.196s

===============================================================================

staticcheck ./...
resistor_color_duo_example_test.go:14:11: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead.  (SA1019)
resistor_color_duo_example_test.go:45:11: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead.  (SA1019)

real	0m0.147s
user	0m0.223s
sys	0m0.151s

===============================================================================

gocritic check -enableAll ./...

real	0m0.745s
user	0m2.301s
sys	0m0.460s

===============================================================================

go vet ./...

real	0m0.090s
user	0m0.185s
sys	0m0.149s

===============================================================================

go fix ./...

real	0m0.014s
user	0m0.008s
sys	0m0.009s

===============================================================================

gocyclo .
3 resistorcolorduo BenchmarkValue resistor_color_duo_test.go:20:1
3 resistorcolorduo TestValue resistor_color_duo_test.go:5:1
3 resistorcolorduo ColorCode resistor_color_duo.go:97:1
3 resistorcolorduo (Color).Int resistor_color_duo.go:64:1
3 resistorcolorduo (Color).String resistor_color_duo.go:54:1
2 resistorcolorduo ExampleColorCode resistor_color_duo_example_test.go:77:1
2 resistorcolorduo ExampleColor_Int resistor_color_duo_example_test.go:39:1
2 resistorcolorduo ExampleColor_String resistor_color_duo_example_test.go:8:1
2 resistorcolorduo Value resistor_color_duo.go:108:1
2 resistorcolorduo Colors resistor_color_duo.go:78:1
1 resistorcolorduo ExampleValue resistor_color_duo_example_test.go:102:1
1 resistorcolorduo ExampleColors resistor_color_duo_example_test.go:70:1

real	0m0.002s
user	0m0.001s
sys	0m0.001s

===============================================================================

misspell .

real	0m0.024s
user	0m0.030s
sys	0m0.017s

===============================================================================

gosec ./...
[gosec] 2023/03/05 17:40:10 Including rules: default
[gosec] 2023/03/05 17:40:10 Excluding rules: default
[gosec] 2023/03/05 17:40:10 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/resistor-color-duo
[gosec] 2023/03/05 17:40:10 Checking package: resistorcolorduo
[gosec] 2023/03/05 17:40:10 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/resistor-color-duo/resistor_color_duo.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 128
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.079s
user	0m0.081s
sys	0m0.048s

===============================================================================

gotest -v -covermode=count -coverprofile coverage.out ./...
=== RUN   TestValue
=== RUN   TestValue/Brown_and_black
=== RUN   TestValue/Blue_and_grey
=== RUN   TestValue/Yellow_and_violet
=== RUN   TestValue/White_and_red
=== RUN   TestValue/Orange_and_orange
=== RUN   TestValue/Ignore_additional_colors
=== RUN   TestValue/Black_and_brown,_one-digit
--- PASS: TestValue (0.00s)
    --- PASS: TestValue/Brown_and_black (0.00s)
    --- PASS: TestValue/Blue_and_grey (0.00s)
    --- PASS: TestValue/Yellow_and_violet (0.00s)
    --- PASS: TestValue/White_and_red (0.00s)
    --- PASS: TestValue/Orange_and_orange (0.00s)
    --- PASS: TestValue/Ignore_additional_colors (0.00s)
    --- PASS: TestValue/Black_and_brown,_one-digit (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
PASS
	resistorcolorduo	coverage: 100.0% of statements
ok  	resistorcolorduo	0.003s	coverage: 100.0% of statements

real	0m0.207s
user	0m0.349s
sys	0m0.204s

===============================================================================

go tool cover -func=coverage.out
resistorcolorduo/resistor_color_duo.go:54:	String		100.0%
resistorcolorduo/resistor_color_duo.go:64:	Int		100.0%
resistorcolorduo/resistor_color_duo.go:78:	Colors		100.0%
resistorcolorduo/resistor_color_duo.go:97:	ColorCode	100.0%
resistorcolorduo/resistor_color_duo.go:108:	Value		100.0%
total:						(statements)	100.0%

real	0m0.021s
user	0m0.010s
sys	0m0.021s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.020s
user	0m0.008s
sys	0m0.021s

===============================================================================

gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

real	0m0.010s
user	0m0.004s
sys	0m0.010s

===============================================================================

gotest -v -race -covermode=atomic ./...
=== RUN   TestValue
=== RUN   TestValue/Brown_and_black
=== RUN   TestValue/Blue_and_grey
=== RUN   TestValue/Yellow_and_violet
=== RUN   TestValue/White_and_red
=== RUN   TestValue/Orange_and_orange
=== RUN   TestValue/Ignore_additional_colors
=== RUN   TestValue/Black_and_brown,_one-digit
--- PASS: TestValue (0.00s)
    --- PASS: TestValue/Brown_and_black (0.00s)
    --- PASS: TestValue/Blue_and_grey (0.00s)
    --- PASS: TestValue/Yellow_and_violet (0.00s)
    --- PASS: TestValue/White_and_red (0.00s)
    --- PASS: TestValue/Orange_and_orange (0.00s)
    --- PASS: TestValue/Ignore_additional_colors (0.00s)
    --- PASS: TestValue/Black_and_brown,_one-digit (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
PASS
	resistorcolorduo	coverage: 100.0% of statements
ok  	resistorcolorduo	0.022s	coverage: 100.0% of statements

real	0m0.277s
user	0m0.404s
sys	0m0.240s

===============================================================================

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: resistorcolorduo
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkValue
BenchmarkValue-16    	  276778	      4326 ns/op	    6944 B/op	      70 allocs/op
PASS
ok  	resistorcolorduo	2.176s

real	0m2.343s
user	0m2.955s
sys	0m0.394s

===============================================================================

gotest -v -tags bonus
=== RUN   TestValue
=== RUN   TestValue/Brown_and_black
=== RUN   TestValue/Blue_and_grey
=== RUN   TestValue/Yellow_and_violet
=== RUN   TestValue/White_and_red
=== RUN   TestValue/Orange_and_orange
=== RUN   TestValue/Ignore_additional_colors
=== RUN   TestValue/Black_and_brown,_one-digit
--- PASS: TestValue (0.00s)
    --- PASS: TestValue/Brown_and_black (0.00s)
    --- PASS: TestValue/Blue_and_grey (0.00s)
    --- PASS: TestValue/Yellow_and_violet (0.00s)
    --- PASS: TestValue/White_and_red (0.00s)
    --- PASS: TestValue/Orange_and_orange (0.00s)
    --- PASS: TestValue/Ignore_additional_colors (0.00s)
    --- PASS: TestValue/Black_and_brown,_one-digit (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
PASS
ok  	resistorcolorduo	0.002s

real	0m0.144s
user	0m0.299s
sys	0m0.175s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

gomarkdoc --output resistorcolorduo-doc.md

real	0m0.012s
user	0m0.006s
sys	0m0.006s

===============================================================================

go doc -all resistorcolorduo
package resistorcolorduo // import "resistorcolorduo"

Package resistorcolorduo helps users identify resistors using their color bands.

VARIABLES

var ColorNames = map[Color]string{
	Undefined: "undefined",
	Black:     "black",
	Brown:     "brown",
	Red:       "red",
	Orange:    "orange",
	Yellow:    "yellow",
	Green:     "green",
	Blue:      "blue",
	Violet:    "violet",
	Grey:      "grey",
	White:     "white",
}
    ColorNames maps Color type to it's string representation.


FUNCTIONS

func ColorCode(color string) int
    ColorCode returns the resistance value of the given color. I guess instead
    of having a map[String]int{} to do the lookups, we have to search a
    []String{} array and find the element with that string and return the index.
    They really sucked the fun out of this function.

func Colors() []string
    Colors should return the list of all colors. They are limiting your
    implementation possibilities. Not sure why even bother having a function
    since the contents of it are very static. I don't wan't to use an array to
    store the color data, I'm going to use an Enum instead. Now to find a clever
    way of generating the data from an Enum type that isn't a type and it's just
    a bunch of constants.

func Value(colors []string) int
    Value returns the resistance value of a resistor with a given colors.


TYPES

type Color int
    Color type represents the value of a resistor's band.

const (
	Undefined Color = iota - 1
	Black
	Brown
	Red
	Orange
	Yellow
	Green
	Blue
	Violet
	Grey
	White
)
    Color constants used as an Enum. Starts with -1 for which is used as an
    undefined color.

const (
	ColorMin Color = Black
	ColorMax       = White
)
    To make Color lower and upper bound tests clearer, let's define constants.
    Black and White are at the lower and upper boundaries. All other colors
    should be between them.

func (c Color) Int() int
    Int returns the integer representation of a Color. Yes, we could just use
    int(Color); But, this is more fun.

func (c Color) String() string
    String implements the Stringer interface. Another way of getting the String
    equivalent of a Color. We're going to use both to help make this exercise
    interesting. You can also use a switch in here; But, since we have our
    min/max constants, this should be easier to maintain. This also allows us to
    provide a response for undefined colors without complicated error checking
    since this exercise lacks error returns on the functions being tested.


real	0m0.030s
user	0m0.012s
sys	0m0.027s


===============================================================================

