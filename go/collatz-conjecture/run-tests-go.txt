Running automated test file(s):

Go packages: collatzconjecture 


===============================================================================

golint collatzconjecture

real	0m0.204s
user	0m0.183s
sys	0m0.203s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out collatzconjecture
=== RUN   TestCollatzConjecture
=== RUN   TestCollatzConjecture/zero_steps_for_one
=== RUN   TestCollatzConjecture/divide_if_even
=== RUN   TestCollatzConjecture/even_and_odd_steps
=== RUN   TestCollatzConjecture/large_number_of_even_and_odd_steps
=== RUN   TestCollatzConjecture/zero_is_an_error
=== RUN   TestCollatzConjecture/negative_value_is_an_error
--- PASS: TestCollatzConjecture (0.00s)
    --- PASS: TestCollatzConjecture/zero_steps_for_one (0.00s)
    --- PASS: TestCollatzConjecture/divide_if_even (0.00s)
    --- PASS: TestCollatzConjecture/even_and_odd_steps (0.00s)
    --- PASS: TestCollatzConjecture/large_number_of_even_and_odd_steps (0.00s)
    --- PASS: TestCollatzConjecture/zero_is_an_error (0.00s)
    --- PASS: TestCollatzConjecture/negative_value_is_an_error (0.00s)
=== RUN   ExampleCollatzConjecture
--- PASS: ExampleCollatzConjecture (0.00s)
PASS
coverage: 100.0% of statements
ok  	collatzconjecture	0.008s	coverage: 100.0% of statements

real	0m0.766s
user	0m0.817s
sys	0m0.551s

===============================================================================

go tool cover -func=coverage.out
collatzconjecture/collatz_conjecture.go:7:	CollatzConjecture	100.0%
total:						(statements)		100.0%

real	0m0.309s
user	0m0.265s
sys	0m0.226s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.330s
user	0m0.317s
sys	0m0.300s

===============================================================================

go test -v -race -covermode=atomic collatzconjecture
=== RUN   TestCollatzConjecture
=== RUN   TestCollatzConjecture/zero_steps_for_one
=== RUN   TestCollatzConjecture/divide_if_even
=== RUN   TestCollatzConjecture/even_and_odd_steps
=== RUN   TestCollatzConjecture/large_number_of_even_and_odd_steps
=== RUN   TestCollatzConjecture/zero_is_an_error
=== RUN   TestCollatzConjecture/negative_value_is_an_error
--- PASS: TestCollatzConjecture (0.00s)
    --- PASS: TestCollatzConjecture/zero_steps_for_one (0.00s)
    --- PASS: TestCollatzConjecture/divide_if_even (0.00s)
    --- PASS: TestCollatzConjecture/even_and_odd_steps (0.00s)
    --- PASS: TestCollatzConjecture/large_number_of_even_and_odd_steps (0.00s)
    --- PASS: TestCollatzConjecture/zero_is_an_error (0.00s)
    --- PASS: TestCollatzConjecture/negative_value_is_an_error (0.00s)
=== RUN   ExampleCollatzConjecture
--- PASS: ExampleCollatzConjecture (0.00s)
PASS
coverage: 100.0% of statements
ok  	collatzconjecture	0.028s	coverage: 100.0% of statements

real	0m1.116s
user	0m0.898s
sys	0m0.633s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: collatzconjecture
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkCollatzConjecture-4   	 1437994	       957.2 ns/op	     104 B/op	       5 allocs/op
PASS
ok  	collatzconjecture	2.279s

real	0m2.979s
user	0m3.512s
sys	0m0.577s

===============================================================================

go test -tags bonus
PASS
ok  	collatzconjecture	0.021s

real	0m0.533s
user	0m0.620s
sys	0m0.366s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet collatzconjecture

real	0m0.352s
user	0m0.445s
sys	0m0.280s

===============================================================================

go fix collatzconjecture

real	0m0.236s
user	0m0.194s
sys	0m0.180s

===============================================================================

gosec ./collatz-conjecture
[gosec] 2022/07/22 13:29:21 Including rules: default
[gosec] 2022/07/22 13:29:21 Excluding rules: default
[gosec] 2022/07/22 13:29:21 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/collatz-conjecture
2022/07/22 13:29:21 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.547s
user	0m0.652s
sys	0m0.383s

===============================================================================

gomarkdoc --output collatzconjecture-doc.md

real	0m0.030s
user	0m0.020s
sys	0m0.016s

===============================================================================

go doc -all collatzconjecture
package collatzconjecture // import "collatzconjecture"

Package collatzconjecture states that the orbit of every number under f
eventually reaches 1.

FUNCTIONS

func CollatzConjecture(n int) (int, error)
    CollatzConjecture returns the number of steps needed to reach 1 using The
    Collatz Conjecture.


real	0m0.233s
user	0m0.138s
sys	0m0.197s


===============================================================================

