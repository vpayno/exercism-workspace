Running automated test file(s):

Go packages: diffsquares 


===============================================================================

golint diffsquares

real	0m0.240s
user	0m0.206s
sys	0m0.223s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out diffsquares
=== RUN   TestSquareOfSum
--- PASS: TestSquareOfSum (0.00s)
=== RUN   TestSumOfSquares
--- PASS: TestSumOfSquares (0.00s)
=== RUN   TestDifference
--- PASS: TestDifference (0.00s)
=== RUN   ExampleSquareOfSum
--- PASS: ExampleSquareOfSum (0.00s)
=== RUN   ExampleSumOfSquares
--- PASS: ExampleSumOfSquares (0.00s)
=== RUN   ExampleDifference
--- PASS: ExampleDifference (0.00s)
PASS
coverage: 100.0% of statements
ok  	diffsquares	0.015s	coverage: 100.0% of statements

real	0m1.325s
user	0m1.714s
sys	0m1.027s

===============================================================================

go tool cover -func=coverage.out
diffsquares/difference_of_squares.go:7:		SquareOfSum	100.0%
diffsquares/difference_of_squares.go:18:	SumOfSquares	100.0%
diffsquares/difference_of_squares.go:29:	Difference	100.0%
total:						(statements)	100.0%

real	0m0.368s
user	0m0.206s
sys	0m0.271s

===============================================================================

go test -v -race -covermode=atomic diffsquares
=== RUN   TestSquareOfSum
--- PASS: TestSquareOfSum (0.00s)
=== RUN   TestSumOfSquares
--- PASS: TestSumOfSquares (0.00s)
=== RUN   TestDifference
--- PASS: TestDifference (0.00s)
=== RUN   ExampleSquareOfSum
--- PASS: ExampleSquareOfSum (0.00s)
=== RUN   ExampleSumOfSquares
--- PASS: ExampleSumOfSquares (0.00s)
=== RUN   ExampleDifference
--- PASS: ExampleDifference (0.00s)
PASS
coverage: 100.0% of statements
ok  	diffsquares	(cached)	coverage: 100.0% of statements

real	0m0.804s
user	0m0.971s
sys	0m0.778s

===============================================================================

go test --bench . --benchmem
goos: linux
goarch: amd64
pkg: diffsquares
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkSquareOfSum-4    	 9977414	       164.7 ns/op	       0 B/op	       0 allocs/op
BenchmarkSumOfSquares-4   	  214692	      4752 ns/op	       0 B/op	       0 allocs/op
BenchmarkDifference-4     	  241269	      7036 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	diffsquares	4.825s

real	0m6.139s
user	0m6.802s
sys	0m1.027s

===============================================================================

go test -tags bonus
PASS
ok  	diffsquares	0.020s

real	0m1.190s
user	0m1.632s
sys	0m0.892s

===============================================================================

go vet diffsquares

real	0m0.648s
user	0m0.806s
sys	0m0.605s

===============================================================================

go fix diffsquares

real	0m0.144s
user	0m0.078s
sys	0m0.137s

===============================================================================

gosec ./difference-of-squares
[gosec] 2022/06/23 08:32:47 Including rules: default
[gosec] 2022/06/23 08:32:47 Excluding rules: default
[gosec] 2022/06/23 08:32:47 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/difference-of-squares
2022/06/23 08:32:47 internal error: package "math" without types was imported from "command-line-arguments"

real	0m0.614s
user	0m0.696s
sys	0m0.430s

===============================================================================

gomarkdoc --output diffsquares-doc.md

real	0m0.110s
user	0m0.086s
sys	0m0.048s

===============================================================================

go doc -all diffsquares
package diffsquares // import "diffsquares"

Package diffsquares finds the difference between the square of the sum and
the sum of the squares of the first N natural numbers.

FUNCTIONS

func Difference(n int) int
    Difference returns the difference between the Square of Sums and Sum of
    Squares.

func SquareOfSum(n int) int
    SquareOfSum returns the sum, `int`, of the square of the sum of the first n
    (`int`) numbers (starting with 1 to 10, inclusive).

func SumOfSquares(n int) int
    SumOfSquares returns the sum, `int`, of the sum of the first n (`int`)
    squares (starting with 1 to 10, inclusive).


real	0m0.212s
user	0m0.108s
sys	0m0.220s


===============================================================================

