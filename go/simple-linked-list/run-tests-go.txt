Running automated test file(s):

Go packages: linkedlist 


===============================================================================

Running: ../../.github/citools/go/go-lint-golangci-lint

Running GoLangCi-Lint

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.020s
user	0m0.010s
sys	0m0.016s


 ==============================================================================

Running: golangci-lint run --enable-all ./...

level=warning msg="[runner] The linter 'golint' is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner. Replaced by revive."
level=warning msg="[runner] The linter 'exhaustivestruct' is deprecated (since v1.46.0) due to: The owner seems to have abandoned the linter. Replaced by exhaustruct."
level=warning msg="[runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'scopelint' is deprecated (since v1.39.0) due to: The repository of the linter has been deprecated by the owner. Replaced by exportloopref."
level=warning msg="[runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'nosnakecase' is deprecated (since v1.48.1) due to: The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming)."
level=warning msg="[runner] The linter 'interfacer' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. "
level=warning msg="[runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'maligned' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'."
level=warning msg="[runner] The linter 'ifshort' is deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner. "
simple_linked_list_test.go:134:10: Error return value of `list.Pop` is not checked (errcheck)
	list.Pop()
	        ^
simple_linked_list_test.go:137:10: Error return value of `list.Pop` is not checked (errcheck)
	list.Pop()
	        ^
simple_linked_list.go:105:3: assignments should only be cuddled with other assignments (wsl)
		e = l.Next()
		^
simple_linked_list.go:132:3: append only allowed to cuddle with appended value (wsl)
		slice = append(slice, e.data)
		^
simple_linked_list_examples_test.go:41:3: assignments should only be cuddled with other assignments (wsl)
		n = list.Next()
		^
simple_linked_list_test.go:15:2: assignments should only be cuddled with other assignments (wsl)
	list = New(nil)
	^
simple_linked_list_test.go:16:2: only one cuddle assignment allowed before if statement (wsl)
	if size := list.Size(); size != 0 {
	^
simple_linked_list_test.go:65:2: only one cuddle assignment allowed before if statement (wsl)
	if array := list.Array(); len(array) != 0 {
	^
simple_linked_list_test.go:74:2: only one cuddle assignment allowed before if statement (wsl)
	if !reflect.DeepEqual(array, expected) {
	^
simple_linked_list_test.go:96:2: if statements should only be cuddled with assignments (wsl)
	if elem != 3 {
	^
simple_linked_list_test.go:170:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
simple_linked_list_test.go:180:2: only cuddled expressions if assigning variable or using from line above (wsl)
	b.ResetTimer()
	^
simple_linked_list_test.go:181:2: only one cuddle assignment allowed before for statement (wsl)
	for i := 0; i < b.N; i++ {
	^
simple_linked_list_test.go:193:3: only cuddled expressions if assigning variable or using from line above (wsl)
		b.StartTimer()
		^
simple_linked_list_test.go:194:3: only one cuddle assignment allowed before for statement (wsl)
		for k := 0; k < 1000; k++ {
		^
simple_linked_list_test.go:190:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
simple_linked_list_test.go:207:3: only one cuddle assignment allowed before for statement (wsl)
		for k := 0; k < 1000; k++ {
		^
simple_linked_list_test.go:204:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
simple_linked_list_test.go:222:2: only cuddled expressions if assigning variable or using from line above (wsl)
	b.ResetTimer()
	^
simple_linked_list.go:141:11: head, tail, curr, size are missing in List (exhaustivestruct)
		return &List{}
		        ^
simple_linked_list_test.go:8:5: array1To10 is a global variable (gochecknoglobals)
var array1To10 = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
    ^
simple_linked_list.go:89:13: err113: do not define dynamic errors, use wrapped static errors instead: "errors.New(\"can't pop an element from an empty list\")" (goerr113)
		return 0, errors.New("can't pop an element from an empty list")
		          ^
simple_linked_list.go:125:2: variable 'e' is only used in the if-statement (simple_linked_list.go:127:2); consider using short syntax (ifshort)
	e := l.Next()
	^
simple_linked_list_test.go:73:2: variable 'array' is only used in the if-statement (simple_linked_list_test.go:74:2); consider using short syntax (ifshort)
	array := list.Array()
	^
simple_linked_list_test.go:100:2: variable 'expected' is only used in the if-statement (simple_linked_list_test.go:101:2); consider using short syntax (ifshort)
	expected := []int{1, 2}
	^
simple_linked_list_test.go:125:2: variable 'actual' is only used in the if-statement (simple_linked_list_test.go:127:2); consider using short syntax (ifshort)
	actual := list.Array()
	^
simple_linked_list_test.go:126:2: variable 'expected' is only used in the if-statement (simple_linked_list_test.go:127:2); consider using short syntax (ifshort)
	expected := []int{1, 2, 3, 4}
	^
simple_linked_list_test.go:139:2: variable 'actual' is only used in the if-statement (simple_linked_list_test.go:141:2); consider using short syntax (ifshort)
	actual := list.Array()
	^
simple_linked_list_test.go:140:2: variable 'expected' is only used in the if-statement (simple_linked_list_test.go:141:2); consider using short syntax (ifshort)
	expected := []int{1, 2, 4, 6}
	^
simple_linked_list_test.go:160:2: variable 'expected' is only used in the if-statement (simple_linked_list_test.go:161:2); consider using short syntax (ifshort)
	expected := []int{3, 2, 1}
	^
simple_linked_list_examples_test.go:5:6: ExampleList_new contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_new() {
     ^
simple_linked_list_examples_test.go:20:6: ExampleList_size contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_size() {
     ^
simple_linked_list_examples_test.go:31:6: ExampleList_next contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_next() {
     ^
simple_linked_list_examples_test.go:52:6: ExampleList_push contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_push() {
     ^
simple_linked_list_examples_test.go:86:6: ExampleList_pop contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_pop() {
     ^
simple_linked_list_examples_test.go:126:6: ExampleList_array contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_array() {
     ^
simple_linked_list_examples_test.go:138:6: ExampleList_reverse contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleList_reverse() {
     ^
simple_linked_list_test.go:10:1: Function TestEmptyListHasSizeZero missing the call to method parallel (paralleltest)
func TestEmptyListHasSizeZero(t *testing.T) {
^
simple_linked_list_test.go:21:1: Function TestSingletonListHasSizeOne missing the call to method parallel (paralleltest)
func TestSingletonListHasSizeOne(t *testing.T) {
^
simple_linked_list_test.go:28:1: Function TestNonEmptyListHasCorrectSize missing the call to method parallel (paralleltest)
func TestNonEmptyListHasCorrectSize(t *testing.T) {
^
simple_linked_list_test.go:35:1: Function TestListHasCorrectSizeAfterPop missing the call to method parallel (paralleltest)
func TestListHasCorrectSizeAfterPop(t *testing.T) {
^
simple_linked_list_test.go:47:1: Function TestListHasCorrectSizeAfterPush missing the call to method parallel (paralleltest)
func TestListHasCorrectSizeAfterPush(t *testing.T) {
^
simple_linked_list_test.go:59:1: Function TestEmptyListToEmptyArray missing the call to method parallel (paralleltest)
func TestEmptyListToEmptyArray(t *testing.T) {
^
simple_linked_list_test.go:70:1: Function TestNonEmptyListToArray missing the call to method parallel (paralleltest)
func TestNonEmptyListToArray(t *testing.T) {
^
simple_linked_list_test.go:79:1: Function TestPopFromEmptyList missing the call to method parallel (paralleltest)
func TestPopFromEmptyList(t *testing.T) {
^
simple_linked_list_test.go:90:1: Function TestPopFromNonEmptyList missing the call to method parallel (paralleltest)
func TestPopFromNonEmptyList(t *testing.T) {
^
simple_linked_list_test.go:106:1: Function TestPushToEmptyList missing the call to method parallel (paralleltest)
func TestPushToEmptyList(t *testing.T) {
^
simple_linked_list_test.go:122:1: Function TestPushToNonEmptyList missing the call to method parallel (paralleltest)
func TestPushToNonEmptyList(t *testing.T) {
^
simple_linked_list_test.go:132:1: Function TestPushAndPop missing the call to method parallel (paralleltest)
func TestPushAndPop(t *testing.T) {
^
simple_linked_list_test.go:146:1: Function TestReverseEmptyList missing the call to method parallel (paralleltest)
func TestReverseEmptyList(t *testing.T) {
^
simple_linked_list_test.go:157:1: Function TestReverseNonEmptyList missing the call to method parallel (paralleltest)
func TestReverseNonEmptyList(t *testing.T) {
^
simple_linked_list_examples_test.go:1:9: package should be `linkedlist_test` instead of `linkedlist` (testpackage)
package linkedlist
        ^
simple_linked_list_test.go:1:9: package should be `linkedlist_test` instead of `linkedlist` (testpackage)
package linkedlist
        ^
simple_linked_list_examples_test.go:93:2: variable name 'd' is too short for the scope of its usage (varnamelen)
	d, e := list.Pop()
	^
simple_linked_list.go:99:2: variable name 'e' is too short for the scope of its usage (varnamelen)
	e := l.Next()
	^
simple_linked_list_examples_test.go:53:2: variable name 'l1' is too short for the scope of its usage (varnamelen)
	l1 := List{
	^

real	0m0.549s
user	0m0.878s
sys	0m0.517s


 ==============================================================================

Exit code: -1

real	0m0.582s
user	0m0.894s
sys	0m0.544s

real	0m0.584s
user	0m0.895s
sys	0m0.546s

===============================================================================

Running: ../../.github/citools/go/go-lint-revive

Running Go Lint Revive

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.026s
user	0m0.014s
sys	0m0.018s


 ==============================================================================

Running: revive -formatter=stylish ./...


real	0m0.064s
user	0m0.037s
sys	0m0.043s


 ==============================================================================

Exit code: 0

real	0m0.101s
user	0m0.059s
sys	0m0.068s

real	0m0.103s
user	0m0.061s
sys	0m0.069s

===============================================================================

Running: ../../.github/citools/go/go-lint-ineffassign
../run-tests: line 41: .github/citools/go/go-lint-ineffassign: No such file or directory

real	0m0.001s
user	0m0.000s
sys	0m0.000s

===============================================================================

Running: ../../.github/citools/go/go-lint-go-consistent

Running Go go-consistent

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.022s
user	0m0.012s
sys	0m0.014s


 ==============================================================================

Running: go-consistent -v ./...

	info: check "./."
internal error: package "errors" without types was imported from "linkedlist"

real	0m0.090s
user	0m0.139s
sys	0m0.098s


 ==============================================================================

Exit code: -1

real	0m0.124s
user	0m0.155s
sys	0m0.123s

real	0m0.126s
user	0m0.155s
sys	0m0.125s

===============================================================================

Running: ../../.github/citools/go/go-lint-staticcheck

Running Go StaticCheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.017s
user	0m0.009s
sys	0m0.015s


 ==============================================================================

Running: staticcheck -checks=all ./...


real	0m0.179s
user	0m0.216s
sys	0m0.132s


 ==============================================================================

Exit code: 0

real	0m0.208s
user	0m0.233s
sys	0m0.155s

real	0m0.209s
user	0m0.233s
sys	0m0.156s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocritic

Running Go gocritic

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.020s
user	0m0.011s
sys	0m0.015s


 ==============================================================================

Running: gocritic check -enableAll ./...


real	0m0.844s
user	0m2.121s
sys	0m0.263s


 ==============================================================================

Exit code: 0

real	0m0.876s
user	0m2.138s
sys	0m0.288s

real	0m0.879s
user	0m2.138s
sys	0m0.290s

===============================================================================

Running: ../../.github/citools/go/go-lint-go_vet

Running Go Vet

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.023s
user	0m0.013s
sys	0m0.016s


 ==============================================================================

Running: go vet ./...


real	0m0.074s
user	0m0.105s
sys	0m0.098s


 ==============================================================================

Exit code: 0

real	0m0.112s
user	0m0.126s
sys	0m0.124s

real	0m0.114s
user	0m0.128s
sys	0m0.124s

===============================================================================

Running: ../../.github/citools/go/go-fixer-go_fix

Running go fix

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.018s
user	0m0.010s
sys	0m0.013s


 ==============================================================================

Running: go fix ./...


real	0m0.034s
user	0m0.022s
sys	0m0.021s


 ==============================================================================

Exit code: 0

real	0m0.062s
user	0m0.034s
sys	0m0.046s

real	0m0.064s
user	0m0.034s
sys	0m0.047s

===============================================================================

Running: ../../.github/citools/go/go-lint-errcheck

Running Go errcheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.040s
user	0m0.021s
sys	0m0.035s


 ==============================================================================

Running: errcheck ./...

simple_linked_list_test.go:134:10:	list.Pop()
simple_linked_list_test.go:137:10:	list.Pop()

real	0m0.537s
user	0m1.672s
sys	0m0.329s


 ==============================================================================

Exit code: -1

real	0m0.597s
user	0m1.701s
sys	0m0.382s

real	0m0.600s
user	0m1.704s
sys	0m0.383s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocyclo

Running Go gocyclo

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.026s
user	0m0.015s
sys	0m0.018s


 ==============================================================================

Running: gocyclo .

5 linkedlist BenchmarkListPop simple_linked_list_test.go:200:1
5 linkedlist (*List).Pop simple_linked_list.go:87:1
4 linkedlist BenchmarkListPush simple_linked_list_test.go:186:1
4 linkedlist TestPopFromNonEmptyList simple_linked_list_test.go:90:1
4 linkedlist (*List).Array simple_linked_list.go:118:1
3 linkedlist BenchmarkListReverse simple_linked_list_test.go:228:1
3 linkedlist BenchmarkListToArray simple_linked_list_test.go:217:1
3 linkedlist BenchmarkListSize simple_linked_list_test.go:175:1
3 linkedlist BenchmarkNewList simple_linked_list_test.go:166:1
3 linkedlist TestReverseEmptyList simple_linked_list_test.go:146:1
3 linkedlist TestPushToEmptyList simple_linked_list_test.go:106:1
3 linkedlist TestPopFromEmptyList simple_linked_list_test.go:79:1
3 linkedlist TestEmptyListToEmptyArray simple_linked_list_test.go:59:1
3 linkedlist TestEmptyListHasSizeZero simple_linked_list_test.go:10:1
3 linkedlist (*List).Reverse simple_linked_list.go:139:1
3 linkedlist (*List).Next simple_linked_list.go:46:1
3 linkedlist New simple_linked_list.go:21:1
2 linkedlist TestReverseNonEmptyList simple_linked_list_test.go:157:1
2 linkedlist TestPushAndPop simple_linked_list_test.go:132:1
2 linkedlist TestPushToNonEmptyList simple_linked_list_test.go:122:1
2 linkedlist TestNonEmptyListToArray simple_linked_list_test.go:70:1
2 linkedlist TestListHasCorrectSizeAfterPush simple_linked_list_test.go:47:1
2 linkedlist TestListHasCorrectSizeAfterPop simple_linked_list_test.go:35:1
2 linkedlist TestNonEmptyListHasCorrectSize simple_linked_list_test.go:28:1
2 linkedlist TestSingletonListHasSizeOne simple_linked_list_test.go:21:1
2 linkedlist ExampleList_next simple_linked_list_examples_test.go:31:1
2 linkedlist (*List).Push simple_linked_list.go:58:1
1 linkedlist ExampleList_reverse simple_linked_list_examples_test.go:138:1
1 linkedlist ExampleList_array simple_linked_list_examples_test.go:126:1
1 linkedlist ExampleList_pop simple_linked_list_examples_test.go:86:1
1 linkedlist ExampleList_push simple_linked_list_examples_test.go:52:1
1 linkedlist ExampleList_size simple_linked_list_examples_test.go:20:1
1 linkedlist ExampleList_new simple_linked_list_examples_test.go:5:1
1 linkedlist (*List).Reset simple_linked_list.go:79:1
1 linkedlist (*List).Size simple_linked_list.go:41:1

real	0m0.002s
user	0m0.000s
sys	0m0.003s


 ==============================================================================

Exit code: 0

real	0m0.040s
user	0m0.023s
sys	0m0.027s

real	0m0.042s
user	0m0.023s
sys	0m0.029s

===============================================================================

Running: ../../.github/citools/go/go-lint-misspell

Running Go misspell

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: misspell .


real	0m0.030s
user	0m0.036s
sys	0m0.014s


 ==============================================================================

Exit code: 0

real	0m0.042s
user	0m0.043s
sys	0m0.023s

real	0m0.044s
user	0m0.043s
sys	0m0.025s

===============================================================================

Running: ../../.github/citools/go/go-lint-gosec

Running Go GoSec

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.033s
user	0m0.021s
sys	0m0.022s


 ==============================================================================

Running: gosec ./...

[gosec] 2023/09/07 00:30:53 Including rules: default
[gosec] 2023/09/07 00:30:53 Excluding rules: default
[gosec] 2023/09/07 00:30:53 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/simple-linked-list
[gosec] 2023/09/07 00:30:53 Checking package: linkedlist
[gosec] 2023/09/07 00:30:53 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/simple-linked-list/simple_linked_list.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 154
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.127s
user	0m0.123s
sys	0m0.100s


 ==============================================================================

Exit code: 0

real	0m0.177s
user	0m0.152s
sys	0m0.137s

real	0m0.180s
user	0m0.152s
sys	0m0.139s

===============================================================================

Running: ../../.github/citools/go/go-test-cover-report

Running Go Test, Coverage & Reports

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.022s
user	0m0.016s
sys	0m0.018s


 ==============================================================================

Running: gotest -v -covermode=count -coverprofile coverage.out ./...

=== RUN   TestEmptyListHasSizeZero
--- PASS: TestEmptyListHasSizeZero (0.00s)
=== RUN   TestSingletonListHasSizeOne
--- PASS: TestSingletonListHasSizeOne (0.00s)
=== RUN   TestNonEmptyListHasCorrectSize
--- PASS: TestNonEmptyListHasCorrectSize (0.00s)
=== RUN   TestListHasCorrectSizeAfterPop
--- PASS: TestListHasCorrectSizeAfterPop (0.00s)
=== RUN   TestListHasCorrectSizeAfterPush
--- PASS: TestListHasCorrectSizeAfterPush (0.00s)
=== RUN   TestEmptyListToEmptyArray
--- PASS: TestEmptyListToEmptyArray (0.00s)
=== RUN   TestNonEmptyListToArray
--- PASS: TestNonEmptyListToArray (0.00s)
=== RUN   TestPopFromEmptyList
--- PASS: TestPopFromEmptyList (0.00s)
=== RUN   TestPopFromNonEmptyList
--- PASS: TestPopFromNonEmptyList (0.00s)
=== RUN   TestPushToEmptyList
--- PASS: TestPushToEmptyList (0.00s)
=== RUN   TestPushToNonEmptyList
--- PASS: TestPushToNonEmptyList (0.00s)
=== RUN   TestPushAndPop
--- PASS: TestPushAndPop (0.00s)
=== RUN   TestReverseEmptyList
--- PASS: TestReverseEmptyList (0.00s)
=== RUN   TestReverseNonEmptyList
--- PASS: TestReverseNonEmptyList (0.00s)
=== RUN   ExampleList_new
--- PASS: ExampleList_new (0.00s)
=== RUN   ExampleList_size
--- PASS: ExampleList_size (0.00s)
=== RUN   ExampleList_next
--- PASS: ExampleList_next (0.00s)
=== RUN   ExampleList_push
--- PASS: ExampleList_push (0.00s)
=== RUN   ExampleList_pop
--- PASS: ExampleList_pop (0.00s)
=== RUN   ExampleList_array
--- PASS: ExampleList_array (0.00s)
=== RUN   ExampleList_reverse
--- PASS: ExampleList_reverse (0.00s)
PASS
coverage: 100.0% of statements
ok  	linkedlist	0.003s	coverage: 100.0% of statements

real	0m0.201s
user	0m0.281s
sys	0m0.186s


 ==============================================================================

Running: go tool cover -func=coverage.out

linkedlist/simple_linked_list.go:21:	New		100.0%
linkedlist/simple_linked_list.go:41:	Size		100.0%
linkedlist/simple_linked_list.go:46:	Next		100.0%
linkedlist/simple_linked_list.go:58:	Push		100.0%
linkedlist/simple_linked_list.go:79:	Reset		100.0%
linkedlist/simple_linked_list.go:87:	Pop		100.0%
linkedlist/simple_linked_list.go:118:	Array		100.0%
linkedlist/simple_linked_list.go:139:	Reverse		100.0%
total:					(statements)	100.0%

real	0m0.042s
user	0m0.038s
sys	0m0.047s


 ==============================================================================

Running: go tool cover -html coverage.out -o coverage.html


real	0m0.045s
user	0m0.034s
sys	0m0.053s


 ==============================================================================

Running: cover_annotate

Running: gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

real	0m0.014s
user	0m0.008s
sys	0m0.013s

real	0m0.014s
user	0m0.008s
sys	0m0.013s


 ==============================================================================

Running: gotest -v -race -covermode=atomic ./...

=== RUN   TestEmptyListHasSizeZero
--- PASS: TestEmptyListHasSizeZero (0.00s)
=== RUN   TestSingletonListHasSizeOne
--- PASS: TestSingletonListHasSizeOne (0.00s)
=== RUN   TestNonEmptyListHasCorrectSize
--- PASS: TestNonEmptyListHasCorrectSize (0.00s)
=== RUN   TestListHasCorrectSizeAfterPop
--- PASS: TestListHasCorrectSizeAfterPop (0.00s)
=== RUN   TestListHasCorrectSizeAfterPush
--- PASS: TestListHasCorrectSizeAfterPush (0.00s)
=== RUN   TestEmptyListToEmptyArray
--- PASS: TestEmptyListToEmptyArray (0.00s)
=== RUN   TestNonEmptyListToArray
--- PASS: TestNonEmptyListToArray (0.00s)
=== RUN   TestPopFromEmptyList
--- PASS: TestPopFromEmptyList (0.00s)
=== RUN   TestPopFromNonEmptyList
--- PASS: TestPopFromNonEmptyList (0.00s)
=== RUN   TestPushToEmptyList
--- PASS: TestPushToEmptyList (0.00s)
=== RUN   TestPushToNonEmptyList
--- PASS: TestPushToNonEmptyList (0.00s)
=== RUN   TestPushAndPop
--- PASS: TestPushAndPop (0.00s)
=== RUN   TestReverseEmptyList
--- PASS: TestReverseEmptyList (0.00s)
=== RUN   TestReverseNonEmptyList
--- PASS: TestReverseNonEmptyList (0.00s)
=== RUN   ExampleList_new
--- PASS: ExampleList_new (0.00s)
=== RUN   ExampleList_size
--- PASS: ExampleList_size (0.00s)
=== RUN   ExampleList_next
--- PASS: ExampleList_next (0.00s)
=== RUN   ExampleList_push
--- PASS: ExampleList_push (0.00s)
=== RUN   ExampleList_pop
--- PASS: ExampleList_pop (0.00s)
=== RUN   ExampleList_array
--- PASS: ExampleList_array (0.00s)
=== RUN   ExampleList_reverse
--- PASS: ExampleList_reverse (0.00s)
PASS
coverage: 100.0% of statements
ok  	linkedlist	1.014s	coverage: 100.0% of statements

real	0m1.286s
user	0m0.328s
sys	0m0.182s


 ==============================================================================

Exit code: 0

real	0m1.623s
user	0m0.712s
sys	0m0.512s

real	0m1.625s
user	0m0.713s
sys	0m0.514s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: linkedlist
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkNewList
BenchmarkNewList-8       	 2568748	       475.7 ns/op	     192 B/op	      11 allocs/op
BenchmarkListSize
BenchmarkListSize-8      	1000000000	         0.2539 ns/op	       0 B/op	       0 allocs/op
BenchmarkListPush
BenchmarkListPush-8      	   28504	     38174 ns/op	   16000 B/op	    1000 allocs/op
BenchmarkListPop
BenchmarkListPop-8       	    1024	   1203566 ns/op	       0 B/op	       0 allocs/op
BenchmarkListToArray
BenchmarkListToArray-8   	860650098	         1.389 ns/op	       0 B/op	       0 allocs/op
BenchmarkListReverse
BenchmarkListReverse-8   	35884407	        34.56 ns/op	      32 B/op	       1 allocs/op
PASS
ok  	linkedlist	8.381s

real	0m8.607s
user	0m8.651s
sys	0m0.697s

===============================================================================

gotest -v -tags bonus
=== RUN   TestEmptyListHasSizeZero
--- PASS: TestEmptyListHasSizeZero (0.00s)
=== RUN   TestSingletonListHasSizeOne
--- PASS: TestSingletonListHasSizeOne (0.00s)
=== RUN   TestNonEmptyListHasCorrectSize
--- PASS: TestNonEmptyListHasCorrectSize (0.00s)
=== RUN   TestListHasCorrectSizeAfterPop
--- PASS: TestListHasCorrectSizeAfterPop (0.00s)
=== RUN   TestListHasCorrectSizeAfterPush
--- PASS: TestListHasCorrectSizeAfterPush (0.00s)
=== RUN   TestEmptyListToEmptyArray
--- PASS: TestEmptyListToEmptyArray (0.00s)
=== RUN   TestNonEmptyListToArray
--- PASS: TestNonEmptyListToArray (0.00s)
=== RUN   TestPopFromEmptyList
--- PASS: TestPopFromEmptyList (0.00s)
=== RUN   TestPopFromNonEmptyList
--- PASS: TestPopFromNonEmptyList (0.00s)
=== RUN   TestPushToEmptyList
--- PASS: TestPushToEmptyList (0.00s)
=== RUN   TestPushToNonEmptyList
--- PASS: TestPushToNonEmptyList (0.00s)
=== RUN   TestPushAndPop
--- PASS: TestPushAndPop (0.00s)
=== RUN   TestReverseEmptyList
--- PASS: TestReverseEmptyList (0.00s)
=== RUN   TestReverseNonEmptyList
--- PASS: TestReverseNonEmptyList (0.00s)
=== RUN   ExampleList_new
--- PASS: ExampleList_new (0.00s)
=== RUN   ExampleList_size
--- PASS: ExampleList_size (0.00s)
=== RUN   ExampleList_next
--- PASS: ExampleList_next (0.00s)
=== RUN   ExampleList_push
--- PASS: ExampleList_push (0.00s)
=== RUN   ExampleList_pop
--- PASS: ExampleList_pop (0.00s)
=== RUN   ExampleList_array
--- PASS: ExampleList_array (0.00s)
=== RUN   ExampleList_reverse
--- PASS: ExampleList_reverse (0.00s)
PASS
ok  	linkedlist	0.003s

real	0m0.135s
user	0m0.198s
sys	0m0.125s

===============================================================================

benchstat benchstat-old.txt benchstat-new.txt
benchstat-old.txt:5: missing iteration count
benchstat-old.txt:7: missing iteration count
benchstat-old.txt:9: missing iteration count
benchstat-old.txt:11: missing iteration count
benchstat-old.txt:13: missing iteration count
benchstat-old.txt:15: missing iteration count
benchstat-new.txt:5: missing iteration count
benchstat-new.txt:7: missing iteration count
benchstat-new.txt:9: missing iteration count
benchstat-new.txt:11: missing iteration count
benchstat-new.txt:13: missing iteration count
benchstat-new.txt:15: missing iteration count
goos: linux
goarch: amd64
pkg: linkedlist
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
              │ benchstat-new.txt │
              │      sec/op       │
NewList-8            475.7n ± ∞ ¹
ListSize-8          0.2539n ± ∞ ¹
ListPush-8           38.17µ ± ∞ ¹
ListPop-8            1.204m ± ∞ ¹
ListToArray-8        1.389n ± ∞ ¹
ListReverse-8        34.56n ± ∞ ¹
geomean              253.7n
¹ need >= 6 samples for confidence interval at level 0.95

              │ benchstat-new.txt │
              │       B/op        │
NewList-8             192.0 ± ∞ ¹
ListSize-8            0.000 ± ∞ ¹
ListPush-8          15.62Ki ± ∞ ¹
ListPop-8             0.000 ± ∞ ¹
ListToArray-8         0.000 ± ∞ ¹
ListReverse-8         32.00 ± ∞ ¹
geomean                         ²
¹ need >= 6 samples for confidence interval at level 0.95
² summaries must be >0 to compute geomean

              │ benchstat-new.txt │
              │     allocs/op     │
NewList-8             11.00 ± ∞ ¹
ListSize-8            0.000 ± ∞ ¹
ListPush-8           1.000k ± ∞ ¹
ListPop-8             0.000 ± ∞ ¹
ListToArray-8         0.000 ± ∞ ¹
ListReverse-8         1.000 ± ∞ ¹
geomean                         ²
¹ need >= 6 samples for confidence interval at level 0.95
² summaries must be >0 to compute geomean

cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
              │ benchstat-old.txt │
              │      sec/op       │
NewList-4            875.7n ± ∞ ¹
ListSize-4          0.4249n ± ∞ ¹
ListPush-4           109.9µ ± ∞ ¹
ListPop-4            2.000m ± ∞ ¹
ListToArray-4        4.008n ± ∞ ¹
ListReverse-4        108.0n ± ∞ ¹
geomean              573.0n
¹ need >= 6 samples for confidence interval at level 0.95

              │ benchstat-old.txt │
              │       B/op        │
NewList-4             192.0 ± ∞ ¹
ListSize-4            0.000 ± ∞ ¹
ListPush-4          15.62Ki ± ∞ ¹
ListPop-4             0.000 ± ∞ ¹
ListToArray-4         0.000 ± ∞ ¹
ListReverse-4         32.00 ± ∞ ¹
geomean                         ²
¹ need >= 6 samples for confidence interval at level 0.95
² summaries must be >0 to compute geomean

              │ benchstat-old.txt │
              │     allocs/op     │
NewList-4             11.00 ± ∞ ¹
ListSize-4            0.000 ± ∞ ¹
ListPush-4           1.000k ± ∞ ¹
ListPop-4             0.000 ± ∞ ¹
ListToArray-4         0.000 ± ∞ ¹
ListReverse-4         1.000 ± ∞ ¹
geomean                         ²
¹ need >= 6 samples for confidence interval at level 0.95
² summaries must be >0 to compute geomean

real	0m0.003s
user	0m0.001s
sys	0m0.002s

===============================================================================

gomarkdoc --output linkedlist-doc.md

real	0m0.013s
user	0m0.005s
sys	0m0.008s

===============================================================================

go doc -all linkedlist
package linkedlist // import "linkedlist"

Package linkedlist implements a singly linked list.

TYPES

type Element struct {
	// Has unexported fields.
}
    Element holds data and a pointer to the next Element.

type List struct {
	// Has unexported fields.
}
    List holds the 1st element of the list and the size of the list.

func New(slice []int) *List
    New returns a new list that is populated using the passed slice/array.

func (l *List) Array() []int
    Array returns the List as a slice.

func (l *List) Next() *Element
    Next returns a pointer to the next item in the List.

func (l *List) Pop() (int, error)
    Pop returns an interger and an error code from the last element of the List
    while also removing it.

func (l *List) Push(data int)
    Push add a new number to the end of the List.

func (l *List) Reset()
    Reset resets a List to it's zero value.

func (l *List) Reverse() *List
    Reverse returns a new List in reversed order.

func (l *List) Size() int
    Size returns the size of the list.


real	0m0.043s
user	0m0.016s
sys	0m0.042s


===============================================================================

