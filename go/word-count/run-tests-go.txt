Running automated test file(s):

Go packages: wordcount 


===============================================================================

golint wordcount

real	0m0.219s
user	0m0.211s
sys	0m0.172s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out wordcount
=== RUN   TestWordCount
=== RUN   TestWordCount/count_one_word
=== RUN   TestWordCount/count_one_of_each_word
=== RUN   TestWordCount/multiple_occurrences_of_a_word
=== RUN   TestWordCount/handles_cramped_lists
=== RUN   TestWordCount/handles_expanded_lists
=== RUN   TestWordCount/ignore_punctuation
=== RUN   TestWordCount/include_numbers
=== RUN   TestWordCount/normalize_case
=== RUN   TestWordCount/with_apostrophes
=== RUN   TestWordCount/with_quotations
=== RUN   TestWordCount/substrings_from_the_beginning
=== RUN   TestWordCount/multiple_spaces_not_detected_as_a_word
=== RUN   TestWordCount/alternating_word_separators_not_detected_as_a_word
--- PASS: TestWordCount (0.00s)
    --- PASS: TestWordCount/count_one_word (0.00s)
    --- PASS: TestWordCount/count_one_of_each_word (0.00s)
    --- PASS: TestWordCount/multiple_occurrences_of_a_word (0.00s)
    --- PASS: TestWordCount/handles_cramped_lists (0.00s)
    --- PASS: TestWordCount/handles_expanded_lists (0.00s)
    --- PASS: TestWordCount/ignore_punctuation (0.00s)
    --- PASS: TestWordCount/include_numbers (0.00s)
    --- PASS: TestWordCount/normalize_case (0.00s)
    --- PASS: TestWordCount/with_apostrophes (0.00s)
    --- PASS: TestWordCount/with_quotations (0.00s)
    --- PASS: TestWordCount/substrings_from_the_beginning (0.00s)
    --- PASS: TestWordCount/multiple_spaces_not_detected_as_a_word (0.00s)
    --- PASS: TestWordCount/alternating_word_separators_not_detected_as_a_word (0.00s)
=== RUN   ExampleWordCount
--- PASS: ExampleWordCount (0.00s)
PASS
coverage: 84.4% of statements
ok  	wordcount	0.008s	coverage: 84.4% of statements

real	0m0.622s
user	0m0.701s
sys	0m0.424s

===============================================================================

go tool cover -func=coverage.out
wordcount/word_count.go:13:	WordCount	84.4%
total:				(statements)	84.4%

real	0m0.196s
user	0m0.176s
sys	0m0.206s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.210s
user	0m0.172s
sys	0m0.205s

===============================================================================

go test -v -race -covermode=atomic wordcount
=== RUN   TestWordCount
=== RUN   TestWordCount/count_one_word
=== RUN   TestWordCount/count_one_of_each_word
=== RUN   TestWordCount/multiple_occurrences_of_a_word
=== RUN   TestWordCount/handles_cramped_lists
=== RUN   TestWordCount/handles_expanded_lists
=== RUN   TestWordCount/ignore_punctuation
=== RUN   TestWordCount/include_numbers
=== RUN   TestWordCount/normalize_case
=== RUN   TestWordCount/with_apostrophes
=== RUN   TestWordCount/with_quotations
=== RUN   TestWordCount/substrings_from_the_beginning
=== RUN   TestWordCount/multiple_spaces_not_detected_as_a_word
=== RUN   TestWordCount/alternating_word_separators_not_detected_as_a_word
--- PASS: TestWordCount (0.03s)
    --- PASS: TestWordCount/count_one_word (0.00s)
    --- PASS: TestWordCount/count_one_of_each_word (0.00s)
    --- PASS: TestWordCount/multiple_occurrences_of_a_word (0.00s)
    --- PASS: TestWordCount/handles_cramped_lists (0.00s)
    --- PASS: TestWordCount/handles_expanded_lists (0.00s)
    --- PASS: TestWordCount/ignore_punctuation (0.00s)
    --- PASS: TestWordCount/include_numbers (0.00s)
    --- PASS: TestWordCount/normalize_case (0.00s)
    --- PASS: TestWordCount/with_apostrophes (0.00s)
    --- PASS: TestWordCount/with_quotations (0.00s)
    --- PASS: TestWordCount/substrings_from_the_beginning (0.00s)
    --- PASS: TestWordCount/multiple_spaces_not_detected_as_a_word (0.00s)
    --- PASS: TestWordCount/alternating_word_separators_not_detected_as_a_word (0.00s)
=== RUN   ExampleWordCount
--- PASS: ExampleWordCount (0.00s)
PASS
coverage: 84.4% of statements
ok  	wordcount	0.063s	coverage: 84.4% of statements

real	0m0.755s
user	0m0.779s
sys	0m0.456s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: wordcount
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkWordCount-4   	    3898	    310332 ns/op	   86139 B/op	    1150 allocs/op
PASS
ok  	wordcount	1.265s

real	0m1.686s
user	0m2.156s
sys	0m0.407s

===============================================================================

go test -tags bonus
PASS
ok  	wordcount	0.009s

real	0m0.480s
user	0m0.622s
sys	0m0.343s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.786s
user	0m0.703s
sys	0m0.340s

benchstat benchstat-old.txt benchstat-new.txt
name         old time/op    new time/op    delta
WordCount-4     491µs ± 0%     310µs ± 0%   ~     (p=1.000 n=1+1)

name         old alloc/op   new alloc/op   delta
WordCount-4    78.8kB ± 0%    86.1kB ± 0%   ~     (p=1.000 n=1+1)

name         old allocs/op  new allocs/op  delta
WordCount-4     1.05k ± 0%     1.15k ± 0%   ~     (p=1.000 n=1+1)

real	0m0.023s
user	0m0.008s
sys	0m0.015s

===============================================================================

go vet wordcount

real	0m0.301s
user	0m0.376s
sys	0m0.281s

===============================================================================

go fix wordcount

real	0m0.151s
user	0m0.129s
sys	0m0.160s

===============================================================================

gosec ./word-count
[gosec] 2022/07/24 00:40:44 Including rules: default
[gosec] 2022/07/24 00:40:44 Excluding rules: default
[gosec] 2022/07/24 00:40:44 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/word-count
2022/07/24 00:40:45 internal error: package "regexp" without types was imported from "command-line-arguments"

real	0m0.480s
user	0m0.517s
sys	0m0.397s

===============================================================================

gomarkdoc --output wordcount-doc.md

real	0m0.029s
user	0m0.022s
sys	0m0.016s

===============================================================================

go doc -all wordcount
package wordcount // import "wordcount"

Package wordcount is used to count word frequencies.

TYPES

type Frequency map[string]int
    Frequency is a map used to count word frequencies.

func WordCount(phrase string) Frequency
    WordCount returns a frequency map for the words counts in the string.


real	0m0.201s
user	0m0.142s
sys	0m0.200s


===============================================================================

