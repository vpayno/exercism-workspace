Running automated test file(s):

Go packages: dna 


===============================================================================

golint dna

real	0m0.219s
user	0m0.247s
sys	0m0.181s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out dna
=== RUN   TestCounts
    nucleotide_count_test.go:25: PASS: empty strand
    nucleotide_count_test.go:25: PASS: can count one nucleotide in single-character input
    nucleotide_count_test.go:25: PASS: strand with repeated nucleotide
    nucleotide_count_test.go:25: PASS: strand with multiple nucleotides
    nucleotide_count_test.go:25: PASS: strand with invalid nucleotides
--- PASS: TestCounts (0.00s)
=== RUN   ExampleDNA_Valid
--- PASS: ExampleDNA_Valid (0.00s)
=== RUN   ExampleDNA_Invalid
--- PASS: ExampleDNA_Invalid (0.00s)
PASS
coverage: 87.5% of statements
ok  	dna	0.009s	coverage: 87.5% of statements

real	0m0.546s
user	0m0.654s
sys	0m0.497s

===============================================================================

go tool cover -func=coverage.out
dna/nucleotide_count.go:20:	IsValid		100.0%
dna/nucleotide_count.go:32:	String		100.0%
dna/nucleotide_count.go:43:	Counts		81.8%
total:				(statements)	87.5%

real	0m0.245s
user	0m0.266s
sys	0m0.229s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.249s
user	0m0.221s
sys	0m0.235s

===============================================================================

go test -v -race -covermode=atomic dna
=== RUN   TestCounts
    nucleotide_count_test.go:25: PASS: empty strand
    nucleotide_count_test.go:25: PASS: can count one nucleotide in single-character input
    nucleotide_count_test.go:25: PASS: strand with repeated nucleotide
    nucleotide_count_test.go:25: PASS: strand with multiple nucleotides
    nucleotide_count_test.go:25: PASS: strand with invalid nucleotides
--- PASS: TestCounts (0.00s)
=== RUN   ExampleDNA_Valid
--- PASS: ExampleDNA_Valid (0.00s)
=== RUN   ExampleDNA_Invalid
--- PASS: ExampleDNA_Invalid (0.00s)
PASS
coverage: 87.5% of statements
ok  	dna	0.038s	coverage: 87.5% of statements

real	0m0.697s
user	0m0.753s
sys	0m0.457s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
PASS
ok  	dna	0.018s

real	0m0.500s
user	0m0.546s
sys	0m0.343s

===============================================================================

go test -tags bonus
PASS
ok  	dna	0.006s

real	0m0.530s
user	0m0.655s
sys	0m0.461s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m4.306s
user	0m0.743s
sys	0m0.453s

benchstat benchstat-old.txt benchstat-new.txt

real	0m0.022s
user	0m0.010s
sys	0m0.021s

===============================================================================

go vet dna
# dna
./nucleotide_count_examples_test.go:7:1: ExampleDNA_Valid refers to unknown field or method: DNA.Valid
./nucleotide_count_examples_test.go:19:1: ExampleDNA_Invalid refers to unknown field or method: DNA.Invalid

real	0m0.289s
user	0m0.341s
sys	0m0.325s

===============================================================================

go fix dna

real	0m0.129s
user	0m0.141s
sys	0m0.195s

===============================================================================

gosec ./nucleotide-count
[gosec] 2022/06/27 19:46:21 Including rules: default
[gosec] 2022/06/27 19:46:21 Excluding rules: default
[gosec] 2022/06/27 19:46:21 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/nucleotide-count
2022/06/27 19:46:21 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.449s
user	0m0.483s
sys	0m0.335s

===============================================================================

gomarkdoc --output dna-doc.md

real	0m0.028s
user	0m0.017s
sys	0m0.012s

===============================================================================

go doc -all dna
package dna // import "dna"

Package dna is a package used to inspect DNA sequences.

TYPES

type DNA string
    DNA is a list of nucleotides.

func (d DNA) Counts() (Histogram, error)
    Counts generates a histogram of valid nucleotides in the given DNA. Returns
    an error if d contains an invalid nucleotide. / Counts is a method on the
    DNA type. A method is a function with a special receiver argument. The
    receiver appears in its own argument list between the func keyword and the
    method name. Here, the Counts method has a receiver of type DNA named d.

func (d DNA) IsValid() (bool, error)
    IsValid returns true if the DNA strand is valid.

func (d DNA) String() string
    String returns a pretty formated representation of a DNA type.

type Histogram map[rune]int
    Histogram is a mapping from nucleotide to its count in given DNA. Choose a
    suitable data type.


real	0m0.201s
user	0m0.204s
sys	0m0.244s


===============================================================================

