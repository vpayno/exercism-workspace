Running automated test file(s):

Go packages: triangle 


===============================================================================

golint triangle

real	0m0.106s
user	0m0.062s
sys	0m0.087s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out triangle
=== RUN   TestKindsNotEqual
--- PASS: TestKindsNotEqual (0.00s)
=== RUN   TestKind
--- PASS: TestKind (0.00s)
=== RUN   ExampleKindFromSides
--- PASS: ExampleKindFromSides (0.00s)
PASS
coverage: 96.0% of statements
ok  	triangle	0.010s	coverage: 96.0% of statements

real	0m0.668s
user	0m0.747s
sys	0m0.467s

===============================================================================

go tool cover -func=coverage.out
triangle/triangle.go:16:	isTriangle	100.0%
triangle/triangle.go:29:	isEquilateral	100.0%
triangle/triangle.go:42:	isIsosceles	100.0%
triangle/triangle.go:55:	isScalene	80.0%
triangle/triangle.go:68:	KindFromSides	100.0%
total:				(statements)	96.0%

real	0m0.125s
user	0m0.065s
sys	0m0.109s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.067s
user	0m0.032s
sys	0m0.067s

===============================================================================

go test -v -race -covermode=atomic triangle
=== RUN   TestKindsNotEqual
--- PASS: TestKindsNotEqual (0.00s)
=== RUN   TestKind
--- PASS: TestKind (0.00s)
=== RUN   ExampleKindFromSides
--- PASS: ExampleKindFromSides (0.00s)
PASS
coverage: 96.0% of statements
ok  	triangle	0.046s	coverage: 96.0% of statements

real	0m0.688s
user	0m0.759s
sys	0m0.489s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: triangle
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkKind-4   	 6604374	       169.2 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	triangle	1.374s

real	0m1.898s
user	0m2.055s
sys	0m0.436s

===============================================================================

go test -tags bonus
PASS
ok  	triangle	0.014s

real	0m0.512s
user	0m0.583s
sys	0m0.389s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.787s
user	0m0.798s
sys	0m0.377s

benchstat benchstat-old.txt benchstat-new.txt
name    old time/op    new time/op    delta
Kind-4     155ns ± 0%     169ns ± 0%   ~     (p=1.000 n=1+1)

name    old alloc/op   new alloc/op   delta
Kind-4     0.00B          0.00B        ~     (all equal)

name    old allocs/op  new allocs/op  delta
Kind-4      0.00           0.00        ~     (all equal)

real	0m0.026s
user	0m0.011s
sys	0m0.018s

===============================================================================

go vet triangle

real	0m0.286s
user	0m0.384s
sys	0m0.284s

===============================================================================

go fix triangle

real	0m0.054s
user	0m0.027s
sys	0m0.049s

===============================================================================

gosec ./triangle
[gosec] 2022/06/27 19:57:19 Including rules: default
[gosec] 2022/06/27 19:57:19 Excluding rules: default
[gosec] 2022/06/27 19:57:19 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/triangle
[gosec] 2022/06/27 19:57:19 Checking package: triangle
[gosec] 2022/06/27 19:57:19 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/triangle/triangle.go
Results:


Summary:
   Files: 1
   Lines: 79
   Nosec: 0
  Issues: 0


real	0m0.243s
user	0m0.253s
sys	0m0.147s

===============================================================================

gomarkdoc --output triangle-doc.md

real	0m0.027s
user	0m0.014s
sys	0m0.016s

===============================================================================

go doc -all triangle
package triangle // import "triangle"

Package triangle determines if a triangle is equilateral, isosceles, or
scalene.

CONSTANTS

const (
	NaT = 0 // not a triangle
	Equ = 1 // equilateral
	Iso = 2 // isosceles
	Sca = 3 // scalene
)
    Triangle types.


TYPES

type Kind int
    Kind is an int used to describe a triangle.

func KindFromSides(a, b, c float64) Kind
    KindFromSides returns the kind of triangle being tested.


real	0m0.120s
user	0m0.060s
sys	0m0.114s


===============================================================================

