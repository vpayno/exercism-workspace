Running automated test file(s):

Go packages: proverb 


===============================================================================

golint proverb

real	0m0.181s
user	0m0.101s
sys	0m0.149s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out proverb
=== RUN   TestProverb
=== RUN   TestProverb/zero_pieces
=== RUN   TestProverb/one_piece
=== RUN   TestProverb/two_pieces
=== RUN   TestProverb/three_pieces
=== RUN   TestProverb/full_proverb
=== RUN   TestProverb/four_pieces_modernized
--- PASS: TestProverb (0.00s)
    --- PASS: TestProverb/zero_pieces (0.00s)
    --- PASS: TestProverb/one_piece (0.00s)
    --- PASS: TestProverb/two_pieces (0.00s)
    --- PASS: TestProverb/three_pieces (0.00s)
    --- PASS: TestProverb/full_proverb (0.00s)
    --- PASS: TestProverb/four_pieces_modernized (0.00s)
=== RUN   ExampleProverb
--- PASS: ExampleProverb (0.00s)
PASS
coverage: 100.0% of statements
ok  	proverb	0.007s	coverage: 100.0% of statements

real	0m0.646s
user	0m0.572s
sys	0m0.507s

===============================================================================

go tool cover -func=coverage.out
proverb/proverb.go:7:	Proverb		100.0%
total:			(statements)	100.0%

real	0m0.166s
user	0m0.157s
sys	0m0.166s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.153s
user	0m0.134s
sys	0m0.186s

===============================================================================

go test -v -race -covermode=atomic proverb
=== RUN   TestProverb
=== RUN   TestProverb/zero_pieces
=== RUN   TestProverb/one_piece
=== RUN   TestProverb/two_pieces
=== RUN   TestProverb/three_pieces
=== RUN   TestProverb/full_proverb
=== RUN   TestProverb/four_pieces_modernized
--- PASS: TestProverb (0.00s)
    --- PASS: TestProverb/zero_pieces (0.00s)
    --- PASS: TestProverb/one_piece (0.00s)
    --- PASS: TestProverb/two_pieces (0.00s)
    --- PASS: TestProverb/three_pieces (0.00s)
    --- PASS: TestProverb/full_proverb (0.00s)
    --- PASS: TestProverb/four_pieces_modernized (0.00s)
=== RUN   ExampleProverb
--- PASS: ExampleProverb (0.00s)
PASS
coverage: 100.0% of statements
ok  	proverb	0.034s	coverage: 100.0% of statements

real	0m0.989s
user	0m0.844s
sys	0m0.589s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: proverb
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkProverb-4   	  170331	      8278 ns/op	    1728 B/op	      59 allocs/op
PASS
ok  	proverb	1.519s

real	0m2.097s
user	0m2.724s
sys	0m0.620s

===============================================================================

go test -tags bonus
PASS
ok  	proverb	0.004s

real	0m0.563s
user	0m0.593s
sys	0m0.427s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m4.425s
user	0m2.051s
sys	0m0.840s

benchstat benchstat-old.txt benchstat-new.txt
name       old time/op    new time/op    delta
Proverb-4    9.26µs ± 0%    8.28µs ± 0%   ~     (p=1.000 n=1+1)

name       old alloc/op   new alloc/op   delta
Proverb-4    1.73kB ± 0%    1.73kB ± 0%   ~     (all equal)

name       old allocs/op  new allocs/op  delta
Proverb-4      59.0 ± 0%      59.0 ± 0%   ~     (all equal)

real	0m0.037s
user	0m0.028s
sys	0m0.026s

===============================================================================

go vet proverb

real	0m0.414s
user	0m0.347s
sys	0m0.408s

===============================================================================

go fix proverb

real	0m0.134s
user	0m0.057s
sys	0m0.119s

===============================================================================

ineffassign ./...

real	0m0.369s
user	0m0.341s
sys	0m0.411s

===============================================================================

gocyclo .
4 proverb BenchmarkProverb proverb_test.go:19:1
3 proverb TestProverb proverb_test.go:8:1
3 proverb Proverb proverb.go:7:1
2 proverb ExampleProverb proverb_examples_test.go:7:1

real	0m0.024s
user	0m0.002s
sys	0m0.009s

===============================================================================

misspell .

real	0m0.151s
user	0m0.120s
sys	0m0.070s

===============================================================================

gosec ./proverb
[gosec] 2022/08/16 21:50:23 Including rules: default
[gosec] 2022/08/16 21:50:23 Excluding rules: default
[gosec] 2022/08/16 21:50:23 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/proverb
2022/08/16 21:50:23 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.481s
user	0m0.468s
sys	0m0.385s

===============================================================================

gomarkdoc --output proverb-doc.md

real	0m0.052s
user	0m0.024s
sys	0m0.023s

===============================================================================

go doc -all proverb
package proverb // import "proverb"

Package proverb generates proverbial rhymes.

FUNCTIONS

func Proverb(words []string) []string
    Proverb returns a proverbial rhyme given a slice of words.


real	0m0.158s
user	0m0.110s
sys	0m0.150s


===============================================================================

