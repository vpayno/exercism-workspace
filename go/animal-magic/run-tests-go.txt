Running automated test file(s):

Go packages: chance 


===============================================================================

golint ./...

real	0m0.122s
user	0m0.045s
sys	0m0.070s

===============================================================================

revive ./...
animal_magic.go:1:1: should have a package comment

real	0m0.053s
user	0m0.017s
sys	0m0.030s

===============================================================================

ineffassign ./...

real	0m0.429s
user	0m0.490s
sys	0m0.388s

===============================================================================

go-consistent -v ./...
	info: check "./."

real	0m0.639s
user	0m0.743s
sys	0m0.635s

===============================================================================

staticcheck ./...

real	0m0.519s
user	0m0.511s
sys	0m0.446s

===============================================================================

gocritic check -enableAll ./...

real	0m2.901s
user	0m4.532s
sys	0m1.241s

===============================================================================

gotest -v -covermode=count -coverprofile coverage.out ./...
=== RUN   TestSeedWithTime
--- PASS: TestSeedWithTime (0.00s)
=== RUN   TestRollADie
--- PASS: TestRollADie (0.00s)
=== RUN   TestWandEnergy
--- PASS: TestWandEnergy (0.00s)
=== RUN   TestShuffleAnimals
--- PASS: TestShuffleAnimals (0.00s)
=== RUN   ExampleRollADie
--- PASS: ExampleRollADie (0.00s)
=== RUN   ExampleGenerateWandEnergy
--- PASS: ExampleGenerateWandEnergy (0.00s)
=== RUN   ExampleShuffleAnimals
--- PASS: ExampleShuffleAnimals (0.00s)
PASS
coverage: 100.0% of statements
ok  	chance	0.008s	coverage: 100.0% of statements

real	0m1.166s
user	0m1.284s
sys	0m0.855s

===============================================================================

go tool cover -func=coverage.out
chance/animal_magic.go:9:	SeedWithTime		100.0%
chance/animal_magic.go:14:	RollADie		100.0%
chance/animal_magic.go:19:	GenerateWandEnergy	100.0%
chance/animal_magic.go:24:	ShuffleAnimals		100.0%
total:				(statements)		100.0%

real	0m0.274s
user	0m0.227s
sys	0m0.288s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.488s
user	0m0.362s
sys	0m0.452s

===============================================================================

gocov convert coverage.out | gocov annotate -ceiling=100 -color - | tee coverage-annotations.txt

real	0m0.225s
user	0m0.142s
sys	0m0.218s

===============================================================================

gotest -v -race -covermode=atomic ./...
=== RUN   TestSeedWithTime
--- PASS: TestSeedWithTime (0.00s)
=== RUN   TestRollADie
--- PASS: TestRollADie (0.00s)
=== RUN   TestWandEnergy
--- PASS: TestWandEnergy (0.00s)
=== RUN   TestShuffleAnimals
--- PASS: TestShuffleAnimals (0.00s)
=== RUN   ExampleRollADie
--- PASS: ExampleRollADie (0.00s)
=== RUN   ExampleGenerateWandEnergy
--- PASS: ExampleGenerateWandEnergy (0.00s)
=== RUN   ExampleShuffleAnimals
--- PASS: ExampleShuffleAnimals (0.00s)
PASS
coverage: 100.0% of statements
ok  	chance	0.047s	coverage: 100.0% of statements

real	0m2.929s
user	0m2.252s
sys	0m1.557s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
PASS
ok  	chance	0.012s

real	0m1.467s
user	0m1.683s
sys	0m1.181s

===============================================================================

go test -tags bonus
PASS
ok  	chance	0.034s

real	0m1.178s
user	0m1.319s
sys	0m0.833s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet ./...

real	0m1.307s
user	0m0.888s
sys	0m1.032s

===============================================================================

go fix ./...

real	0m0.426s
user	0m0.110s
sys	0m0.222s

===============================================================================

gocyclo .
7 chance TestShuffleAnimals animal_magic_test.go:65:1
7 chance TestWandEnergy animal_magic_test.go:45:1
7 chance TestRollADie animal_magic_test.go:25:1
5 chance slicesEqual animal_magic_test.go:89:1
4 chance TestSeedWithTime animal_magic_test.go:10:1
1 chance ExampleShuffleAnimals animal_magic_examples_test.go:25:1
1 chance ExampleGenerateWandEnergy animal_magic_examples_test.go:16:1
1 chance ExampleRollADie animal_magic_examples_test.go:7:1
1 chance ShuffleAnimals animal_magic.go:24:1
1 chance GenerateWandEnergy animal_magic.go:19:1
1 chance RollADie animal_magic.go:14:1
1 chance SeedWithTime animal_magic.go:9:1

real	0m0.061s
user	0m0.010s
sys	0m0.023s

===============================================================================

misspell .

real	0m0.527s
user	0m0.312s
sys	0m0.169s

===============================================================================

gosec ./...
[gosec] 2022/08/24 21:03:57 Including rules: default
[gosec] 2022/08/24 21:03:57 Excluding rules: default
[gosec] 2022/08/24 21:03:57 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/animal-magic
2022/08/24 21:03:58 internal error: package "math/rand" without types was imported from "command-line-arguments"

real	0m1.234s
user	0m0.941s
sys	0m0.765s

===============================================================================

gomarkdoc --output chance-doc.md

real	0m0.143s
user	0m0.065s
sys	0m0.066s

===============================================================================

go doc -all chance
package chance // import "chance"


FUNCTIONS

func GenerateWandEnergy() float64
    GenerateWandEnergy returns a random float64 f with 0.0 <= f < 12.0

func RollADie() int
    RollADie returns a random int d with 1 <= d <= 20

func SeedWithTime()
    SeedWithTime seeds math/rand with the current computer time

func ShuffleAnimals() []string
    ShuffleAnimals returns a slice with all eight animal strings in random order


real	0m0.490s
user	0m0.280s
sys	0m0.495s


===============================================================================

