Running automated test file(s):

Go packages: resistorcolortrio 


===============================================================================

Running: ../../.github/citools/go/go-lint-golangci-lint

Running GoLangCi-Lint

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.026s
user	0m0.023s
sys	0m0.026s


 ==============================================================================

Running: golangci-lint run --enable-all ./...

level=warning msg="[runner] The linter 'exhaustivestruct' is deprecated (since v1.46.0) due to: The owner seems to have abandoned the linter. Replaced by exhaustruct."
level=warning msg="[runner] The linter 'scopelint' is deprecated (since v1.39.0) due to: The repository of the linter has been deprecated by the owner. Replaced by exportloopref."
level=warning msg="[runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'golint' is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner. Replaced by revive."
level=warning msg="[runner] The linter 'maligned' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'."
level=warning msg="[runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'ifshort' is deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner. "
level=warning msg="[runner] The linter 'nosnakecase' is deprecated (since v1.48.1) due to: The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming)."
level=warning msg="[runner] The linter 'interfacer' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. "
level=warning msg="[linters_context] rowserrcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
level=warning msg="[linters_context] structcheck is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
level=warning msg="[linters_context] wastedassign is disabled because of generics. You can track the evolution of the generics support by following the https://github.com/golangci/golangci-lint/issues/2649."
resistor_color_trio.go:211:10: string `-1 ohms` has 3 occurrences, make it a constant (goconst)
		return "-1 ohms"
		       ^
resistor_color_trio.go:81:26: Comment should end in a period (godot)
// Enum of MetricPrefixes
                         ^
resistor_color_trio_test.go:8:20: Using the variable on range scope `tc` in function literal (scopelint)
			actual := Label(tc.input)
			                ^
resistor_color_trio_test.go:10:17: Using the variable on range scope `tc` in function literal (scopelint)
			if actual != tc.expected {
			             ^
resistor_color_trio_test.go:11:52: Using the variable on range scope `tc` in function literal (scopelint)
				t.Fatalf("Label(%+q): expected %q, actual %q", tc.input, tc.expected, actual)
				                                               ^
resistor_color_trio.go:38:5: ColorNames is a global variable (gochecknoglobals)
var ColorNames = map[Color]string{
    ^
resistor_color_trio.go:98:5: MetricPrefixNames is a global variable (gochecknoglobals)
var MetricPrefixNames = map[MetricPrefix]string{
    ^
cases_test.go:14:5: labelTestCases is a global variable (gochecknoglobals)
var labelTestCases = []labelTestCase{
    ^
resistor_color_trio_test.go:18:5: labelBench is a global variable (gochecknoglobals)
var labelBench string
    ^
resistor_color_trio.go:124:30: mnd: Magic number: 10, in <argument> detected (gomnd)
	return int(math.Pow(float64(10), float64(m.Int())))
	                            ^
resistor_color_trio.go:223:32: mnd: Magic number: 10, in <argument> detected (gomnd)
	value *= int(math.Pow(float64(10), float64(ColorCode(colors[2]))))
	                              ^
resistor_color_trio.go:170:19: mnd: Magic number: 2, in <condition> detected (gomnd)
	if len(colors) < 2 {
	                 ^
resistor_color_trio.go:210:19: mnd: Magic number: 3, in <condition> detected (gomnd)
	if len(colors) < 3 {
	                 ^
resistor_color_trio.go:177:34: mnd: Magic number: 10, in <operation> detected (gomnd)
	value += ColorCode(colors[0]) * 10
	                                ^
resistor_color_trio.go:217:34: mnd: Magic number: 10, in <operation> detected (gomnd)
	value += ColorCode(colors[0]) * 10
	                                ^
resistor_color_trio_example_test.go:20:6: ExampleColor_String contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleColor_String() {
     ^
resistor_color_trio_example_test.go:45:6: ExampleColor_Int contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleColor_Int() {
     ^
resistor_color_trio_example_test.go:70:6: ExampleMetricPrefix_String contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleMetricPrefix_String() {
     ^
resistor_color_trio_example_test.go:89:6: ExampleMetricPrefix_Int contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleMetricPrefix_Int() {
     ^
resistor_color_trio_example_test.go:108:6: ExampleMetricPrefix_Magnitude contains underscore. You should use mixedCap or MixedCap. (nosnakecase)
func ExampleMetricPrefix_Magnitude() {
     ^
resistor_color_trio_test.go:5:1: Function TestLabel missing the call to method parallel (paralleltest)
func TestLabel(t *testing.T) {
^
resistor_color_trio_test.go:6:2: Range statement for test TestLabel missing the call to method parallel in test Run (paralleltest)
	for _, tc := range labelTestCases {
	^
resistor_color_trio_example_test.go:11:12: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck)
	result := strings.Title(text)
	          ^
cases_test.go:1:9: package should be `resistorcolortrio_test` instead of `resistorcolortrio` (testpackage)
package resistorcolortrio
        ^
resistor_color_trio_example_test.go:1:9: package should be `resistorcolortrio_test` instead of `resistorcolortrio` (testpackage)
package resistorcolortrio
        ^
resistor_color_trio_test.go:1:9: package should be `resistorcolortrio_test` instead of `resistorcolortrio` (testpackage)
package resistorcolortrio
        ^
resistor_color_trio.go:233:6: variable name 'sb' is too short for the scope of its usage (varnamelen)
	var sb strings.Builder
	    ^
resistor_color_trio.go:235:2: variable name 'e' is too short for the scope of its usage (varnamelen)
	_, e := sb.WriteString(fmt.Sprintf("%d", value))
	^

real	0m0.536s
user	0m0.840s
sys	0m0.534s


 ==============================================================================

Exit code: -1

real	0m0.577s
user	0m0.873s
sys	0m0.572s

real	0m0.580s
user	0m0.874s
sys	0m0.573s

===============================================================================

Running: ../../.github/citools/go/go-lint-revive

Running Go Lint Revive

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.030s
user	0m0.029s
sys	0m0.025s


 ==============================================================================

Running: revive -formatter=stylish ./...

resistor_color_trio.go
  (123, 1)  https://revive.run/r#exported  exported method MetricPrefix.Magnitude should have comment or be unexported  


 âœ– 1 problem (0 errors) (1 warnings)

real	0m0.055s
user	0m0.032s
sys	0m0.037s


 ==============================================================================

Exit code: 0

real	0m0.099s
user	0m0.069s
sys	0m0.071s

real	0m0.101s
user	0m0.071s
sys	0m0.071s

===============================================================================

Running: ../../.github/citools/go/go-lint-ineffassign
../run-tests: line 41: .github/citools/go/go-lint-ineffassign: No such file or directory

real	0m0.001s
user	0m0.000s
sys	0m0.001s

===============================================================================

Running: ../../.github/citools/go/go-lint-go-consistent

Running Go go-consistent

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.029s
user	0m0.021s
sys	0m0.034s


 ==============================================================================

Running: go-consistent -v ./...

	info: check "./."
internal error: package "fmt" without types was imported from "resistorcolortrio"

real	0m0.113s
user	0m0.142s
sys	0m0.154s


 ==============================================================================

Exit code: -1

real	0m0.159s
user	0m0.169s
sys	0m0.205s

real	0m0.161s
user	0m0.171s
sys	0m0.206s

===============================================================================

Running: ../../.github/citools/go/go-lint-staticcheck

Running Go StaticCheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.022s
user	0m0.022s
sys	0m0.020s


 ==============================================================================

Running: staticcheck -checks=all ./...

resistor_color_trio_example_test.go:11:12: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead.  (SA1019)

real	0m0.174s
user	0m0.241s
sys	0m0.116s


 ==============================================================================

Exit code: -1

real	0m0.207s
user	0m0.269s
sys	0m0.145s

real	0m0.209s
user	0m0.271s
sys	0m0.145s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocritic

Running Go gocritic

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.024s
user	0m0.015s
sys	0m0.032s


 ==============================================================================

Running: gocritic check -enableAll ./...


real	0m0.905s
user	0m2.213s
sys	0m0.322s


 ==============================================================================

Exit code: 0

real	0m0.941s
user	0m2.234s
sys	0m0.366s

real	0m0.944s
user	0m2.235s
sys	0m0.367s

===============================================================================

Running: ../../.github/citools/go/go-lint-go_vet

Running Go Vet

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.023s
user	0m0.011s
sys	0m0.025s


 ==============================================================================

Running: go vet ./...


real	0m0.078s
user	0m0.123s
sys	0m0.110s


 ==============================================================================

Exit code: 0

real	0m0.111s
user	0m0.144s
sys	0m0.140s

real	0m0.112s
user	0m0.144s
sys	0m0.141s

===============================================================================

Running: ../../.github/citools/go/go-fixer-go_fix

Running go fix

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.020s
user	0m0.016s
sys	0m0.023s


 ==============================================================================

Running: go fix ./...


real	0m0.027s
user	0m0.024s
sys	0m0.031s


 ==============================================================================

Exit code: 0

real	0m0.057s
user	0m0.046s
sys	0m0.062s

real	0m0.059s
user	0m0.047s
sys	0m0.062s

===============================================================================

Running: ../../.github/citools/go/go-lint-errcheck

Running Go errcheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.034s
user	0m0.031s
sys	0m0.032s


 ==============================================================================

Running: errcheck ./...


real	0m0.513s
user	0m1.515s
sys	0m0.335s


 ==============================================================================

Exit code: 0

real	0m0.565s
user	0m1.555s
sys	0m0.382s

real	0m0.567s
user	0m1.556s
sys	0m0.384s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocyclo

Running Go gocyclo

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.027s
user	0m0.017s
sys	0m0.030s


 ==============================================================================

Running: gocyclo .

6 resistorcolortrio Label resistor_color_trio.go:209:1
4 resistorcolortrio Unit resistor_color_trio.go:186:1
3 resistorcolortrio BenchmarkLabel resistor_color_trio_test.go:20:1
3 resistorcolortrio TestLabel resistor_color_trio_test.go:5:1
3 resistorcolortrio ColorCode resistor_color_trio.go:152:1
3 resistorcolortrio (MetricPrefix).Int resistor_color_trio.go:115:1
3 resistorcolortrio (MetricPrefix).String resistor_color_trio.go:106:1
3 resistorcolortrio (Color).Int resistor_color_trio.go:70:1
3 resistorcolortrio (Color).String resistor_color_trio.go:60:1
2 resistorcolortrio ExampleLabel resistor_color_trio_example_test.go:186:1
2 resistorcolortrio ExampleColorCode resistor_color_trio_example_test.go:134:1
2 resistorcolortrio ExampleMetricPrefix_Magnitude resistor_color_trio_example_test.go:108:1
2 resistorcolortrio ExampleMetricPrefix_Int resistor_color_trio_example_test.go:89:1
2 resistorcolortrio ExampleMetricPrefix_String resistor_color_trio_example_test.go:70:1
2 resistorcolortrio ExampleColor_Int resistor_color_trio_example_test.go:45:1
2 resistorcolortrio ExampleColor_String resistor_color_trio_example_test.go:20:1
2 resistorcolortrio Value resistor_color_trio.go:163:1
2 resistorcolortrio Colors resistor_color_trio.go:133:1
1 resistorcolortrio ExampleValue resistor_color_trio_example_test.go:159:1
1 resistorcolortrio ExampleColors resistor_color_trio_example_test.go:127:1
1 resistorcolortrio toTitleCase resistor_color_trio_example_test.go:9:1
1 resistorcolortrio (MetricPrefix).Magnitude resistor_color_trio.go:123:1

real	0m0.002s
user	0m0.002s
sys	0m0.000s


 ==============================================================================

Exit code: 0

real	0m0.048s
user	0m0.026s
sys	0m0.048s

real	0m0.051s
user	0m0.028s
sys	0m0.049s

===============================================================================

Running: ../../.github/citools/go/go-lint-misspell

Running Go misspell

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: misspell .


real	0m0.028s
user	0m0.033s
sys	0m0.009s


 ==============================================================================

Exit code: 0

real	0m0.045s
user	0m0.040s
sys	0m0.025s

real	0m0.048s
user	0m0.041s
sys	0m0.026s

===============================================================================

Running: ../../.github/citools/go/go-lint-gosec

Running Go GoSec

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.031s
user	0m0.024s
sys	0m0.031s


 ==============================================================================

Running: gosec ./...

[gosec] 2023/09/07 00:29:44 Including rules: default
[gosec] 2023/09/07 00:29:44 Excluding rules: default
[gosec] 2023/09/07 00:29:44 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/resistor-color-trio
[gosec] 2023/09/07 00:29:45 Checking package: resistorcolortrio
[gosec] 2023/09/07 00:29:45 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/resistor-color-trio/resistor_color_trio.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 250
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.127s
user	0m0.150s
sys	0m0.098s


 ==============================================================================

Exit code: 0

real	0m0.171s
user	0m0.178s
sys	0m0.140s

real	0m0.172s
user	0m0.178s
sys	0m0.141s

===============================================================================

Running: ../../.github/citools/go/go-test-cover-report

Running Go Test, Coverage & Reports

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.033s
user	0m0.031s
sys	0m0.027s


 ==============================================================================

Running: gotest -v -covermode=count -coverprofile coverage.out ./...

=== RUN   TestLabel
=== RUN   TestLabel/Orange_and_orange_and_black
=== RUN   TestLabel/Blue_and_grey_and_brown
=== RUN   TestLabel/Red_and_black_and_red
=== RUN   TestLabel/Green_and_brown_and_orange
=== RUN   TestLabel/Yellow_and_violet_and_yellow
=== RUN   TestLabel/Blue_and_violet_and_blue
=== RUN   TestLabel/Minimum_possible_value
=== RUN   TestLabel/Maximum_possible_value
=== RUN   TestLabel/First_two_colors_make_an_invalid_octal_number
=== RUN   TestLabel/Ignore_extra_colors
--- PASS: TestLabel (0.00s)
    --- PASS: TestLabel/Orange_and_orange_and_black (0.00s)
    --- PASS: TestLabel/Blue_and_grey_and_brown (0.00s)
    --- PASS: TestLabel/Red_and_black_and_red (0.00s)
    --- PASS: TestLabel/Green_and_brown_and_orange (0.00s)
    --- PASS: TestLabel/Yellow_and_violet_and_yellow (0.00s)
    --- PASS: TestLabel/Blue_and_violet_and_blue (0.00s)
    --- PASS: TestLabel/Minimum_possible_value (0.00s)
    --- PASS: TestLabel/Maximum_possible_value (0.00s)
    --- PASS: TestLabel/First_two_colors_make_an_invalid_octal_number (0.00s)
    --- PASS: TestLabel/Ignore_extra_colors (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleMetricPrefix_String
--- PASS: ExampleMetricPrefix_String (0.00s)
=== RUN   ExampleMetricPrefix_Int
--- PASS: ExampleMetricPrefix_Int (0.00s)
=== RUN   ExampleMetricPrefix_Magnitude
--- PASS: ExampleMetricPrefix_Magnitude (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
=== RUN   ExampleLabel
--- PASS: ExampleLabel (0.00s)
PASS
coverage: 96.2% of statements
ok  	resistorcolortrio	0.003s	coverage: 96.2% of statements

real	0m0.194s
user	0m0.246s
sys	0m0.159s


 ==============================================================================

Running: go tool cover -func=coverage.out

resistorcolortrio/resistor_color_trio.go:60:	String		100.0%
resistorcolortrio/resistor_color_trio.go:70:	Int		100.0%
resistorcolortrio/resistor_color_trio.go:106:	String		100.0%
resistorcolortrio/resistor_color_trio.go:115:	Int		100.0%
resistorcolortrio/resistor_color_trio.go:123:	Magnitude	100.0%
resistorcolortrio/resistor_color_trio.go:133:	Colors		100.0%
resistorcolortrio/resistor_color_trio.go:152:	ColorCode	100.0%
resistorcolortrio/resistor_color_trio.go:163:	Value		100.0%
resistorcolortrio/resistor_color_trio.go:186:	Unit		100.0%
resistorcolortrio/resistor_color_trio.go:209:	Label		88.2%
total:						(statements)	96.2%

real	0m0.060s
user	0m0.080s
sys	0m0.084s


 ==============================================================================

Running: go tool cover -html coverage.out -o coverage.html


real	0m0.049s
user	0m0.060s
sys	0m0.075s


 ==============================================================================

Running: cover_annotate

Running: gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

209     	func Label(colors []string) string {
210     		if len(colors) < 3 {
211     			return "-1 ohms"
212     		}
213     	
214     		var value int
215     	
216     		// the first band is in the 10s position
217     		value += ColorCode(colors[0]) * 10
218     	
219     		// the second band is in the 1s position
220     		value += ColorCode(colors[1])
221     	
222     		// the third band is factor (^1 -> x10, ^2 -> x100, ...)
223     		value *= int(math.Pow(float64(10), float64(ColorCode(colors[2]))))
224     	
225     		// figure out what the MetricPrefix is before we remove one or more 1k from the value.
226     		unit := Unit(value)
227     	
228     		// factor out 1k chunks
229     		for value > 0 && value/1_000 != 0 {
230     			value /= 1_000
231     		}
232     	
233     		var sb strings.Builder
234     	
235     		_, e := sb.WriteString(fmt.Sprintf("%d", value))
236     	
237     		// Not sure how to get this to fail so it can be tested.
238     		if e != nil {
239 MISS			return "-1 ohms"
240     		}
241     	
242     		_, e = sb.WriteString(" " + unit)
243     	
244     		// Not sure how to get this to fail so it can be tested.
245     		if e != nil {
246 MISS			return "-1 ohms"
247     		}
248     	
249     		return sb.String()
250     	}


real	0m0.020s
user	0m0.023s
sys	0m0.021s

real	0m0.020s
user	0m0.023s
sys	0m0.021s


 ==============================================================================

Running: gotest -v -race -covermode=atomic ./...

=== RUN   TestLabel
=== RUN   TestLabel/Orange_and_orange_and_black
=== RUN   TestLabel/Blue_and_grey_and_brown
=== RUN   TestLabel/Red_and_black_and_red
=== RUN   TestLabel/Green_and_brown_and_orange
=== RUN   TestLabel/Yellow_and_violet_and_yellow
=== RUN   TestLabel/Blue_and_violet_and_blue
=== RUN   TestLabel/Minimum_possible_value
=== RUN   TestLabel/Maximum_possible_value
=== RUN   TestLabel/First_two_colors_make_an_invalid_octal_number
=== RUN   TestLabel/Ignore_extra_colors
--- PASS: TestLabel (0.00s)
    --- PASS: TestLabel/Orange_and_orange_and_black (0.00s)
    --- PASS: TestLabel/Blue_and_grey_and_brown (0.00s)
    --- PASS: TestLabel/Red_and_black_and_red (0.00s)
    --- PASS: TestLabel/Green_and_brown_and_orange (0.00s)
    --- PASS: TestLabel/Yellow_and_violet_and_yellow (0.00s)
    --- PASS: TestLabel/Blue_and_violet_and_blue (0.00s)
    --- PASS: TestLabel/Minimum_possible_value (0.00s)
    --- PASS: TestLabel/Maximum_possible_value (0.00s)
    --- PASS: TestLabel/First_two_colors_make_an_invalid_octal_number (0.00s)
    --- PASS: TestLabel/Ignore_extra_colors (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleMetricPrefix_String
--- PASS: ExampleMetricPrefix_String (0.00s)
=== RUN   ExampleMetricPrefix_Int
--- PASS: ExampleMetricPrefix_Int (0.00s)
=== RUN   ExampleMetricPrefix_Magnitude
--- PASS: ExampleMetricPrefix_Magnitude (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
=== RUN   ExampleLabel
--- PASS: ExampleLabel (0.00s)
PASS
coverage: 96.2% of statements
ok  	resistorcolortrio	1.018s	coverage: 96.2% of statements

real	0m1.294s
user	0m0.345s
sys	0m0.209s


 ==============================================================================

Exit code: 0

real	0m1.665s
user	0m0.788s
sys	0m0.591s

real	0m1.667s
user	0m0.789s
sys	0m0.592s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: resistorcolortrio
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkLabel
BenchmarkLabel-8   	   99762	     11779 ns/op	   15188 B/op	     182 allocs/op
PASS
ok  	resistorcolortrio	2.268s

real	0m2.435s
user	0m2.615s
sys	0m0.250s

===============================================================================

gotest -v -tags bonus
=== RUN   TestLabel
=== RUN   TestLabel/Orange_and_orange_and_black
=== RUN   TestLabel/Blue_and_grey_and_brown
=== RUN   TestLabel/Red_and_black_and_red
=== RUN   TestLabel/Green_and_brown_and_orange
=== RUN   TestLabel/Yellow_and_violet_and_yellow
=== RUN   TestLabel/Blue_and_violet_and_blue
=== RUN   TestLabel/Minimum_possible_value
=== RUN   TestLabel/Maximum_possible_value
=== RUN   TestLabel/First_two_colors_make_an_invalid_octal_number
=== RUN   TestLabel/Ignore_extra_colors
--- PASS: TestLabel (0.00s)
    --- PASS: TestLabel/Orange_and_orange_and_black (0.00s)
    --- PASS: TestLabel/Blue_and_grey_and_brown (0.00s)
    --- PASS: TestLabel/Red_and_black_and_red (0.00s)
    --- PASS: TestLabel/Green_and_brown_and_orange (0.00s)
    --- PASS: TestLabel/Yellow_and_violet_and_yellow (0.00s)
    --- PASS: TestLabel/Blue_and_violet_and_blue (0.00s)
    --- PASS: TestLabel/Minimum_possible_value (0.00s)
    --- PASS: TestLabel/Maximum_possible_value (0.00s)
    --- PASS: TestLabel/First_two_colors_make_an_invalid_octal_number (0.00s)
    --- PASS: TestLabel/Ignore_extra_colors (0.00s)
=== RUN   ExampleColor_String
--- PASS: ExampleColor_String (0.00s)
=== RUN   ExampleColor_Int
--- PASS: ExampleColor_Int (0.00s)
=== RUN   ExampleMetricPrefix_String
--- PASS: ExampleMetricPrefix_String (0.00s)
=== RUN   ExampleMetricPrefix_Int
--- PASS: ExampleMetricPrefix_Int (0.00s)
=== RUN   ExampleMetricPrefix_Magnitude
--- PASS: ExampleMetricPrefix_Magnitude (0.00s)
=== RUN   ExampleColors
--- PASS: ExampleColors (0.00s)
=== RUN   ExampleColorCode
--- PASS: ExampleColorCode (0.00s)
=== RUN   ExampleValue
--- PASS: ExampleValue (0.00s)
=== RUN   ExampleLabel
--- PASS: ExampleLabel (0.00s)
PASS
ok  	resistorcolortrio	0.003s

real	0m0.131s
user	0m0.176s
sys	0m0.122s

===============================================================================

benchstat benchstat-old.txt benchstat-new.txt
benchstat-old.txt:5: missing iteration count
benchstat-new.txt:5: missing iteration count
goos: linux
goarch: amd64
pkg: resistorcolortrio
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
         â”‚ benchstat-old.txt â”‚  benchstat-new.txt  â”‚
         â”‚      sec/op       â”‚    sec/op     vs base   â”‚
Label-16        11.65Âµ Â± âˆž Â¹
Label-8                        11.78Âµ Â± âˆž Â¹
geomean         11.65Âµ         11.78Âµ        ? Â² Â³
Â¹ need >= 6 samples for confidence interval at level 0.95
Â² benchmark set differs from baseline; geomeans may not be comparable
Â³ ratios must be >0 to compute geomean

         â”‚ benchstat-old.txt â”‚  benchstat-new.txt   â”‚
         â”‚       B/op        â”‚     B/op       vs base   â”‚
Label-16       14.84Ki Â± âˆž Â¹
Label-8                        14.83Ki Â± âˆž Â¹
geomean        14.84Ki         14.83Ki        ? Â² Â³
Â¹ need >= 6 samples for confidence interval at level 0.95
Â² benchmark set differs from baseline; geomeans may not be comparable
Â³ ratios must be >0 to compute geomean

         â”‚ benchstat-old.txt â”‚ benchstat-new.txt  â”‚
         â”‚     allocs/op     â”‚  allocs/op   vs base   â”‚
Label-16         182.0 Â± âˆž Â¹
Label-8                        182.0 Â± âˆž Â¹
geomean          182.0         182.0        ? Â² Â³
Â¹ need >= 6 samples for confidence interval at level 0.95
Â² benchmark set differs from baseline; geomeans may not be comparable
Â³ ratios must be >0 to compute geomean

real	0m0.004s
user	0m0.000s
sys	0m0.004s

===============================================================================

gomarkdoc --output resistorcolortrio-doc.md

real	0m0.014s
user	0m0.012s
sys	0m0.003s

===============================================================================

go doc -all resistorcolortrio
package resistorcolortrio // import "resistorcolortrio"

Package resistorcolortrio helps users identify resistors using their color
bands.

VARIABLES

var ColorNames = map[Color]string{
	Undefined: "undefined",
	Black:     "black",
	Brown:     "brown",
	Red:       "red",
	Orange:    "orange",
	Yellow:    "yellow",
	Green:     "green",
	Blue:      "blue",
	Violet:    "violet",
	Grey:      "grey",
	White:     "white",
}
    ColorNames maps Color type to it's string representation.

var MetricPrefixNames = map[MetricPrefix]string{
	NoPrefix: "",
	Kilo:     "kilo",
	Mega:     "mega",
	Giga:     "giga",
}
    MetricPrefixNames maps MetrixPrefix to it's string representation.


FUNCTIONS

func ColorCode(color string) int
    ColorCode returns the resistance value of the given color. I guess instead
    of having a map[String]int{} to do the lookups, we have to search a
    []String{} array and find the element with that string and return the index.
    They really sucked the fun out of this function.

func Colors() []string
    Colors should return the list of all colors. They are limiting your
    implementation possibilities. Not sure why even bother having a function
    since the contents of it are very static. I don't wan't to use an array to
    store the color data, I'm going to use an Enum instead. Now to find a clever
    way of generating the data from an Enum type that isn't a type and it's just
    a bunch of constants.

func Label(colors []string) string
    Label describes the resistance label given the colors of a resistor.
    The label is a string with a resistance value with an unit appended (e.g.
    "33 ohms", "470 kiloohms").

func Unit(value int) string
    Unit returns the units for a given set of bands.

func Value(colors []string) int
    Value returns the resistance value of a resistor with a given colors.


TYPES

type Color int
    Color type represents the value of a resistor's band.

const (
	Undefined Color = iota - 1
	Black
	Brown
	Red
	Orange
	Yellow
	Green
	Blue
	Violet
	Grey
	White
)
    Color constants used as an Enum. Starts with -1 for which is used as an
    undefined color.

const (
	ColorMin Color = Black
	ColorMax       = White
)
    To make Color lower and upper bound tests clearer, let's define constants.
    Black and White are at the lower and upper boundaries. All other colors
    should be between them.

func (c Color) Int() int
    Int returns the integer representation of a Color. Yes, we could just use
    int(Color); But, this is more fun.

func (c Color) String() string
    String implements the Stringer interface. Another way of getting the String
    equivalent of a Color. We're going to use both to help make this exercise
    interesting. You can also use a switch in here; But, since we have our
    min/max constants, this should be easier to maintain. This also allows us to
    provide a response for undefined colors without complicated error checking
    since this exercise lacks error returns on the functions being tested.

type MetricPrefix int
    MetricPrefix type represents the metric prefix of our resistor value.

const (
	NoPrefix MetricPrefix = 3 * iota
	Kilo
	Mega
	Giga
)
    Enum of MetricPrefixes

const (
	MetricPrefixMin MetricPrefix = Kilo
	MetricPrefixMax              = Giga
)
    To make MetricPrefix lower and upper bound tests clearer, let's define
    constants. Kilo and Giga are at the lower and upper boundaries. All other
    MetricPrefixes should be between them.

func (m MetricPrefix) Int() int
    Int returns the integer representation of a MetricPrefix.

func (m MetricPrefix) Magnitude() int

func (m MetricPrefix) String() string
    String implements the Stringer interface for MetricPrefix.


real	0m0.038s
user	0m0.031s
sys	0m0.035s


===============================================================================

