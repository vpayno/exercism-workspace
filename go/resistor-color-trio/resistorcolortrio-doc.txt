package resistorcolortrio // import "resistorcolortrio"

Package resistorcolortrio helps users identify resistors using their color
bands.

VARIABLES

var ColorNames = map[Color]string{
	Undefined: "undefined",
	Black:     "black",
	Brown:     "brown",
	Red:       "red",
	Orange:    "orange",
	Yellow:    "yellow",
	Green:     "green",
	Blue:      "blue",
	Violet:    "violet",
	Grey:      "grey",
	White:     "white",
}
    ColorNames maps Color type to it's string representation.

var MetricPrefixNames = map[MetricPrefix]string{
	NoPrefix: "",
	Kilo:     "kilo",
	Mega:     "mega",
	Giga:     "giga",
}
    MetricPrefixNames maps MetrixPrefix to it's string representation.


FUNCTIONS

func ColorCode(color string) int
    ColorCode returns the resistance value of the given color. I guess instead
    of having a map[String]int{} to do the lookups, we have to search a
    []String{} array and find the element with that string and return the index.
    They really sucked the fun out of this function.

func Colors() []string
    Colors should return the list of all colors. They are limiting your
    implementation possibilities. Not sure why even bother having a function
    since the contents of it are very static. I don't wan't to use an array to
    store the color data, I'm going to use an Enum instead. Now to find a clever
    way of generating the data from an Enum type that isn't a type and it's just
    a bunch of constants.

func Label(colors []string) string
    Label describes the resistance label given the colors of a resistor.
    The label is a string with a resistance value with an unit appended (e.g.
    "33 ohms", "470 kiloohms").

func Unit(value int) string
    Unit returns the units for a given set of bands.

func Value(colors []string) int
    Value returns the resistance value of a resistor with a given colors.


TYPES

type Color int
    Color type represents the value of a resistor's band.

const (
	Undefined Color = iota - 1
	Black
	Brown
	Red
	Orange
	Yellow
	Green
	Blue
	Violet
	Grey
	White
)
    Color constants used as an Enum. Starts with -1 for which is used as an
    undefined color.

const (
	ColorMin Color = Black
	ColorMax       = White
)
    To make Color lower and upper bound tests clearer, let's define constants.
    Black and White are at the lower and upper boundaries. All other colors
    should be between them.

func (c Color) Int() int
    Int returns the integer representation of a Color. Yes, we could just use
    int(Color); But, this is more fun.

func (c Color) String() string
    String implements the Stringer interface. Another way of getting the String
    equivalent of a Color. We're going to use both to help make this exercise
    interesting. You can also use a switch in here; But, since we have our
    min/max constants, this should be easier to maintain. This also allows us to
    provide a response for undefined colors without complicated error checking
    since this exercise lacks error returns on the functions being tested.

type MetricPrefix int
    MetricPrefix type represents the metric prefix of our resistor value.

const (
	NoPrefix MetricPrefix = 3 * iota
	Kilo
	Mega
	Giga
)
    Enum of MetricPrefixes

const (
	MetricPrefixMin MetricPrefix = Kilo
	MetricPrefixMax              = Giga
)
    To make MetricPrefix lower and upper bound tests clearer, let's define
    constants. Kilo and Giga are at the lower and upper boundaries. All other
    MetricPrefixes should be between them.

func (m MetricPrefix) Int() int
    Int returns the integer representation of a MetricPrefix.

func (m MetricPrefix) Magnitude() int

func (m MetricPrefix) String() string
    String implements the Stringer interface for MetricPrefix.

