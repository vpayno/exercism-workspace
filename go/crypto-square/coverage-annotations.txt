
14     	func Encode(plain string) string {
15     		if plain == "" {
16     			return ""
17     		}
18     	
19     		if debugMode {
20 MISS			fmt.Printf("plain: %q\n", plain)
21     		}
22     	
23     		normalizedText := NormalizeText(plain)
24     	
25     		if debugMode {
26 MISS			fmt.Printf("plain: %q\n", normalizedText)
27     		}
28     	
29     		plainTokens := GetTokens(normalizedText)
30     	
31     		if debugMode {
32 MISS			fmt.Printf("plainTokens: %#v\n", plainTokens)
33     		}
34     	
35     		encodedTokens := EncodeTokens(plainTokens)
36     	
37     		if debugMode {
38 MISS			fmt.Printf("encodedTokens: %#v\n", encodedTokens)
39     		}
40     	
41     		cipher := strings.Join(encodedTokens, " ")
42     	
43     		return cipher
44     	}


134     	func EncodeTokens(tokens []string) []string {
135     		if len(tokens) == 0 {
136 MISS			return []string{}
137     		}
138     	
139     		var sb strings.Builder
140     		cipher := []string{}
141     	
142     		// col <= len because we need to capture incomplete tokens.
143     		for col := 0; col <= len(tokens); col++ {
144     			for _, row := range tokens {
145     				if col < len(row) {
146     					sb.WriteString(string(row[col]))
147     				}
148     			}
149     	
150     			// To prevent from ending with an empty token.
151     			// Write a token to the slice.
152     			if len(sb.String()) > 0 {
153     				cipher = append(cipher, sb.String())
154     			}
155     			sb.Reset()
156     		}
157     	
158     		return cipher
159     	}


71     	func GetSquareDimmensions(text string) (row, col int) {
72     		size := len(text)
73     	
74     		if size == 0 {
75 MISS			return
76     		}
77     	
78     		if size == 1 {
79     			row, col = 1, 1
80     			return
81     		}
82     	
83     		for c := 1; c <= size; c++ {
84     			for r := 1; r < size; r++ {
85     				if r*c >= size && c >= r && c-r <= 1 {
86     					row, col = r, c
87     					return
88     				}
89     			}
90     		}
91     	
92 MISS		return
93     	}


 96     	func GetTokens(text string) []string {
 97     		if text == "" {
 98 MISS			return []string{}
 99     		}
100     	
101     		row, col := GetSquareDimmensions(NormalizeText(text))
102     	
103     		tokens := []string{}
104     		var token strings.Builder
105     		var count int
106     	
107     		for _, char := range text {
108     			count++
109     			token.WriteString(string(char))
110     	
111     			// Write a token to the slice.
112     			if count == col {
113     				tokens = append(tokens, token.String())
114     				token.Reset()
115     				count = 0
116     			}
117     		}
118     	
119     		// Prevent empty tokens from being captured.
120     		if len(token.String()) > 0 {
121     			tokens = append(tokens, token.String())
122     		}
123     	
124     		// Count can be zero or larger than col.
125     		// Catch incomplete tokens and add whitespace padd them.
126     		if count > 0 && count < col {
127     			tokens[row-1] += strings.Repeat(" ", col-count)
128     		}
129     	
130     		return tokens
131     	}


49     	func NormalizeText(text string) string {
50     		if text == "" {
51 MISS			return ""
52     		}
53     	
54     		var output string
55     	
56     		reStr := `[[:^alnum:]]+`
57     		re, err := regexp.Compile(reStr)
58     		if err != nil {
59 MISS			panic(err)
60     		}
61     	
62     		// If it's not A-Z, a-z or 0-9, replace it with an empty string.
63     		output = re.ReplaceAllString(text, "")
64     	
65     		output = strings.ToLower(output)
66     	
67     		return output
68     	}

