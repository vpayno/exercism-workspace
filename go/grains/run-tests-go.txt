Running automated test file(s):

Go packages: grains


===============================================================================

golint grains

real	0m0.255s
user	0m0.218s
sys	0m0.290s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out grains
=== RUN   TestSquare
    grains_test.go:25: PASS: 1
    grains_test.go:25: PASS: 2
    grains_test.go:25: PASS: 3
    grains_test.go:25: PASS: 4
    grains_test.go:25: PASS: 16
    grains_test.go:25: PASS: 32
    grains_test.go:25: PASS: 64
    grains_test.go:25: PASS: square 0 returns an error
    grains_test.go:25: PASS: negative square returns an error
    grains_test.go:25: PASS: square greater than 64 returns an error
--- PASS: TestSquare (0.00s)
=== RUN   TestTotal
--- PASS: TestTotal (0.00s)
=== RUN   ExampleSquare
--- PASS: ExampleSquare (0.00s)
=== RUN   ExampleTotal
--- PASS: ExampleTotal (0.00s)
PASS
coverage: 100.0% of statements
ok  	grains	0.011s	coverage: 100.0% of statements

real	0m0.702s
user	0m0.861s
sys	0m0.533s

===============================================================================

go tool cover -func=coverage.out
grains/grains.go:20:	isValidSquareId	100.0%
grains/grains.go:29:	Square		100.0%
grains/grains.go:41:	Total		100.0%
total:			(statements)	100.0%

real	0m0.330s
user	0m0.356s
sys	0m0.333s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.278s
user	0m0.281s
sys	0m0.284s

===============================================================================

go test -v -race -covermode=atomic grains
=== RUN   TestSquare
    grains_test.go:25: PASS: 1
    grains_test.go:25: PASS: 2
    grains_test.go:25: PASS: 3
    grains_test.go:25: PASS: 4
    grains_test.go:25: PASS: 16
    grains_test.go:25: PASS: 32
    grains_test.go:25: PASS: 64
    grains_test.go:25: PASS: square 0 returns an error
    grains_test.go:25: PASS: negative square returns an error
    grains_test.go:25: PASS: square greater than 64 returns an error
--- PASS: TestSquare (0.00s)
=== RUN   TestTotal
--- PASS: TestTotal (0.00s)
=== RUN   ExampleSquare
--- PASS: ExampleSquare (0.00s)
=== RUN   ExampleTotal
--- PASS: ExampleTotal (0.00s)
PASS
coverage: 100.0% of statements
ok  	grains	0.029s	coverage: 100.0% of statements

real	0m0.880s
user	0m0.892s
sys	0m0.624s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: grains
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkSquare-4   	  678202	      1516 ns/op	     232 B/op	       7 allocs/op
BenchmarkTotal-4    	1000000000	         0.9112 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	grains	3.173s

real	0m3.855s
user	0m4.995s
sys	0m0.804s

===============================================================================

go test -tags bonus
PASS
ok  	grains	0.004s

real	0m0.596s
user	0m0.681s
sys	0m0.503s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.800s
user	0m0.836s
sys	0m0.386s

benchstat benchstat-old.txt benchstat-new.txt
name      old time/op    new time/op    delta
Square-4    1.53µs ± 0%    1.52µs ± 0%   ~     (p=1.000 n=1+1)
Total-4     2.92µs ± 0%    0.00µs ± 0%   ~     (p=1.000 n=1+1)

name      old alloc/op   new alloc/op   delta
Square-4      232B ± 0%      232B ± 0%   ~     (all equal)
Total-4      0.00B          0.00B        ~     (all equal)

name      old allocs/op  new allocs/op  delta
Square-4      7.00 ± 0%      7.00 ± 0%   ~     (all equal)
Total-4       0.00           0.00        ~     (all equal)

real	0m0.023s
user	0m0.009s
sys	0m0.018s

===============================================================================

go vet grains

real	0m0.468s
user	0m0.531s
sys	0m0.410s

===============================================================================

go fix grains

real	0m0.182s
user	0m0.190s
sys	0m0.192s

===============================================================================

gosec ./grains
[gosec] 2022/06/24 19:29:18 Including rules: default
[gosec] 2022/06/24 19:29:18 Excluding rules: default
[gosec] 2022/06/24 19:29:18 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/grains
2022/06/24 19:29:19 internal error: package "errors" without types was imported from "command-line-arguments"

real	0m0.690s
user	0m0.848s
sys	0m0.509s

===============================================================================

gomarkdoc --output grains-doc.md

real	0m0.034s
user	0m0.025s
sys	0m0.018s

===============================================================================

go doc -all grains
package grains // import "grains"

Package grains calculates the number of grains of wheat on a given
chessboard square or on the whole chessboard given that the number on each
square doubles.

FUNCTIONS

func Square(number int) (uint64, error)
    Square returns the number of grains for the given square on a chessboard.

func Total() uint64
    Total returns the number of grans for a while chessboard.
    https://en.wikipedia.org/wiki/Wheat_and_chessboard_problem#:~:text=The%20number%20of%20grains%20of,of%20one%20grain%20of%20wheat).


real	0m0.206s
user	0m0.205s
sys	0m0.219s


===============================================================================

