Running automated test file(s):

Go packages: grains 


===============================================================================

golint grains

real	0m0.283s
user	0m0.283s
sys	0m0.311s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out grains
=== RUN   TestSquare
=== RUN   TestSquare/grains_on_square_1
=== RUN   TestSquare/grains_on_square_2
=== RUN   TestSquare/grains_on_square_3
=== RUN   TestSquare/grains_on_square_4
=== RUN   TestSquare/grains_on_square_16
=== RUN   TestSquare/grains_on_square_32
=== RUN   TestSquare/grains_on_square_64
=== RUN   TestSquare/square_0_raises_an_exception
=== RUN   TestSquare/negative_square_raises_an_exception
=== RUN   TestSquare/square_greater_than_64_raises_an_exception
--- PASS: TestSquare (0.00s)
    --- PASS: TestSquare/grains_on_square_1 (0.00s)
    --- PASS: TestSquare/grains_on_square_2 (0.00s)
    --- PASS: TestSquare/grains_on_square_3 (0.00s)
    --- PASS: TestSquare/grains_on_square_4 (0.00s)
    --- PASS: TestSquare/grains_on_square_16 (0.00s)
    --- PASS: TestSquare/grains_on_square_32 (0.00s)
    --- PASS: TestSquare/grains_on_square_64 (0.00s)
    --- PASS: TestSquare/square_0_raises_an_exception (0.00s)
    --- PASS: TestSquare/negative_square_raises_an_exception (0.00s)
    --- PASS: TestSquare/square_greater_than_64_raises_an_exception (0.00s)
=== RUN   TestTotal
--- PASS: TestTotal (0.00s)
=== RUN   ExampleSquare
--- PASS: ExampleSquare (0.00s)
=== RUN   ExampleTotal
--- PASS: ExampleTotal (0.00s)
PASS
coverage: 100.0% of statements
ok  	grains	0.013s	coverage: 100.0% of statements

real	0m1.082s
user	0m1.198s
sys	0m0.832s

===============================================================================

go tool cover -func=coverage.out
grains/grains.go:20:	isValidSquareID	100.0%
grains/grains.go:29:	Square		100.0%
grains/grains.go:41:	Total		100.0%
total:			(statements)	100.0%

real	0m0.504s
user	0m0.690s
sys	0m0.492s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.564s
user	0m0.642s
sys	0m0.553s

===============================================================================

go test -v -race -covermode=atomic grains
=== RUN   TestSquare
=== RUN   TestSquare/grains_on_square_1
=== RUN   TestSquare/grains_on_square_2
=== RUN   TestSquare/grains_on_square_3
=== RUN   TestSquare/grains_on_square_4
=== RUN   TestSquare/grains_on_square_16
=== RUN   TestSquare/grains_on_square_32
=== RUN   TestSquare/grains_on_square_64
=== RUN   TestSquare/square_0_raises_an_exception
=== RUN   TestSquare/negative_square_raises_an_exception
=== RUN   TestSquare/square_greater_than_64_raises_an_exception
--- PASS: TestSquare (0.01s)
    --- PASS: TestSquare/grains_on_square_1 (0.00s)
    --- PASS: TestSquare/grains_on_square_2 (0.00s)
    --- PASS: TestSquare/grains_on_square_3 (0.00s)
    --- PASS: TestSquare/grains_on_square_4 (0.00s)
    --- PASS: TestSquare/grains_on_square_16 (0.00s)
    --- PASS: TestSquare/grains_on_square_32 (0.00s)
    --- PASS: TestSquare/grains_on_square_64 (0.00s)
    --- PASS: TestSquare/square_0_raises_an_exception (0.00s)
    --- PASS: TestSquare/negative_square_raises_an_exception (0.00s)
    --- PASS: TestSquare/square_greater_than_64_raises_an_exception (0.00s)
=== RUN   TestTotal
--- PASS: TestTotal (0.00s)
=== RUN   ExampleSquare
--- PASS: ExampleSquare (0.00s)
=== RUN   ExampleTotal
--- PASS: ExampleTotal (0.00s)
PASS
coverage: 100.0% of statements
ok  	grains	0.066s	coverage: 100.0% of statements

real	0m1.464s
user	0m2.078s
sys	0m1.039s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: grains
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkSquare-4   	  729800	      2388 ns/op	     200 B/op	       7 allocs/op
BenchmarkTotal-4    	 1238496	       914.7 ns/op	     128 B/op	       6 allocs/op
PASS
ok  	grains	4.018s

real	0m4.916s
user	0m7.169s
sys	0m1.355s

===============================================================================

go test -tags bonus
PASS
ok  	grains	0.009s

real	0m0.913s
user	0m1.207s
sys	0m0.720s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m1.048s
user	0m1.019s
sys	0m0.578s

benchstat benchstat-old.txt benchstat-new.txt
name      old time/op    new time/op    delta
Square-4    1.52µs ± 0%    2.39µs ± 0%   ~     (p=1.000 n=1+1)
Total-4      687ns ± 0%     915ns ± 0%   ~     (p=1.000 n=1+1)

name      old alloc/op   new alloc/op   delta
Square-4      200B ± 0%      200B ± 0%   ~     (all equal)
Total-4       128B ± 0%      128B ± 0%   ~     (all equal)

name      old allocs/op  new allocs/op  delta
Square-4      7.00 ± 0%      7.00 ± 0%   ~     (all equal)
Total-4       6.00 ± 0%      6.00 ± 0%   ~     (all equal)

real	0m0.072s
user	0m0.049s
sys	0m0.071s

===============================================================================

go vet grains

real	0m0.906s
user	0m1.140s
sys	0m0.620s

===============================================================================

go fix grains

real	0m0.377s
user	0m0.314s
sys	0m0.276s

===============================================================================

gosec ./grains
[gosec] 2022/07/27 12:33:10 Including rules: default
[gosec] 2022/07/27 12:33:10 Excluding rules: default
[gosec] 2022/07/27 12:33:10 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/grains
2022/07/27 12:33:11 internal error: package "fmt" without types was imported from "command-line-arguments"

real	0m0.912s
user	0m1.122s
sys	0m0.682s

===============================================================================

gomarkdoc --output grains-doc.md

real	0m0.050s
user	0m0.040s
sys	0m0.035s

===============================================================================

go doc -all grains
package grains // import "grains"

Package grains calculates the number of grains of wheat on a given
chessboard square or on the whole chessboard given that the number on each
square doubles.

FUNCTIONS

func Square(number int) (uint64, error)
    Square returns the number of grains for the given square on a chessboard.

func Total() uint64
    Total returns the number of grans for a while chessboard.
    https://en.wikipedia.org/wiki/Wheat_and_chessboard_problem#:~:text=The%20number%20of%20grains%20of,of%20one%20grain%20of%20wheat).


real	0m0.370s
user	0m0.402s
sys	0m0.420s


===============================================================================

