Running automated test file(s):

Go packages: weather 


===============================================================================

golint weather

real	0m0.160s
user	0m0.099s
sys	0m0.116s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out weather
=== RUN   TestComments
--- PASS: TestComments (0.00s)
=== RUN   ExampleForecast
--- PASS: ExampleForecast (0.00s)
PASS
coverage: 100.0% of statements
ok  	weather	0.018s	coverage: 100.0% of statements

real	0m0.665s
user	0m0.653s
sys	0m0.583s

===============================================================================

go tool cover -func=coverage.out
weather/weather_forecast.go:11:	Forecast	100.0%
total:				(statements)	100.0%

real	0m0.079s
user	0m0.037s
sys	0m0.087s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.072s
user	0m0.047s
sys	0m0.079s

===============================================================================

go test -v -race -covermode=atomic weather
=== RUN   TestComments
--- PASS: TestComments (0.00s)
=== RUN   ExampleForecast
--- PASS: ExampleForecast (0.00s)
PASS
coverage: 100.0% of statements
ok  	weather	0.047s	coverage: 100.0% of statements

real	0m0.787s
user	0m1.058s
sys	0m0.564s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
PASS
ok  	weather	0.025s

real	0m0.467s
user	0m0.532s
sys	0m0.353s

===============================================================================

go test -tags bonus
PASS
ok  	weather	0.018s

real	0m0.564s
user	0m0.573s
sys	0m0.393s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet weather

real	0m0.577s
user	0m0.664s
sys	0m0.431s

===============================================================================

go fix weather

real	0m0.047s
user	0m0.019s
sys	0m0.036s

===============================================================================

gosec ./weather-forecast
[gosec] 2022/07/24 00:42:26 Including rules: default
[gosec] 2022/07/24 00:42:26 Excluding rules: default
[gosec] 2022/07/24 00:42:26 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/weather-forecast
[gosec] 2022/07/24 00:42:26 Checking package: weather
[gosec] 2022/07/24 00:42:26 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/weather-forecast/weather_forecast.go
Results:


Summary:
   Files: 1
   Lines: 14
   Nosec: 0
  Issues: 0


real	0m0.269s
user	0m0.289s
sys	0m0.197s

===============================================================================

gomarkdoc --output weather-doc.md

real	0m0.036s
user	0m0.031s
sys	0m0.010s

===============================================================================

go doc -all weather
package weather // import "weather"

Package weather is a library for forcasting weather conditions in various
cities in Goblinocus.

VARIABLES

var CurrentCondition string
    CurrentCondition stores the current weather conditions for a city.

var CurrentLocation string
    CurrentLocation stores the current city we're forcasting for.


FUNCTIONS

func Forecast(city, condition string) string
    Forecast returns a string with the weather conditions for a city.


real	0m0.137s
user	0m0.052s
sys	0m0.140s


===============================================================================

