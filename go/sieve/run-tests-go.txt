Running automated test file(s):

Go packages: sieve 


===============================================================================

golint sieve

real	0m0.154s
user	0m0.091s
sys	0m0.141s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out sieve
=== RUN   TestSieve
=== RUN   TestSieve/no_primes_under_two
=== RUN   TestSieve/find_first_prime
=== RUN   TestSieve/find_primes_up_to_10
=== RUN   TestSieve/limit_is_prime
=== RUN   TestSieve/find_primes_up_to_1000
--- PASS: TestSieve (0.00s)
    --- PASS: TestSieve/no_primes_under_two (0.00s)
    --- PASS: TestSieve/find_first_prime (0.00s)
    --- PASS: TestSieve/find_primes_up_to_10 (0.00s)
    --- PASS: TestSieve/limit_is_prime (0.00s)
    --- PASS: TestSieve/find_primes_up_to_1000 (0.00s)
=== RUN   ExampleSieve
--- PASS: ExampleSieve (0.00s)
PASS
coverage: 100.0% of statements
ok  	sieve	0.009s	coverage: 100.0% of statements

real	0m0.523s
user	0m0.578s
sys	0m0.404s

===============================================================================

go tool cover -func=coverage.out
sieve/sieve.go:27:	Sieve		100.0%
total:			(statements)	100.0%

real	0m0.180s
user	0m0.114s
sys	0m0.184s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.185s
user	0m0.138s
sys	0m0.173s

===============================================================================

go test -v -race -covermode=atomic sieve
=== RUN   TestSieve
=== RUN   TestSieve/no_primes_under_two
=== RUN   TestSieve/find_first_prime
=== RUN   TestSieve/find_primes_up_to_10
=== RUN   TestSieve/limit_is_prime
=== RUN   TestSieve/find_primes_up_to_1000
--- PASS: TestSieve (0.01s)
    --- PASS: TestSieve/no_primes_under_two (0.00s)
    --- PASS: TestSieve/find_first_prime (0.00s)
    --- PASS: TestSieve/find_primes_up_to_10 (0.00s)
    --- PASS: TestSieve/limit_is_prime (0.00s)
    --- PASS: TestSieve/find_primes_up_to_1000 (0.01s)
=== RUN   ExampleSieve
--- PASS: ExampleSieve (0.00s)
PASS
coverage: 100.0% of statements
ok  	sieve	0.056s	coverage: 100.0% of statements

real	0m0.646s
user	0m0.706s
sys	0m0.423s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: sieve
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkSieve-4   	    4113	    301091 ns/op	   58221 B/op	     103 allocs/op
PASS
ok  	sieve	1.312s

real	0m1.789s
user	0m2.164s
sys	0m0.419s

===============================================================================

go test -tags bonus
PASS
ok  	sieve	0.016s

real	0m0.594s
user	0m0.666s
sys	0m0.453s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.463s
user	0m0.656s
sys	0m0.356s

benchstat benchstat-old.txt benchstat-new.txt
name     old time/op    new time/op    delta
Sieve-4     818ms ± 0%       0ms ± 0%   ~     (p=1.000 n=1+1)

name     old alloc/op   new alloc/op   delta
Sieve-4    57.9MB ± 0%     0.1MB ± 0%   ~     (p=1.000 n=1+1)

name     old allocs/op  new allocs/op  delta
Sieve-4     38.6k ± 0%      0.1k ± 0%   ~     (p=1.000 n=1+1)

real	0m0.029s
user	0m0.017s
sys	0m0.030s

===============================================================================

go vet sieve

real	0m0.395s
user	0m0.431s
sys	0m0.346s

===============================================================================

go fix sieve

real	0m0.120s
user	0m0.073s
sys	0m0.101s

===============================================================================

gosec ./sieve
[gosec] 2022/07/24 00:39:43 Including rules: default
[gosec] 2022/07/24 00:39:43 Excluding rules: default
[gosec] 2022/07/24 00:39:43 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/sieve
2022/07/24 00:39:43 internal error: package "sort" without types was imported from "command-line-arguments"

real	0m0.358s
user	0m0.375s
sys	0m0.264s

===============================================================================

gomarkdoc --output sieve-doc.md

real	0m0.040s
user	0m0.029s
sys	0m0.015s

===============================================================================

go doc -all sieve
package sieve // import "sieve"

Package sieve of Eratosthenes is used to find all the primes from 2 up to a
given number.

FUNCTIONS

func Sieve(limit int) []int
    Sieve returns a list of prime numbers using the Sieve of Eratosthenes.
    https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes Litering the code with
    optimization todos so I can play with Go benchmarks.

        algorithm Sieve of Eratosthenes is
        	input: an integer n > 1.
        	output: all prime numbers from 2 through n.

        	let A be an array of Boolean values, indexed by integers 2 to n,
        	initially all set to true.

        	for i = 2, 3, 4, ..., not exceeding √n do
        		if A[i] is true
        			for j = i2, i2+i, i2+2i, i2+3i, ..., not exceeding n do
        				set A[j] := false

        	return all i such that A[i] is true.


real	0m0.202s
user	0m0.101s
sys	0m0.178s


===============================================================================

