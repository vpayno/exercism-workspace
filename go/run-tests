#!/bin/bash

print_ruler()
{
	printf "\n"
	printf "=%.0s" {1..79}; printf "\n"
	printf "\n"
} # print_ruler()

get_go_package_name()
{
	awk '/^package / { print $NF }' ./*.go | head -n 1
} # get_go_package_name()

main()
{
	printf "Running automated test file(s):\n\n"

	mapfile -t packages < <(get_go_package_name)
	printf "Go packages: "; printf "%s " "${packages[@]}"; printf "\n\n"

	print_ruler

	# go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

	echo golangci-lint run --enable-all ./...
	time golangci-lint run --enable-all ./...

	print_ruler

	# go install golang.org/x/lint/golint@latest

	echo golint ./...
	time golint ./...

	print_ruler

	# go install github.com/mgechev/revive@latest

	echo revive -formatter=stylish ./...
	time revive -formatter=stylish ./...

	print_ruler

	# go install github.com/gordonklaus/ineffassign@latest

	echo ineffassign ./...
	time ineffassign ./...

	print_ruler

	# go install github.com/quasilyte/go-consistent@latest

	echo go-consistent -v ./...
	time go-consistent -v ./...

	print_ruler

	# go install honnef.co/go/tools/cmd/staticcheck@latest

	echo staticcheck ./...
	time staticcheck ./...

	print_ruler

	# go install github.com/go-critic/go-critic/cmd/gocritic@latest

	echo gocritic check -enableAll ./...
	time gocritic check -enableAll ./...

	print_ruler

	echo go vet ./...
	time go vet ./...

	print_ruler

	echo go fix ./...
	time go fix ./...

	print_ruler

	# go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

	echo gocyclo .
	time gocyclo .

	print_ruler

	# go install github.com/client9/misspell/cmd/misspell@latest

	echo misspell .
	time misspell .

	print_ruler

	# go install github.com/securego/gosec/cmd/gosec@latest

	echo gosec ./...
	time gosec ./...

	print_ruler

	# go install golang.org/x/tools/cmd/cover@latest
	# go install github.com/rakyll/gotest@latest

	echo gotest -v -covermode=count -coverprofile coverage.out ./...
	time gotest -v -covermode=count -coverprofile coverage.out ./...

	print_ruler

	echo go tool cover -func=coverage.out
	time go tool cover -func=coverage.out

	print_ruler

	echo go tool cover -html coverage.out -o coverage.html
	time go tool cover -html coverage.out -o coverage.html

	print_ruler

	# go install github.com/axw/gocov/gocov@latest

	echo gocov convert coverage.out '|' gocov annotate -ceiling=100 - '|' tee coverage-annotations.txt
	time gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

	print_ruler

	echo gotest -v -race -covermode=atomic ./...
	time gotest -v -race -covermode=atomic ./...

	print_ruler

	if [[ -f benchstat-new.txt ]]; then
		echo mv -v benchstat-{new,old}.txt
		mv -v benchstat-{new,old}.txt
		printf "\n"
	fi

	echo gotest -v --run=xxx --bench . --benchmem '|&' tee benchstat-new.txt
	time gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt

	print_ruler

	echo gotest -v -tags bonus
	time gotest -v -tags bonus

	print_ruler

	if [[ -f benchstat-old.txt ]] && [[ -f benchstat-new.txt ]]; then

		# go install golang.org/x/perf/cmd/benchstat@latest

		echo benchstat benchstat-{old,new}.txt
		time benchstat benchstat-{old,new}.txt

	else

		printf "No old benchmarks to run benchstat against.\n"

	fi

	print_ruler

	# go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest

	for package in "${packages[@]}"; do
		echo gomarkdoc --output "${package}"-doc.md
		time gomarkdoc --output "${package}"-doc.md
	done

	print_ruler

	for package in "${packages[@]}"; do
		echo go doc -all "${package}"
		time go doc -all "${package}" |& tee "${package}"-doc.txt
		printf "\n"
	done

	print_ruler
} # main()

time main "$@" |& tee ./run-tests-go.txt
