#!/bin/bash

print_ruler() {
	printf "\n"
	printf "=%.0s" {1..79}
	printf "\n"
	printf "\n"
} # print_ruler()

get_go_package_name() {
	awk '/^package / { print $NF }' ./*.go | head -n 1
} # get_go_package_name()

main() {
	printf "Running automated test file(s):\n\n"

	mapfile -t packages < <(get_go_package_name)
	printf "Go packages: "
	printf "%s " "${packages[@]}"
	printf "\n\n"

	print_ruler

	# go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

	echo Running: ../../.github/citools/go/go-lint-golangci-lint
	time ../../.github/citools/go/go-lint-golangci-lint

	print_ruler

	# go install github.com/mgechev/revive@latest

	echo Running: ../../.github/citools/go/go-lint-revive
	time ../../.github/citools/go/go-lint-revive

	print_ruler

	# go install github.com/gordonklaus/ineffassign@latest

	echo Running: ../../.github/citools/go/go-lint-ineffassign
	time ../../.github/citools/go/go-lint-ineffassign

	print_ruler

	# go install github.com/quasilyte/go-consistent@latest

	echo Running: ../../.github/citools/go/go-lint-go-consistent
	time ../../.github/citools/go/go-lint-go-consistent

	print_ruler

	# go install honnef.co/go/tools/cmd/staticcheck@latest

	echo Running: ../../.github/citools/go/go-lint-staticcheck
	time ../../.github/citools/go/go-lint-staticcheck

	print_ruler

	# go install github.com/go-critic/go-critic/cmd/gocritic@latest

	echo Running: ../../.github/citools/go/go-lint-gocritic
	time ../../.github/citools/go/go-lint-gocritic

	print_ruler

	echo Running: ../../.github/citools/go/go-lint-go_vet
	time ../../.github/citools/go/go-lint-go_vet

	print_ruler

	echo Running: ../../.github/citools/go/go-fixer-go_fix
	time ../../.github/citools/go/go-fixer-go_fix

	print_ruler

	echo Running: ../../.github/citools/go/go-lint-errcheck
	time ../../.github/citools/go/go-lint-errcheck

	print_ruler

	# go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

	echo Running: ../../.github/citools/go/go-lint-gocyclo
	time ../../.github/citools/go/go-lint-gocyclo

	print_ruler

	# go install github.com/client9/misspell/cmd/misspell@latest

	echo Running: ../../.github/citools/go/go-lint-misspell
	time ../../.github/citools/go/go-lint-misspell

	print_ruler

	# go install github.com/securego/gosec/cmd/gosec@latest

	echo Running: ../../.github/citools/go/go-lint-gosec
	time ../../.github/citools/go/go-lint-gosec

	print_ruler

	# go install golang.org/x/tools/cmd/cover@latest
	# go install github.com/rakyll/gotest@latest
	# go install github.com/axw/gocov/gocov@latest

	echo Running: ../../.github/citools/go/go-test-cover-report
	time ../../.github/citools/go/go-test-cover-report

	print_ruler

	if [[ -f benchstat-new.txt ]]; then
		echo mv -v benchstat-{new,old}.txt
		mv -v benchstat-{new,old}.txt
		printf "\n"
	fi

	echo gotest -v --run=xxx --bench . --benchmem '|&' tee benchstat-new.txt
	time gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt

	print_ruler

	echo gotest -v -tags bonus
	time gotest -v -tags bonus

	print_ruler

	if [[ -f benchstat-old.txt ]] && [[ -f benchstat-new.txt ]]; then

		# go install golang.org/x/perf/cmd/benchstat@latest

		echo benchstat benchstat-{old,new}.txt
		time benchstat benchstat-{old,new}.txt

	else

		printf "No old benchmarks to run benchstat against.\n"

	fi

	print_ruler

	# go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest

	for package in "${packages[@]}"; do
		echo gomarkdoc --output "${package}"-doc.md
		time gomarkdoc --output "${package}"-doc.md
	done

	print_ruler

	for package in "${packages[@]}"; do
		echo go doc -all "${package}"
		time go doc -all "${package}" |& tee "${package}"-doc.txt
		printf "\n"
	done

	print_ruler
} # main()

time main "$@" |& tee ./run-tests-go.txt
