Running automated test file(s):

Go packages: lsproduct 


===============================================================================

Running: ../../.github/citools/go/go-lint-golangci-lint

Running GoLangCi-Lint

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.023s
user	0m0.015s
sys	0m0.020s


 ==============================================================================

Running: golangci-lint run --enable-all ./...

level=warning msg="[runner] The linter 'ifshort' is deprecated (since v1.48.0) due to: The repository of the linter has been deprecated by the owner. "
level=warning msg="[runner] The linter 'exhaustivestruct' is deprecated (since v1.46.0) due to: The owner seems to have abandoned the linter. Replaced by exhaustruct."
level=warning msg="[runner] The linter 'scopelint' is deprecated (since v1.39.0) due to: The repository of the linter has been deprecated by the owner. Replaced by exportloopref."
level=warning msg="[runner] The linter 'varcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'nosnakecase' is deprecated (since v1.48.1) due to: The repository of the linter has been deprecated by the owner. Replaced by revive(var-naming)."
level=warning msg="[runner] The linter 'deadcode' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'golint' is deprecated (since v1.41.0) due to: The repository of the linter has been archived by the owner. Replaced by revive."
level=warning msg="[runner] The linter 'structcheck' is deprecated (since v1.49.0) due to: The owner seems to have abandoned the linter. Replaced by unused."
level=warning msg="[runner] The linter 'maligned' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'."
level=warning msg="[runner] The linter 'interfacer' is deprecated (since v1.38.0) due to: The repository of the linter has been archived by the owner. "
largest_series_product_test.go:32:24: Error return value is not checked (errcheck)
			LargestSeriesProduct(test.digits, test.span)
			                    ^
largest_series_product.go:13: Function 'LargestSeriesProduct' is too long (67 > 60) (funlen)
func LargestSeriesProduct(digits string, span int) (int64, error) {
largest_series_product_test.go:8:40: Using the variable on range scope `tc` in function literal (scopelint)
			actual, err := LargestSeriesProduct(tc.digits, tc.span)
			                                    ^
largest_series_product_test.go:9:7: Using the variable on range scope `tc` in function literal (scopelint)
			if tc.error == "" {
			   ^
largest_series_product_test.go:12:76: Using the variable on range scope `tc` in function literal (scopelint)
					t.Errorf("LargestSeriesProduct(%q, %d) returned error: %v\nwant: %d", tc.digits, tc.span, err, tc.expected)
					                                                                      ^
largest_series_product.go:34:2: if statements should only be cuddled with assignments (wsl)
	if !match {
	^
largest_series_product.go:42:2: if statements should only be cuddled with assignments (wsl)
	if match {
	^
largest_series_product.go:50:2: if statements should only be cuddled with assignments (wsl)
	if match {
	^
largest_series_product.go:55:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for len(digits) >= span {
	^
largest_series_product_test.go:30:2: for statements should only be cuddled with assignments used in the iteration (wsl)
	for i := 0; i < b.N; i++ {
	^
cases_test.go:6:5: testCases is a global variable (gochecknoglobals)
var testCases = []struct {
    ^
largest_series_product.go:15:13: err113: do not define dynamic errors, use wrapped static errors instead: "errors.New(\"span must not be negative\")" (goerr113)
		return 0, errors.New("span must not be negative")
		          ^
largest_series_product.go:19:13: err113: do not define dynamic errors, use wrapped static errors instead: "errors.New(\"span must be smaller than string length\")" (goerr113)
		return 0, errors.New("span must be smaller than string length")
		          ^
largest_series_product.go:35:13: err113: do not define dynamic errors, use wrapped static errors instead: "errors.New(\"digits input must only contain digits\")" (goerr113)
		return 0, errors.New("digits input must only contain digits")
		          ^
largest_series_product_test.go:5:1: Function TestLargestSeriesProduct missing the call to method parallel (paralleltest)
func TestLargestSeriesProduct(t *testing.T) {
^
largest_series_product_test.go:6:2: Range statement for test TestLargestSeriesProduct missing the call to method parallel in test Run (paralleltest)
	for _, tc := range testCases {
	^
cases_test.go:1:9: package should be `lsproduct_test` instead of `lsproduct` (testpackage)
package lsproduct
        ^
largest_series_product_examples_test.go:1:9: package should be `lsproduct_test` instead of `lsproduct` (testpackage)
package lsproduct
        ^
largest_series_product_test.go:1:9: package should be `lsproduct_test` instead of `lsproduct` (testpackage)
package lsproduct
        ^
largest_series_product.go:30:2: variable name 'e' is too short for the scope of its usage (varnamelen)
	match, e := regexp.MatchString(`^[[:digit:]]+$`, digits)
	^
largest_series_product.go:32:13: error returned from external package is unwrapped: sig: func regexp.MatchString(pattern string, s string) (matched bool, err error) (wrapcheck)
		return 0, e
		          ^
largest_series_product.go:40:13: error returned from external package is unwrapped: sig: func regexp.MatchString(pattern string, s string) (matched bool, err error) (wrapcheck)
		return 0, e
		          ^
largest_series_product.go:48:13: error returned from external package is unwrapped: sig: func regexp.MatchString(pattern string, s string) (matched bool, err error) (wrapcheck)
		return 0, e
		          ^
largest_series_product.go:61:15: error returned from external package is unwrapped: sig: func strconv.Atoi(s string) (int, error) (wrapcheck)
				return 0, e
				          ^

real	0m0.562s
user	0m0.775s
sys	0m0.531s


 ==============================================================================

Exit code: -1

real	0m0.596s
user	0m0.799s
sys	0m0.556s

real	0m0.598s
user	0m0.801s
sys	0m0.556s

===============================================================================

Running: ../../.github/citools/go/go-lint-revive

Running Go Lint Revive

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.020s
user	0m0.019s
sys	0m0.014s


 ==============================================================================

Running: revive -formatter=stylish ./...


real	0m0.060s
user	0m0.036s
sys	0m0.038s


 ==============================================================================

Exit code: 0

real	0m0.091s
user	0m0.060s
sys	0m0.063s

real	0m0.094s
user	0m0.061s
sys	0m0.064s

===============================================================================

Running: ../../.github/citools/go/go-lint-ineffassign
../run-tests: line 41: .github/citools/go/go-lint-ineffassign: No such file or directory

real	0m0.001s
user	0m0.000s
sys	0m0.000s

===============================================================================

Running: ../../.github/citools/go/go-lint-go-consistent

Running Go go-consistent

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.021s
user	0m0.015s
sys	0m0.017s


 ==============================================================================

Running: go-consistent -v ./...

	info: check "./."
internal error: package "errors" without types was imported from "lsproduct"

real	0m0.076s
user	0m0.109s
sys	0m0.080s


 ==============================================================================

Exit code: -1

real	0m0.109s
user	0m0.130s
sys	0m0.109s

real	0m0.112s
user	0m0.133s
sys	0m0.109s

===============================================================================

Running: ../../.github/citools/go/go-lint-staticcheck

Running Go StaticCheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.024s
user	0m0.015s
sys	0m0.024s


 ==============================================================================

Running: staticcheck -checks=all ./...


real	0m0.190s
user	0m0.221s
sys	0m0.127s


 ==============================================================================

Exit code: 0

real	0m0.225s
user	0m0.240s
sys	0m0.162s

real	0m0.227s
user	0m0.241s
sys	0m0.163s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocritic

Running Go gocritic

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.019s
user	0m0.016s
sys	0m0.017s


 ==============================================================================

Running: gocritic check -enableAll ./...

./largest_series_product.go:22:5: emptyStringTest: replace `len(digits) == 0` with `digits == ""`

real	0m0.835s
user	0m1.965s
sys	0m0.284s


 ==============================================================================

Exit code: -1

real	0m0.876s
user	0m1.992s
sys	0m0.317s

real	0m0.879s
user	0m1.993s
sys	0m0.319s

===============================================================================

Running: ../../.github/citools/go/go-lint-go_vet

Running Go Vet

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.019s
user	0m0.020s
sys	0m0.012s


 ==============================================================================

Running: go vet ./...


real	0m0.077s
user	0m0.118s
sys	0m0.084s


 ==============================================================================

Exit code: 0

real	0m0.105s
user	0m0.143s
sys	0m0.105s

real	0m0.107s
user	0m0.143s
sys	0m0.107s

===============================================================================

Running: ../../.github/citools/go/go-fixer-go_fix

Running go fix

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.023s
user	0m0.012s
sys	0m0.022s


 ==============================================================================

Running: go fix ./...


real	0m0.027s
user	0m0.020s
sys	0m0.026s


 ==============================================================================

Exit code: 0

real	0m0.062s
user	0m0.038s
sys	0m0.059s

real	0m0.063s
user	0m0.039s
sys	0m0.060s

===============================================================================

Running: ../../.github/citools/go/go-lint-errcheck

Running Go errcheck

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.030s
user	0m0.018s
sys	0m0.033s


 ==============================================================================

Running: errcheck ./...

largest_series_product_test.go:32:24:	LargestSeriesProduct(test.digits, test.span)

real	0m0.469s
user	0m1.394s
sys	0m0.311s


 ==============================================================================

Exit code: -1

real	0m0.510s
user	0m1.414s
sys	0m0.356s

real	0m0.512s
user	0m1.414s
sys	0m0.358s

===============================================================================

Running: ../../.github/citools/go/go-lint-gocyclo

Running Go gocyclo

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.021s
user	0m0.016s
sys	0m0.015s


 ==============================================================================

Running: gocyclo .

17 lsproduct LargestSeriesProduct largest_series_product.go:13:1
6 lsproduct TestLargestSeriesProduct largest_series_product_test.go:5:1
4 lsproduct BenchmarkLargestSeriesProduct largest_series_product_test.go:26:1
1 lsproduct ExampleLargestSeriesProduct largest_series_product_examples_test.go:7:1

real	0m0.004s
user	0m0.004s
sys	0m0.000s


 ==============================================================================

Exit code: 0

real	0m0.036s
user	0m0.027s
sys	0m0.023s

real	0m0.038s
user	0m0.028s
sys	0m0.024s

===============================================================================

Running: ../../.github/citools/go/go-lint-misspell

Running Go misspell

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: misspell .


real	0m0.028s
user	0m0.030s
sys	0m0.014s


 ==============================================================================

Exit code: 0

real	0m0.041s
user	0m0.037s
sys	0m0.026s

real	0m0.045s
user	0m0.039s
sys	0m0.027s

===============================================================================

Running: ../../.github/citools/go/go-lint-gosec

Running Go GoSec

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.028s
user	0m0.021s
sys	0m0.022s


 ==============================================================================

Running: gosec ./...

[gosec] 2023/09/07 00:24:16 Including rules: default
[gosec] 2023/09/07 00:24:16 Excluding rules: default
[gosec] 2023/09/07 00:24:16 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/largest-series-product
[gosec] 2023/09/07 00:24:16 Checking package: lsproduct
[gosec] 2023/09/07 00:24:16 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/largest-series-product/largest_series_product.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 81
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.106s
user	0m0.115s
sys	0m0.093s


 ==============================================================================

Exit code: 0

real	0m0.151s
user	0m0.145s
sys	0m0.129s

real	0m0.153s
user	0m0.145s
sys	0m0.132s

===============================================================================

Running: ../../.github/citools/go/go-test-cover-report

Running Go Test, Coverage & Reports

Go version:

	go version go1.21.0 linux/amd64


 ==============================================================================

Running: go clean ./...


real	0m0.019s
user	0m0.014s
sys	0m0.020s


 ==============================================================================

Running: gotest -v -covermode=count -coverprofile coverage.out ./...

=== RUN   TestLargestSeriesProduct
=== RUN   TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number
=== RUN   TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero
=== RUN   TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero
=== RUN   TestLargestSeriesProduct/rejects_span_longer_than_string_length
=== RUN   TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span
=== RUN   TestLargestSeriesProduct/rejects_invalid_character_in_digits
=== RUN   TestLargestSeriesProduct/rejects_negative_span
--- PASS: TestLargestSeriesProduct (0.00s)
    --- PASS: TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_span_longer_than_string_length (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_invalid_character_in_digits (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_negative_span (0.00s)
=== RUN   ExampleLargestSeriesProduct
--- PASS: ExampleLargestSeriesProduct (0.00s)
PASS
coverage: 86.8% of statements
ok  	lsproduct	0.003s	coverage: 86.8% of statements

real	0m0.177s
user	0m0.269s
sys	0m0.153s


 ==============================================================================

Running: go tool cover -func=coverage.out

lsproduct/largest_series_product.go:13:	LargestSeriesProduct	86.8%
total:					(statements)		86.8%

real	0m0.053s
user	0m0.069s
sys	0m0.078s


 ==============================================================================

Running: go tool cover -html coverage.out -o coverage.html


real	0m0.054s
user	0m0.067s
sys	0m0.066s


 ==============================================================================

Running: cover_annotate

Running: gocov convert coverage.out | gocov annotate -ceiling=100 - | tee coverage-annotations.txt

13     	func LargestSeriesProduct(digits string, span int) (int64, error) {
14     		if span < 0 {
15     			return 0, errors.New("span must not be negative")
16     		}
17     	
18     		if span > len(digits) {
19     			return 0, errors.New("span must be smaller than string length")
20     		}
21     	
22     		if len(digits) == 0 {
23     			return 1, nil
24     		}
25     	
26     		if span == 0 && len(digits) > 0 {
27     			return 1, nil
28     		}
29     	
30     		match, e := regexp.MatchString(`^[[:digit:]]+$`, digits)
31     		if e != nil {
32 MISS			return 0, e
33     		}
34     		if !match {
35     			return 0, errors.New("digits input must only contain digits")
36     		}
37     	
38     		match, e = regexp.MatchString(`^0+$`, digits)
39     		if e != nil {
40 MISS			return 0, e
41     		}
42     		if match {
43     			return 0, nil
44     		}
45     	
46     		match, e = regexp.MatchString(`^1+$`, digits)
47     		if e != nil {
48 MISS			return 0, e
49     		}
50     		if match {
51 MISS			return 1, nil
52     		}
53     	
54     		var result int64
55     		for len(digits) >= span {
56     			numbers := []int64{}
57     	
58     			for _, digit := range digits[:span] {
59     				number, e := strconv.Atoi(string(digit))
60     				if e != nil {
61 MISS					return 0, e
62     				}
63     	
64     				numbers = append(numbers, int64(number))
65     			}
66     	
67     			digits = digits[1:]
68     	
69     			var product int64 = 1
70     	
71     			for _, n := range numbers {
72     				product *= n
73     			}
74     	
75     			if product > result {
76     				result = product
77     			}
78     		}
79     	
80     		return result, nil
81     	}


real	0m0.020s
user	0m0.015s
sys	0m0.021s

real	0m0.021s
user	0m0.015s
sys	0m0.021s


 ==============================================================================

Running: gotest -v -race -covermode=atomic ./...

=== RUN   TestLargestSeriesProduct
=== RUN   TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number
=== RUN   TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero
=== RUN   TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero
=== RUN   TestLargestSeriesProduct/rejects_span_longer_than_string_length
=== RUN   TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span
=== RUN   TestLargestSeriesProduct/rejects_invalid_character_in_digits
=== RUN   TestLargestSeriesProduct/rejects_negative_span
--- PASS: TestLargestSeriesProduct (0.00s)
    --- PASS: TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_span_longer_than_string_length (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_invalid_character_in_digits (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_negative_span (0.00s)
=== RUN   ExampleLargestSeriesProduct
--- PASS: ExampleLargestSeriesProduct (0.00s)
PASS
coverage: 86.8% of statements
ok  	lsproduct	1.019s	coverage: 86.8% of statements

real	0m1.254s
user	0m0.307s
sys	0m0.196s


 ==============================================================================

Exit code: 0

real	0m1.592s
user	0m0.749s
sys	0m0.546s

real	0m1.595s
user	0m0.750s
sys	0m0.547s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

gotest -v --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: lsproduct
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
BenchmarkLargestSeriesProduct
BenchmarkLargestSeriesProduct-8   	   18795	     63192 ns/op	   71693 B/op	    1226 allocs/op
PASS
ok  	lsproduct	1.837s

real	0m1.998s
user	0m2.124s
sys	0m0.222s

===============================================================================

gotest -v -tags bonus
=== RUN   TestLargestSeriesProduct
=== RUN   TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number
=== RUN   TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero
=== RUN   TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero
=== RUN   TestLargestSeriesProduct/rejects_span_longer_than_string_length
=== RUN   TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span
=== RUN   TestLargestSeriesProduct/rejects_invalid_character_in_digits
=== RUN   TestLargestSeriesProduct/rejects_negative_span
--- PASS: TestLargestSeriesProduct (0.00s)
    --- PASS: TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_span_longer_than_string_length (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_invalid_character_in_digits (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_negative_span (0.00s)
=== RUN   ExampleLargestSeriesProduct
--- PASS: ExampleLargestSeriesProduct (0.00s)
PASS
ok  	lsproduct	0.002s

real	0m0.136s
user	0m0.180s
sys	0m0.132s

===============================================================================

benchstat benchstat-old.txt benchstat-new.txt
benchstat-new.txt:5: missing iteration count
goos: linux
goarch: amd64
pkg: lsproduct
cpu: 12th Gen Intel(R) Core(TM) i5-1240P
                       │ benchstat-new.txt │
                       │      sec/op       │
LargestSeriesProduct-8        63.19µ ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

                       │ benchstat-new.txt │
                       │       B/op        │
LargestSeriesProduct-8       70.01Ki ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

                       │ benchstat-new.txt │
                       │     allocs/op     │
LargestSeriesProduct-8        1.226k ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
                       │ benchstat-old.txt │
                       │      sec/op       │
LargestSeriesProduct-4        249.7µ ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

                       │ benchstat-old.txt │
                       │       B/op        │
LargestSeriesProduct-4       71.25Ki ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

                       │ benchstat-old.txt │
                       │     allocs/op     │
LargestSeriesProduct-4        1.619k ± ∞ ¹
¹ need >= 6 samples for confidence interval at level 0.95

real	0m0.003s
user	0m0.000s
sys	0m0.003s

===============================================================================

gomarkdoc --output lsproduct-doc.md

real	0m0.008s
user	0m0.003s
sys	0m0.005s

===============================================================================

go doc -all lsproduct
package lsproduct // import "lsproduct"

Package lsproduct is used to calculate the largest product from a series of
numbers.

FUNCTIONS

func LargestSeriesProduct(digits string, span int) (int64, error)
    LargestSeriesProduct returns the largest product for a contiguous substring
    of digits of length n.


real	0m0.033s
user	0m0.020s
sys	0m0.027s


===============================================================================

