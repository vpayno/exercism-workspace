Running automated test file(s):

Go packages: lsproduct 


===============================================================================

golint lsproduct

real	0m0.162s
user	0m0.152s
sys	0m0.155s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out lsproduct
=== RUN   TestLargestSeriesProduct
=== RUN   TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number
=== RUN   TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero
=== RUN   TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero
=== RUN   TestLargestSeriesProduct/rejects_span_longer_than_string_length
=== RUN   TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span
=== RUN   TestLargestSeriesProduct/rejects_invalid_character_in_digits
=== RUN   TestLargestSeriesProduct/rejects_negative_span
--- PASS: TestLargestSeriesProduct (0.00s)
    --- PASS: TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_span_longer_than_string_length (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_invalid_character_in_digits (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_negative_span (0.00s)
=== RUN   ExampleLargestSeriesProduct
--- PASS: ExampleLargestSeriesProduct (0.00s)
PASS
coverage: 86.8% of statements
ok  	lsproduct	0.039s	coverage: 86.8% of statements

real	0m0.687s
user	0m0.764s
sys	0m0.536s

===============================================================================

go tool cover -func=coverage.out
lsproduct/largest_series_product.go:13:	LargestSeriesProduct	86.8%
total:					(statements)		86.8%

real	0m0.274s
user	0m0.228s
sys	0m0.224s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.207s
user	0m0.212s
sys	0m0.210s

===============================================================================

go test -v -race -covermode=atomic lsproduct
=== RUN   TestLargestSeriesProduct
=== RUN   TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_2
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_3
=== RUN   TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order
=== RUN   TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number
=== RUN   TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero
=== RUN   TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero
=== RUN   TestLargestSeriesProduct/rejects_span_longer_than_string_length
=== RUN   TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span)
=== RUN   TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span
=== RUN   TestLargestSeriesProduct/rejects_invalid_character_in_digits
=== RUN   TestLargestSeriesProduct/rejects_negative_span
--- PASS: TestLargestSeriesProduct (0.02s)
    --- PASS: TestLargestSeriesProduct/finds_the_largest_product_if_span_equals_length (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_2 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_3 (0.00s)
    --- PASS: TestLargestSeriesProduct/can_find_the_largest_product_of_5_with_numbers_in_order (0.00s)
    --- PASS: TestLargestSeriesProduct/can_get_the_largest_product_of_a_big_number (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_the_only_digits_are_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_zero_if_all_spans_include_zero (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_span_longer_than_string_length (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_empty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/reports_1_for_nonempty_string_and_empty_product_(0_span) (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_empty_string_and_nonzero_span (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_invalid_character_in_digits (0.00s)
    --- PASS: TestLargestSeriesProduct/rejects_negative_span (0.00s)
=== RUN   ExampleLargestSeriesProduct
--- PASS: ExampleLargestSeriesProduct (0.01s)
PASS
coverage: 86.8% of statements
ok  	lsproduct	0.085s	coverage: 86.8% of statements

real	0m0.858s
user	0m0.919s
sys	0m0.649s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: lsproduct
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkLargestSeriesProduct-4   	    5664	    249738 ns/op	   72955 B/op	    1619 allocs/op
PASS
ok  	lsproduct	2.347s

real	0m2.953s
user	0m4.142s
sys	0m0.826s

===============================================================================

go test -tags bonus
PASS
ok  	lsproduct	0.007s

real	0m0.494s
user	0m0.563s
sys	0m0.410s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet lsproduct

real	0m0.512s
user	0m0.533s
sys	0m0.392s

===============================================================================

go fix lsproduct

real	0m0.132s
user	0m0.122s
sys	0m0.147s

===============================================================================

gosec ./largest-series-product
[gosec] 2022/07/19 23:05:55 Including rules: default
[gosec] 2022/07/19 23:05:55 Excluding rules: default
[gosec] 2022/07/19 23:05:55 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/largest-series-product
2022/07/19 23:05:55 internal error: package "errors" without types was imported from "command-line-arguments"

real	0m0.433s
user	0m0.458s
sys	0m0.329s

===============================================================================

gomarkdoc --output lsproduct-doc.md

real	0m0.026s
user	0m0.019s
sys	0m0.012s

===============================================================================

go doc -all lsproduct
package lsproduct // import "lsproduct"

Package lsproduct is used to calculate the largest product from a series of
numbers.

FUNCTIONS

func LargestSeriesProduct(digits string, span int) (int64, error)
    LargestSeriesProduct returns the largest product for a contiguous substring
    of digits of length n.


real	0m0.206s
user	0m0.193s
sys	0m0.212s


===============================================================================

