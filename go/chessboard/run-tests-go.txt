Running automated test file(s):

Go packages: chessboard 


===============================================================================

golint chessboard

real	0m0.114s
user	0m0.115s
sys	0m0.096s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out chessboard
=== RUN   TestCountInRank
--- PASS: TestCountInRank (0.00s)
=== RUN   TestCountInFile
--- PASS: TestCountInFile (0.00s)
=== RUN   TestCountAll
--- PASS: TestCountAll (0.00s)
=== RUN   TestCountOccupied
--- PASS: TestCountOccupied (0.00s)
=== RUN   ExampleCountInRank
--- PASS: ExampleCountInRank (0.00s)
=== RUN   ExampleCountInFile
--- PASS: ExampleCountInFile (0.00s)
=== RUN   ExampleCountAll
--- PASS: ExampleCountAll (0.00s)
=== RUN   ExampleCountOccupied
--- PASS: ExampleCountOccupied (0.00s)
PASS
coverage: 100.0% of statements
ok  	chessboard	0.021s	coverage: 100.0% of statements

real	0m1.084s
user	0m1.476s
sys	0m0.879s

===============================================================================

go tool cover -func=coverage.out
chessboard/chessboard.go:11:	CountInRank	100.0%
chessboard/chessboard.go:25:	CountInFile	100.0%
chessboard/chessboard.go:38:	CountAll	100.0%
chessboard/chessboard.go:51:	CountOccupied	100.0%
total:				(statements)	100.0%

real	0m0.107s
user	0m0.088s
sys	0m0.089s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.105s
user	0m0.054s
sys	0m0.111s

===============================================================================

go test -v -race -covermode=atomic chessboard
=== RUN   TestCountInRank
--- PASS: TestCountInRank (0.00s)
=== RUN   TestCountInFile
--- PASS: TestCountInFile (0.00s)
=== RUN   TestCountAll
--- PASS: TestCountAll (0.00s)
=== RUN   TestCountOccupied
--- PASS: TestCountOccupied (0.00s)
=== RUN   ExampleCountInRank
--- PASS: ExampleCountInRank (0.00s)
=== RUN   ExampleCountInFile
--- PASS: ExampleCountInFile (0.00s)
=== RUN   ExampleCountAll
--- PASS: ExampleCountAll (0.00s)
=== RUN   ExampleCountOccupied
--- PASS: ExampleCountOccupied (0.00s)
PASS
coverage: 100.0% of statements
ok  	chessboard	0.071s	coverage: 100.0% of statements

real	0m1.588s
user	0m2.138s
sys	0m0.701s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
PASS
ok  	chessboard	0.041s

real	0m0.933s
user	0m1.219s
sys	0m0.706s

===============================================================================

go test -tags bonus
PASS
ok  	chessboard	0.010s

real	0m0.794s
user	0m1.054s
sys	0m0.651s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet chessboard

real	0m0.524s
user	0m0.717s
sys	0m0.536s

===============================================================================

go fix chessboard

real	0m0.057s
user	0m0.044s
sys	0m0.039s

===============================================================================

gosec ./chessboard
[gosec] 2022/07/28 07:57:01 Including rules: default
[gosec] 2022/07/28 07:57:01 Excluding rules: default
[gosec] 2022/07/28 07:57:01 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/chessboard
[gosec] 2022/07/28 07:57:01 Checking package: chessboard
[gosec] 2022/07/28 07:57:01 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/chessboard/chessboard.go
Results:


Summary:
   Files: 1
   Lines: 63
   Nosec: 0
  Issues: 0


real	0m0.357s
user	0m0.411s
sys	0m0.208s

===============================================================================

gomarkdoc --output chessboard-doc.md

real	0m0.039s
user	0m0.025s
sys	0m0.019s

===============================================================================

go doc -all chessboard
package chessboard // import "chessboard"


FUNCTIONS

func CountAll(cb Chessboard) int
    CountAll should count how many squares are present in the chessboard

func CountInFile(cb Chessboard, file int) int
    CountInFile returns how many squares are occupied in the chessboard, within
    the given file

func CountInRank(cb Chessboard, rank string) int
    CountInRank returns how many squares are occupied in the chessboard, within
    the given rank

func CountOccupied(cb Chessboard) int
    CountOccupied returns how many squares are occupied in the chessboard


TYPES

type Chessboard map[string]Rank
    Chessboard contains a map of eight Ranks, accessed with keys from "A" to "H"

type Rank []bool
    Rank stores if a square is occupied by a piece - this will be a slice of
    bools


real	0m0.156s
user	0m0.070s
sys	0m0.138s


===============================================================================

