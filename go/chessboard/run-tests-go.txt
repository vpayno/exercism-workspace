Running automated test file(s):

Go packages: chessboard 


===============================================================================

golint chessboard

real	0m0.080s
user	0m0.074s
sys	0m0.065s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out chessboard
=== RUN   TestCountInRank
--- PASS: TestCountInRank (0.00s)
=== RUN   TestCountInFile
--- PASS: TestCountInFile (0.00s)
=== RUN   TestCountAll
--- PASS: TestCountAll (0.00s)
=== RUN   TestCountOccupied
--- PASS: TestCountOccupied (0.00s)
=== RUN   ExampleCountInRank
--- PASS: ExampleCountInRank (0.00s)
=== RUN   ExampleCountInFile
--- PASS: ExampleCountInFile (0.00s)
=== RUN   ExampleCountAll
--- PASS: ExampleCountAll (0.00s)
=== RUN   ExampleCountOccupied
--- PASS: ExampleCountOccupied (0.00s)
PASS
coverage: 100.0% of statements
ok  	chessboard	0.004s	coverage: 100.0% of statements

real	0m0.663s
user	0m0.733s
sys	0m0.534s

===============================================================================

go tool cover -func=coverage.out
chessboard/chessboard.go:11:	CountInRank	100.0%
chessboard/chessboard.go:25:	CountInFile	100.0%
chessboard/chessboard.go:38:	CountAll	100.0%
chessboard/chessboard.go:51:	CountOccupied	100.0%
total:				(statements)	100.0%

real	0m0.112s
user	0m0.049s
sys	0m0.108s

===============================================================================

go test -v -race -covermode=atomic chessboard
=== RUN   TestCountInRank
--- PASS: TestCountInRank (0.00s)
=== RUN   TestCountInFile
--- PASS: TestCountInFile (0.00s)
=== RUN   TestCountAll
--- PASS: TestCountAll (0.00s)
=== RUN   TestCountOccupied
--- PASS: TestCountOccupied (0.00s)
=== RUN   ExampleCountInRank
--- PASS: ExampleCountInRank (0.00s)
=== RUN   ExampleCountInFile
--- PASS: ExampleCountInFile (0.00s)
=== RUN   ExampleCountAll
--- PASS: ExampleCountAll (0.00s)
=== RUN   ExampleCountOccupied
--- PASS: ExampleCountOccupied (0.00s)
PASS
coverage: 100.0% of statements
ok  	chessboard	0.038s	coverage: 100.0% of statements

real	0m0.750s
user	0m0.874s
sys	0m0.456s

===============================================================================

go test --bench . --benchmem
PASS
ok  	chessboard	0.015s

real	0m0.682s
user	0m0.768s
sys	0m0.539s

===============================================================================

go test -tags bonus
PASS
ok  	chessboard	0.014s

real	0m0.511s
user	0m0.565s
sys	0m0.426s

===============================================================================

go vet chessboard

real	0m0.427s
user	0m0.548s
sys	0m0.361s

===============================================================================

go fix chessboard

real	0m0.047s
user	0m0.028s
sys	0m0.029s

===============================================================================

gosec ./chessboard
[gosec] 2022/06/20 23:52:41 Including rules: default
[gosec] 2022/06/20 23:52:41 Excluding rules: default
[gosec] 2022/06/20 23:52:41 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/chessboard
[gosec] 2022/06/20 23:52:41 Checking package: chessboard
[gosec] 2022/06/20 23:52:41 Checking file: /home/vpayno/git_vpayno/exercism-workspace/go/chessboard/chessboard.go
Results:


[1;36mSummary:[0m
  Gosec  : dev
  Files  : 1
  Lines  : 63
  Nosec  : 0
  Issues : [1;32m0[0m


real	0m0.273s
user	0m0.304s
sys	0m0.230s

===============================================================================

gomarkdoc --output chessboard-doc.md

real	0m0.039s
user	0m0.026s
sys	0m0.022s

===============================================================================

go doc -all chessboard
package chessboard // import "chessboard"


FUNCTIONS

func CountAll(cb Chessboard) int
    CountAll should count how many squares are present in the chessboard

func CountInFile(cb Chessboard, file int) int
    CountInFile returns how many squares are occupied in the chessboard, within
    the given file

func CountInRank(cb Chessboard, rank string) int
    CountInRank returns how many squares are occupied in the chessboard, within
    the given rank

func CountOccupied(cb Chessboard) int
    CountOccupied returns how many squares are occupied in the chessboard


TYPES

type Chessboard map[string]Rank
    Chessboard contains a map of eight Ranks, accessed with keys from "A" to "H"

type Rank []bool
    Rank stores if a square is occupied by a piece - this will be a slice of
    bools


real	0m0.155s
user	0m0.052s
sys	0m0.124s


===============================================================================

