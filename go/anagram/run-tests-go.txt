Running automated test file(s):

Go packages: anagram 


===============================================================================

golint anagram

real	0m0.193s
user	0m0.147s
sys	0m0.172s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out anagram
=== RUN   TestDetectAnagrams
    anagram_test.go:31: PASS: no matches
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: does not detect anagram subsets
    anagram_test.go:31: PASS: detects anagram
    anagram_test.go:31: PASS: detects three anagrams
    anagram_test.go:31: PASS: does not detect non-anagrams with identical checksum
    anagram_test.go:31: PASS: detects anagrams case-insensitively
    anagram_test.go:31: PASS: detects anagrams using case-insensitive subject
    anagram_test.go:31: PASS: detects anagrams using case-insensitive possible matches
    anagram_test.go:31: PASS: does not detect a anagram if the original word is repeated
    anagram_test.go:31: PASS: anagrams must use all letters exactly once
    anagram_test.go:31: PASS: words are not anagrams of themselves (case-insensitive)
--- PASS: TestDetectAnagrams (0.00s)
=== RUN   ExampleDetect
--- PASS: ExampleDetect (0.00s)
PASS
coverage: 100.0% of statements
ok  	anagram	0.019s	coverage: 100.0% of statements

real	0m0.694s
user	0m0.727s
sys	0m0.504s

===============================================================================

go tool cover -func=coverage.out
anagram/anagram.go:10:	Detect		100.0%
total:			(statements)	100.0%

real	0m0.171s
user	0m0.128s
sys	0m0.162s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.159s
user	0m0.131s
sys	0m0.154s

===============================================================================

go test -v -race -covermode=atomic anagram
=== RUN   TestDetectAnagrams
    anagram_test.go:31: PASS: no matches
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: does not detect anagram subsets
    anagram_test.go:31: PASS: detects anagram
    anagram_test.go:31: PASS: detects three anagrams
    anagram_test.go:31: PASS: does not detect non-anagrams with identical checksum
    anagram_test.go:31: PASS: detects anagrams case-insensitively
    anagram_test.go:31: PASS: detects anagrams using case-insensitive subject
    anagram_test.go:31: PASS: detects anagrams using case-insensitive possible matches
    anagram_test.go:31: PASS: does not detect a anagram if the original word is repeated
    anagram_test.go:31: PASS: anagrams must use all letters exactly once
    anagram_test.go:31: PASS: words are not anagrams of themselves (case-insensitive)
--- PASS: TestDetectAnagrams (0.01s)
=== RUN   ExampleDetect
--- PASS: ExampleDetect (0.00s)
PASS
coverage: 100.0% of statements
ok  	anagram	0.032s	coverage: 100.0% of statements

real	0m0.657s
user	0m0.698s
sys	0m0.458s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: anagram
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkDetectAnagrams-4   	   20246	     50322 ns/op	    6848 B/op	     155 allocs/op
PASS
ok  	anagram	1.662s

real	0m2.104s
user	0m2.389s
sys	0m0.451s

===============================================================================

go test -tags bonus
PASS
ok  	anagram	0.009s

real	0m0.533s
user	0m0.615s
sys	0m0.504s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet anagram

real	0m0.468s
user	0m0.485s
sys	0m0.460s

===============================================================================

go fix anagram

real	0m0.125s
user	0m0.100s
sys	0m0.108s

===============================================================================

gosec ./anagram
[gosec] 2022/06/29 21:19:49 Including rules: default
[gosec] 2022/06/29 21:19:49 Excluding rules: default
[gosec] 2022/06/29 21:19:49 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/anagram
2022/06/29 21:19:50 internal error: package "sort" without types was imported from "command-line-arguments"

real	0m0.500s
user	0m0.509s
sys	0m0.419s

===============================================================================

gomarkdoc --output anagram-doc.md

real	0m0.055s
user	0m0.029s
sys	0m0.020s

===============================================================================

go doc -all anagram
package anagram // import "anagram"

Package anagram is a rearrangement of letters to form a new word.

FUNCTIONS

func Detect(subject string, candidates []string) []string
    Detect returns a string slice anagram of the passed string.


real	0m0.201s
user	0m0.147s
sys	0m0.184s


===============================================================================

