Running automated test file(s):

Go packages: anagram 


===============================================================================

golint anagram

real	0m0.362s
user	0m0.388s
sys	0m0.275s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out anagram
=== RUN   TestDetectAnagrams
    anagram_test.go:31: PASS: no matches
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: does not detect anagram subsets
    anagram_test.go:31: PASS: detects anagram
    anagram_test.go:31: PASS: detects three anagrams
    anagram_test.go:31: PASS: detects multiple anagrams with different case
    anagram_test.go:31: PASS: does not detect non-anagrams with identical checksum
    anagram_test.go:31: PASS: detects anagrams case-insensitively
    anagram_test.go:31: PASS: detects anagrams using case-insensitive subject
    anagram_test.go:31: PASS: detects anagrams using case-insensitive possible matches
    anagram_test.go:31: PASS: does not detect an anagram if the original word is repeated
    anagram_test.go:31: PASS: anagrams must use all letters exactly once
    anagram_test.go:31: PASS: words are not anagrams of themselves
    anagram_test.go:31: PASS: words are not anagrams of themselves even if letter case is partially different
    anagram_test.go:31: PASS: words are not anagrams of themselves even if letter case is completely different
    anagram_test.go:31: PASS: words other than themselves can be anagrams
--- PASS: TestDetectAnagrams (0.00s)
=== RUN   ExampleDetect
--- PASS: ExampleDetect (0.00s)
PASS
coverage: 100.0% of statements
ok  	anagram	0.025s	coverage: 100.0% of statements

real	0m1.347s
user	0m1.470s
sys	0m0.918s

===============================================================================

go tool cover -func=coverage.out
anagram/anagram.go:10:	Detect		100.0%
total:			(statements)	100.0%

real	0m0.435s
user	0m0.354s
sys	0m0.405s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.466s
user	0m0.396s
sys	0m0.414s

===============================================================================

go test -v -race -covermode=atomic anagram
=== RUN   TestDetectAnagrams
    anagram_test.go:31: PASS: no matches
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: detects two anagrams
    anagram_test.go:31: PASS: does not detect anagram subsets
    anagram_test.go:31: PASS: detects anagram
    anagram_test.go:31: PASS: detects three anagrams
    anagram_test.go:31: PASS: detects multiple anagrams with different case
    anagram_test.go:31: PASS: does not detect non-anagrams with identical checksum
    anagram_test.go:31: PASS: detects anagrams case-insensitively
    anagram_test.go:31: PASS: detects anagrams using case-insensitive subject
    anagram_test.go:31: PASS: detects anagrams using case-insensitive possible matches
    anagram_test.go:31: PASS: does not detect an anagram if the original word is repeated
    anagram_test.go:31: PASS: anagrams must use all letters exactly once
    anagram_test.go:31: PASS: words are not anagrams of themselves
    anagram_test.go:31: PASS: words are not anagrams of themselves even if letter case is partially different
    anagram_test.go:31: PASS: words are not anagrams of themselves even if letter case is completely different
    anagram_test.go:31: PASS: words other than themselves can be anagrams
--- PASS: TestDetectAnagrams (0.01s)
=== RUN   ExampleDetect
--- PASS: ExampleDetect (0.00s)
PASS
coverage: 100.0% of statements
ok  	anagram	0.066s	coverage: 100.0% of statements

real	0m1.731s
user	0m2.104s
sys	0m0.986s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: anagram
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkDetectAnagrams-4   	    8602	    125075 ns/op	    8432 B/op	     203 allocs/op
PASS
ok  	anagram	1.187s

real	0m2.098s
user	0m2.849s
sys	0m0.864s

===============================================================================

go test -tags bonus
PASS
ok  	anagram	0.005s

real	0m1.182s
user	0m1.766s
sys	0m0.786s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m4.355s
user	0m1.146s
sys	0m0.652s

benchstat benchstat-old.txt benchstat-new.txt
name              old time/op    new time/op    delta
DetectAnagrams-4    50.3µs ± 0%   125.1µs ± 0%   ~     (p=1.000 n=1+1)

name              old alloc/op   new alloc/op   delta
DetectAnagrams-4    6.85kB ± 0%    8.43kB ± 0%   ~     (p=1.000 n=1+1)

name              old allocs/op  new allocs/op  delta
DetectAnagrams-4       155 ± 0%       203 ± 0%   ~     (p=1.000 n=1+1)

real	0m0.035s
user	0m0.016s
sys	0m0.021s

===============================================================================

go vet anagram

real	0m0.722s
user	0m0.828s
sys	0m0.612s

===============================================================================

go fix anagram

real	0m0.283s
user	0m0.273s
sys	0m0.219s

===============================================================================

gosec ./anagram
[gosec] 2022/07/30 13:56:04 Including rules: default
[gosec] 2022/07/30 13:56:04 Excluding rules: default
[gosec] 2022/07/30 13:56:04 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/anagram
2022/07/30 13:56:05 internal error: package "sort" without types was imported from "command-line-arguments"

real	0m1.107s
user	0m1.251s
sys	0m0.730s

===============================================================================

gomarkdoc --output anagram-doc.md

real	0m0.042s
user	0m0.032s
sys	0m0.018s

===============================================================================

go doc -all anagram
package anagram // import "anagram"

Package anagram is a rearrangement of letters to form a new word.

FUNCTIONS

func Detect(subject string, candidates []string) []string
    Detect returns a string slice anagram of the passed string.


real	0m0.300s
user	0m0.242s
sys	0m0.280s


===============================================================================

