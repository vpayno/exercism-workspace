Running automated test file(s):

Go packages: gigasecond 


===============================================================================

golint gigasecond

real	0m0.276s
user	0m0.355s
sys	0m0.252s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out gigasecond
=== RUN   TestAddGigasecond
=== RUN   TestAddGigasecond/date_only_specification_of_time
=== RUN   TestAddGigasecond/second_test_for_date_only_specification_of_time
=== RUN   TestAddGigasecond/third_test_for_date_only_specification_of_time
=== RUN   TestAddGigasecond/full_time_specified
=== RUN   TestAddGigasecond/full_time_with_day_roll-over
--- PASS: TestAddGigasecond (0.00s)
    --- PASS: TestAddGigasecond/date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/second_test_for_date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/third_test_for_date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/full_time_specified (0.00s)
    --- PASS: TestAddGigasecond/full_time_with_day_roll-over (0.00s)
=== RUN   ExampleAddGigasecond
--- PASS: ExampleAddGigasecond (0.00s)
PASS
coverage: 100.0% of statements
ok  	gigasecond	0.015s	coverage: 100.0% of statements

real	0m1.037s
user	0m1.353s
sys	0m0.832s

===============================================================================

go tool cover -func=coverage.out
gigasecond/gigasecond.go:10:	AddGigasecond	100.0%
total:				(statements)	100.0%

real	0m0.400s
user	0m0.325s
sys	0m0.363s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.434s
user	0m0.365s
sys	0m0.376s

===============================================================================

go test -v -race -covermode=atomic gigasecond
=== RUN   TestAddGigasecond
=== RUN   TestAddGigasecond/date_only_specification_of_time
=== RUN   TestAddGigasecond/second_test_for_date_only_specification_of_time
=== RUN   TestAddGigasecond/third_test_for_date_only_specification_of_time
=== RUN   TestAddGigasecond/full_time_specified
=== RUN   TestAddGigasecond/full_time_with_day_roll-over
--- PASS: TestAddGigasecond (0.01s)
    --- PASS: TestAddGigasecond/date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/second_test_for_date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/third_test_for_date_only_specification_of_time (0.00s)
    --- PASS: TestAddGigasecond/full_time_specified (0.00s)
    --- PASS: TestAddGigasecond/full_time_with_day_roll-over (0.00s)
=== RUN   ExampleAddGigasecond
--- PASS: ExampleAddGigasecond (0.00s)
PASS
coverage: 100.0% of statements
ok  	gigasecond	0.058s	coverage: 100.0% of statements

real	0m1.128s
user	0m1.377s
sys	0m0.812s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: gigasecond
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkAddGigasecond-4   	12006235	        88.64 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	gigasecond	1.248s

real	0m2.174s
user	0m2.373s
sys	0m0.731s

===============================================================================

go test -tags bonus
PASS
ok  	gigasecond	0.011s

real	0m0.989s
user	0m1.159s
sys	0m0.726s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m1.122s
user	0m1.280s
sys	0m0.706s

benchstat benchstat-old.txt benchstat-new.txt
name             old time/op    new time/op    delta
AddGigasecond-4    89.4ns ± 0%    88.6ns ± 0%   ~     (p=1.000 n=1+1)

name             old alloc/op   new alloc/op   delta
AddGigasecond-4     0.00B          0.00B        ~     (all equal)

name             old allocs/op  new allocs/op  delta
AddGigasecond-4      0.00           0.00        ~     (all equal)

real	0m0.063s
user	0m0.030s
sys	0m0.035s

===============================================================================

go vet gigasecond

real	0m0.672s
user	0m0.871s
sys	0m0.650s

===============================================================================

go fix gigasecond

real	0m0.181s
user	0m0.227s
sys	0m0.168s

===============================================================================

gosec ./gigasecond
[gosec] 2022/07/27 12:39:39 Including rules: default
[gosec] 2022/07/27 12:39:39 Excluding rules: default
[gosec] 2022/07/27 12:39:39 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/gigasecond
2022/07/27 12:39:39 internal error: package "time" without types was imported from "command-line-arguments"

real	0m0.700s
user	0m0.857s
sys	0m0.519s

===============================================================================

gomarkdoc --output gigasecond-doc.md

real	0m0.074s
user	0m0.041s
sys	0m0.046s

===============================================================================

go doc -all gigasecond
package gigasecond // import "gigasecond"

Package gigasecond determines the time now plus 1 gigasecond.

FUNCTIONS

func AddGigasecond(t time.Time) time.Time
    AddGigasecond returns the current time plus 1 gigasecond.


real	0m0.361s
user	0m0.251s
sys	0m0.312s


===============================================================================

