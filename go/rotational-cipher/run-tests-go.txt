Running automated test file(s):

Go packages: rotationalcipher 


===============================================================================

golint rotationalcipher

real	0m0.139s
user	0m0.075s
sys	0m0.130s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.00s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.00s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	0.007s	coverage: 100.0% of statements

real	0m0.646s
user	0m0.662s
sys	0m0.536s

===============================================================================

go tool cover -func=coverage.out
rotationalcipher/rotational_cipher.go:10:	RotationalCipher	100.0%
rotationalcipher/rotational_cipher.go:28:	shiftChar		100.0%
total:						(statements)		100.0%

real	0m0.153s
user	0m0.098s
sys	0m0.152s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.203s
user	0m0.163s
sys	0m0.206s

===============================================================================

go test -v -race -covermode=atomic rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.00s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.00s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	0.058s	coverage: 100.0% of statements

real	0m0.665s
user	0m0.608s
sys	0m0.478s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: rotationalcipher
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkRotationalCipher-4   	  454730	      3611 ns/op	     280 B/op	      16 allocs/op
PASS
ok  	rotationalcipher	1.722s

real	0m2.137s
user	0m2.772s
sys	0m0.440s

===============================================================================

go test -tags bonus
PASS
ok  	rotationalcipher	0.008s

real	0m0.510s
user	0m0.552s
sys	0m0.413s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.716s
user	0m0.651s
sys	0m0.328s

benchstat benchstat-old.txt benchstat-new.txt
name                old time/op    new time/op    delta
RotationalCipher-4    4.01µs ± 0%    3.61µs ± 0%   ~     (p=1.000 n=1+1)

name                old alloc/op   new alloc/op   delta
RotationalCipher-4      680B ± 0%      280B ± 0%   ~     (p=1.000 n=1+1)

name                old allocs/op  new allocs/op  delta
RotationalCipher-4      14.0 ± 0%      16.0 ± 0%   ~     (p=1.000 n=1+1)

real	0m0.020s
user	0m0.002s
sys	0m0.015s

===============================================================================

go vet rotationalcipher

real	0m0.343s
user	0m0.415s
sys	0m0.323s

===============================================================================

go fix rotationalcipher

real	0m0.080s
user	0m0.034s
sys	0m0.074s

===============================================================================

ineffassign ./...

real	0m0.343s
user	0m0.337s
sys	0m0.305s

===============================================================================

gocyclo .
5 rotationalcipher RotationalCipher rotational_cipher.go:10:1
4 rotationalcipher BenchmarkRotationalCipher rotational_cipher_test.go:92:1
3 rotationalcipher TestRotationalCipher rotational_cipher_test.go:81:1
3 rotationalcipher shiftChar rotational_cipher.go:28:1
1 rotationalcipher ExampleRotationalCipher rotational_cipher_examples_test.go:7:1

real	0m0.021s
user	0m0.002s
sys	0m0.006s

===============================================================================

misspell .

real	0m0.117s
user	0m0.194s
sys	0m0.068s

===============================================================================

gosec ./rotational-cipher
[gosec] 2022/08/17 21:04:16 Including rules: default
[gosec] 2022/08/17 21:04:16 Excluding rules: default
[gosec] 2022/08/17 21:04:16 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/rotational-cipher
2022/08/17 21:04:17 internal error: package "strings" without types was imported from "command-line-arguments"

real	0m0.456s
user	0m0.447s
sys	0m0.373s

===============================================================================

gomarkdoc --output rotationalcipher-doc.md

real	0m0.032s
user	0m0.014s
sys	0m0.024s

===============================================================================

go doc -all rotationalcipher
package rotationalcipher // import "rotationalcipher"

Package rotationalcipher is used to encrypt data.

FUNCTIONS

func RotationalCipher(plain string, shiftKey int) string
    RotationalCipher returns a cipher text after applying a rotational cipher to
    a plain text input.


real	0m0.204s
user	0m0.081s
sys	0m0.174s


===============================================================================

