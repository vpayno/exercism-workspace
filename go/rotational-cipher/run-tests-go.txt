Running automated test file(s):

Go packages: rotationalcipher 


===============================================================================

golint rotationalcipher

real	0m0.128s
user	0m0.081s
sys	0m0.095s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.00s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.00s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	0.014s	coverage: 100.0% of statements

real	0m0.539s
user	0m0.583s
sys	0m0.434s

===============================================================================

go tool cover -func=coverage.out
rotationalcipher/rotational_cipher.go:10:	RotationalCipher	100.0%
rotationalcipher/rotational_cipher.go:28:	shiftChar		100.0%
total:						(statements)		100.0%

real	0m0.163s
user	0m0.102s
sys	0m0.193s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.148s
user	0m0.117s
sys	0m0.170s

===============================================================================

go test -v -race -covermode=atomic rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.00s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.00s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	(cached)	coverage: 100.0% of statements

real	0m0.329s
user	0m0.351s
sys	0m0.300s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: rotationalcipher
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkRotationalCipher-4   	  286296	      4015 ns/op	     680 B/op	      14 allocs/op
PASS
ok  	rotationalcipher	1.231s

real	0m1.716s
user	0m2.391s
sys	0m0.582s

===============================================================================

go test -tags bonus
PASS
ok  	rotationalcipher	0.016s

real	0m0.525s
user	0m0.536s
sys	0m0.474s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.410s
user	0m0.510s
sys	0m0.248s

benchstat benchstat-old.txt benchstat-new.txt
name                old time/op    new time/op    delta
RotationalCipher-4    3.61µs ± 0%    4.01µs ± 0%   ~     (p=1.000 n=1+1)

name                old alloc/op   new alloc/op   delta
RotationalCipher-4      680B ± 0%      680B ± 0%   ~     (all equal)

name                old allocs/op  new allocs/op  delta
RotationalCipher-4      14.0 ± 0%      14.0 ± 0%   ~     (all equal)

real	0m0.017s
user	0m0.001s
sys	0m0.021s

===============================================================================

go vet rotationalcipher

real	0m0.489s
user	0m0.656s
sys	0m0.399s

===============================================================================

go fix rotationalcipher

real	0m0.098s
user	0m0.049s
sys	0m0.118s

===============================================================================

ineffassign ./...

real	0m0.363s
user	0m0.376s
sys	0m0.280s

===============================================================================

gocyclo .
5 rotationalcipher RotationalCipher rotational_cipher.go:10:1
4 rotationalcipher BenchmarkRotationalCipher rotational_cipher_test.go:92:1
3 rotationalcipher TestRotationalCipher rotational_cipher_test.go:81:1
3 rotationalcipher shiftChar rotational_cipher.go:28:1
1 rotationalcipher ExampleRotationalCipher rotational_cipher_examples_test.go:7:1

real	0m0.013s
user	0m0.006s
sys	0m0.007s

===============================================================================

misspell .
rotationalcipher-doc.md:22:17: "retuns" is a misspelling of "returns"
rotationalcipher-doc.txt:8:21: "retuns" is a misspelling of "returns"

real	0m0.167s
user	0m0.299s
sys	0m0.080s

===============================================================================

gosec ./rotational-cipher
[gosec] 2022/08/17 20:57:53 Including rules: default
[gosec] 2022/08/17 20:57:53 Excluding rules: default
[gosec] 2022/08/17 20:57:53 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/rotational-cipher
2022/08/17 20:57:53 internal error: package "bytes" without types was imported from "command-line-arguments"

real	0m0.735s
user	0m1.051s
sys	0m0.450s

===============================================================================

gomarkdoc --output rotationalcipher-doc.md

real	0m0.038s
user	0m0.032s
sys	0m0.022s

===============================================================================

go doc -all rotationalcipher
package rotationalcipher // import "rotationalcipher"

Package rotationalcipher is used to encrypt data.

FUNCTIONS

func RotationalCipher(plain string, shiftKey int) string
    RotationalCipher returns a cipher text after applying a rotational cipher to
    a plain text input.


real	0m0.233s
user	0m0.138s
sys	0m0.217s


===============================================================================

