Running automated test file(s):

Go packages: rotationalcipher 


===============================================================================

golint rotationalcipher

real	0m0.178s
user	0m0.171s
sys	0m0.134s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.00s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.00s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	0.007s	coverage: 100.0% of statements

real	0m0.567s
user	0m0.614s
sys	0m0.360s

===============================================================================

go tool cover -func=coverage.out
rotationalcipher/rotational_cipher.go:7:	RotationalCipher	100.0%
rotationalcipher/rotational_cipher.go:25:	shiftChar		100.0%
total:						(statements)		100.0%

real	0m0.094s
user	0m0.047s
sys	0m0.072s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.141s
user	0m0.039s
sys	0m0.159s

===============================================================================

go test -v -race -covermode=atomic rotationalcipher
=== RUN   TestRotationalCipher
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 0
    rotational_cipher_test.go:88: PASS: zero len input, rotate by 3
    rotational_cipher_test.go:88: PASS: rotate a by 0, same output as input
    rotational_cipher_test.go:88: PASS: rotate a by 1
    rotational_cipher_test.go:88: PASS: rotate a by 26, same output as input
    rotational_cipher_test.go:88: PASS: rotate n by 13 with wrap around alphabet
    rotational_cipher_test.go:88: PASS: rotate capital letters
    rotational_cipher_test.go:88: PASS: rotate spaces
    rotational_cipher_test.go:88: PASS: rotate numbers
    rotational_cipher_test.go:88: PASS: rotate punctuation
    rotational_cipher_test.go:88: PASS: rotate all letters
--- PASS: TestRotationalCipher (0.01s)
=== RUN   ExampleRotationalCipher
--- PASS: ExampleRotationalCipher (0.01s)
PASS
coverage: 100.0% of statements
ok  	rotationalcipher	0.056s	coverage: 100.0% of statements

real	0m0.728s
user	0m0.772s
sys	0m0.553s

===============================================================================

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: rotationalcipher
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkRotationalCipher-4   	  157893	      9873 ns/op	    2128 B/op	     183 allocs/op
PASS
ok  	rotationalcipher	1.714s

real	0m2.097s
user	0m3.009s
sys	0m0.500s

===============================================================================

go test -tags bonus
PASS
ok  	rotationalcipher	0.004s

real	0m0.523s
user	0m0.589s
sys	0m0.468s

===============================================================================

No old benchmarks to run benchstat against.

===============================================================================

go vet rotationalcipher

real	0m0.340s
user	0m0.312s
sys	0m0.303s

===============================================================================

go fix rotationalcipher

real	0m0.066s
user	0m0.030s
sys	0m0.070s

===============================================================================

ineffassign ./...

real	0m0.324s
user	0m0.361s
sys	0m0.289s

===============================================================================

gocyclo .
5 rotationalcipher RotationalCipher rotational_cipher.go:7:1
4 rotationalcipher BenchmarkRotationalCipher rotational_cipher_test.go:92:1
3 rotationalcipher TestRotationalCipher rotational_cipher_test.go:81:1
3 rotationalcipher shiftChar rotational_cipher.go:25:1
1 rotationalcipher ExampleRotationalCipher rotational_cipher_examples_test.go:7:1

real	0m0.013s
user	0m0.001s
sys	0m0.002s

===============================================================================

misspell .
coverage.html:86:20: "retuns" is a misspelling of "returns"
rotational_cipher.go:6:20: "retuns" is a misspelling of "returns"
rotationalcipher-doc.md:22:17: "retuns" is a misspelling of "returns"
run-tests-go.txt:154:22: "retuns" is a misspelling of "returns"
run-tests-go.txt:155:28: "retuns" is a misspelling of "returns"
rotationalcipher-doc.txt:8:21: "retuns" is a misspelling of "returns"

real	0m0.089s
user	0m0.081s
sys	0m0.043s

===============================================================================

gosec ./rotational-cipher
[gosec] 2022/08/17 20:47:48 Including rules: default
[gosec] 2022/08/17 20:47:48 Excluding rules: default
[gosec] 2022/08/17 20:47:48 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/rotational-cipher
2022/08/17 20:47:48 internal error: package "unicode" without types was imported from "command-line-arguments"

real	0m0.313s
user	0m0.285s
sys	0m0.268s

===============================================================================

gomarkdoc --output rotationalcipher-doc.md

real	0m0.027s
user	0m0.017s
sys	0m0.008s

===============================================================================

go doc -all rotationalcipher
package rotationalcipher // import "rotationalcipher"

Package rotationalcipher is used to encrypt data.

FUNCTIONS

func RotationalCipher(plain string, shiftKey int) string
    RotationalCipher retuns a cipher text after applying a rotational cipher to
    a plain text input.


real	0m0.133s
user	0m0.063s
sys	0m0.129s


===============================================================================

