Running automated test file(s):

Go packages: pangram 


===============================================================================

golint pangram

real	0m0.142s
user	0m0.113s
sys	0m0.132s

===============================================================================

go test -v -covermode=count -coverprofile coverage.out pangram
=== RUN   TestPangram
=== RUN   TestPangram/empty_sentence
=== RUN   TestPangram/perfect_lower_case
=== RUN   TestPangram/only_lower_case
=== RUN   TestPangram/missing_the_letter_'x'
=== RUN   TestPangram/missing_the_letter_'h'
=== RUN   TestPangram/with_underscores
=== RUN   TestPangram/with_numbers
=== RUN   TestPangram/missing_letters_replaced_by_numbers
=== RUN   TestPangram/mixed_case_and_punctuation
=== RUN   TestPangram/a-m_and_A-M_are_26_different_characters_but_not_a_pangram
--- PASS: TestPangram (0.01s)
    --- PASS: TestPangram/empty_sentence (0.00s)
    --- PASS: TestPangram/perfect_lower_case (0.00s)
    --- PASS: TestPangram/only_lower_case (0.00s)
    --- PASS: TestPangram/missing_the_letter_'x' (0.00s)
    --- PASS: TestPangram/missing_the_letter_'h' (0.00s)
    --- PASS: TestPangram/with_underscores (0.00s)
    --- PASS: TestPangram/with_numbers (0.00s)
    --- PASS: TestPangram/missing_letters_replaced_by_numbers (0.00s)
    --- PASS: TestPangram/mixed_case_and_punctuation (0.00s)
    --- PASS: TestPangram/a-m_and_A-M_are_26_different_characters_but_not_a_pangram (0.00s)
=== RUN   ExampleIsPangram
--- PASS: ExampleIsPangram (0.00s)
PASS
coverage: 92.9% of statements
ok  	pangram	0.012s	coverage: 92.9% of statements

real	0m0.595s
user	0m0.657s
sys	0m0.453s

===============================================================================

go tool cover -func=coverage.out
pangram/pangram.go:12:	IsPangram	92.9%
total:			(statements)	92.9%

real	0m0.205s
user	0m0.171s
sys	0m0.203s

===============================================================================

go tool cover -html coverage.out -o coverage.html

real	0m0.172s
user	0m0.150s
sys	0m0.225s

===============================================================================

go test -v -race -covermode=atomic pangram
=== RUN   TestPangram
=== RUN   TestPangram/empty_sentence
=== RUN   TestPangram/perfect_lower_case
=== RUN   TestPangram/only_lower_case
=== RUN   TestPangram/missing_the_letter_'x'
=== RUN   TestPangram/missing_the_letter_'h'
=== RUN   TestPangram/with_underscores
=== RUN   TestPangram/with_numbers
=== RUN   TestPangram/missing_letters_replaced_by_numbers
=== RUN   TestPangram/mixed_case_and_punctuation
=== RUN   TestPangram/a-m_and_A-M_are_26_different_characters_but_not_a_pangram
--- PASS: TestPangram (0.01s)
    --- PASS: TestPangram/empty_sentence (0.00s)
    --- PASS: TestPangram/perfect_lower_case (0.00s)
    --- PASS: TestPangram/only_lower_case (0.00s)
    --- PASS: TestPangram/missing_the_letter_'x' (0.00s)
    --- PASS: TestPangram/missing_the_letter_'h' (0.00s)
    --- PASS: TestPangram/with_underscores (0.00s)
    --- PASS: TestPangram/with_numbers (0.00s)
    --- PASS: TestPangram/missing_letters_replaced_by_numbers (0.00s)
    --- PASS: TestPangram/mixed_case_and_punctuation (0.00s)
    --- PASS: TestPangram/a-m_and_A-M_are_26_different_characters_but_not_a_pangram (0.00s)
=== RUN   ExampleIsPangram
--- PASS: ExampleIsPangram (0.00s)
PASS
coverage: 92.9% of statements
ok  	pangram	0.048s	coverage: 92.9% of statements

real	0m0.675s
user	0m0.773s
sys	0m0.435s

===============================================================================

mv -v benchstat-new.txt benchstat-old.txt
renamed 'benchstat-new.txt' -> 'benchstat-old.txt'

go test --run=xxx --bench . --benchmem |& tee benchstat-new.txt
goos: linux
goarch: amd64
pkg: pangram
cpu: Intel(R) Core(TM) i7-7Y75 CPU @ 1.30GHz
BenchmarkPangram-4   	   26893	     56473 ns/op	    8478 B/op	     147 allocs/op
PASS
ok  	pangram	2.050s

real	0m2.458s
user	0m2.887s
sys	0m0.435s

===============================================================================

go test -tags bonus
PASS
ok  	pangram	0.003s

real	0m0.485s
user	0m0.552s
sys	0m0.345s

===============================================================================

go install golang.org/x/perf/cmd/benchstat@latest

real	0m0.925s
user	0m0.615s
sys	0m0.395s

benchstat benchstat-old.txt benchstat-new.txt
name       old time/op    new time/op    delta
Pangram-4    66.1µs ± 0%    56.5µs ± 0%   ~     (p=1.000 n=1+1)

name       old alloc/op   new alloc/op   delta
Pangram-4    8.57kB ± 0%    8.48kB ± 0%   ~     (p=1.000 n=1+1)

name       old allocs/op  new allocs/op  delta
Pangram-4       149 ± 0%       147 ± 0%   ~     (p=1.000 n=1+1)

real	0m0.015s
user	0m0.002s
sys	0m0.019s

===============================================================================

go vet pangram

real	0m0.498s
user	0m0.560s
sys	0m0.458s

===============================================================================

go fix pangram

real	0m0.192s
user	0m0.164s
sys	0m0.158s

===============================================================================

gosec ./pangram
[gosec] 2022/07/26 07:23:04 Including rules: default
[gosec] 2022/07/26 07:23:04 Excluding rules: default
[gosec] 2022/07/26 07:23:04 Import directory: /home/vpayno/git_vpayno/exercism-workspace/go/pangram
2022/07/26 07:23:04 internal error: package "regexp" without types was imported from "command-line-arguments"

real	0m0.484s
user	0m0.551s
sys	0m0.347s

===============================================================================

gomarkdoc --output pangram-doc.md

real	0m0.031s
user	0m0.021s
sys	0m0.015s

===============================================================================

go doc -all pangram
package pangram // import "pangram"

Package pangram determines if a sentence is a pangram.

FUNCTIONS

func IsPangram(input string) bool
    IsPangram returns true if the string contains all the ASCII letters (a to
    z).


real	0m0.241s
user	0m0.177s
sys	0m0.185s


===============================================================================

