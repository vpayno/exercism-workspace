#!/bin/bash

shopt -s nullglob

if [[ ! -d .exercism ]]; then
	printf "ERROR: Run from inside a project directory.\n\n"
	exit 1
fi

declare package_name
declare project_dir

get_track_package_name() {
	basename "${PWD}"
} # get_track_package_name()

package_name="$(get_track_package_name)"
project_dir="$(basename "${PWD}")"

if ! grep -q ./"${project_dir}"/README.md ../README.md; then

	cat >>../README.md <<EOF
- [${project_dir}](./${project_dir}/README.md)
EOF

fi

if ! grep -q "my solution" ./README.md; then

	# Two empty spaces because the file is missing a trailing new line.
	cat >>./README.md <<EOF


### My Solution

- [my solution]($(printf "%s\n" ./*[.]rb | grep -v "_test[.]rb"))
- [run-tests](./run-tests-ruby.txt)
EOF

fi

printf "\n"
git add ../README.md ./README.md
git diff --cached ../README.md ./README.md
printf "\n"

sed -r -i -e 's/^(\s+)(skip)\b.*$/\1# \2/g' ./*_test.rb
git add ./*_test.rb
git diff --cached ./*_test.rb
printf "\n"

for f in ./*_test.rb; do
	if ! grep -q simplecov "${f}"; then
		{ cat | sponge "${f}"; } <<-EOF
			# frozen_string_literal: false

			# https://github.com/simplecov-ruby/simplecov
			require 'simplecov'

			# https://about.codecov.io/blog/getting-started-with-code-coverage-for-ruby/
			require 'simplecov-cobertura'
			SimpleCov.formatter = SimpleCov::Formatter::CoberturaFormatter

			# line coverage
			SimpleCov.start if ENV['COVERAGE'] != 'branch'

			# branch coverage
			if ENV['COVERAGE'] == 'branch'
			  SimpleCov.start do
			    enable_coverage :branch
			    primary_coverage :branch
			  end
			end

			# name the test file/group
			SimpleCov.command_name 'test:exercism'

			# original exercism tests
			$(cat "${f}")
		EOF

		git add "${f}"
	fi
done
printf "\n"

for f in ./*.rb; do
	if ! grep -q frozen_string_literal: "${f}"; then
		{ cat | sponge "${f}"; } <<-EOF
			# frozen_string_literal: false

			$(cat "${f}")
		EOF

		git add "${f}"
	fi
done
printf "\n"

git status ..
printf "\n"
