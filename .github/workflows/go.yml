name: Go Workflow

on:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        go-version: ["1.18"]
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        exclude:
          - os: "macos-latest"
            go-version: "1.18"
          - os: "windows-latest"
            go-version: "1.18"

    runs-on: "${{ matrix.os }}"

    steps:
    - name: Checkout Repo
      id: checkout-repo
      uses: actions/checkout@v3

    - name: Set up Go ${{ matrix.go-version }}
      id: setup-go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}

    - name: Show Go version
      id: go-version
      run: |
        go version

    - name: Install Go Tools
      id: install-go-tools
      run: |
        go install golang.org/x/lint/golint@latest
        go install golang.org/x/tools/cmd/cover@latest
        go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: CD to Go Dir
      id: cd-to-go-dir
      run: |
        pwd
        ls
        cd ./go
        pwd
        ls

    - name: Analysing the code with golint
      id: golint
      run: |
        cd ./go
        ./for_each golint -set_exit_status pkg_name

    - name: Analysing the code with go vet
      id: go-vet
      run: |
        cd ./go
        ./for_each go vet pkg_name

    - name: Testing with go test
      id: go-test-run
      run: |
        cd ./go
        ./for_each go test -v -covermode=count -coverprofile coverage.out pkg_name

    - name: Testing with go test coverage
      id: go-test-coverage
      run: |
        cd ./go
        ./for_each go tool cover -func=coverage.out
        git restore ./*/coverage.out

    - name: Testing with gosec
      id: go-test-security
      run: |
        cd ./go
        gosec ./...
