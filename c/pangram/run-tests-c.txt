Running automated test file(s):


===============================================================================

Running: make clean
rm -rf *.o *.out *.out.dSYM

real	0m0.007s
user	0m0.002s
sys	0m0.005s

===============================================================================

Running: make test | ansifilter
Compiling tests.out
test_pangram.c:85:test_null:PASS
test_pangram.c:86:test_empty_sentence:PASS
test_pangram.c:87:test_perfect_lower_case:PASS
test_pangram.c:88:test_only_lower_case:PASS
test_pangram.c:89:test_missing_letter_x:PASS
test_pangram.c:90:test_missing_letter_h:PASS
test_pangram.c:91:test_with_underscores:PASS
test_pangram.c:92:test_with_numbers:PASS
test_pangram.c:93:test_missing_letters_replaced_by_numbers:PASS
test_pangram.c:94:test_mixed_case_and_punctuation:PASS
test_pangram.c:95:test_a_to_m_and_A_to_M_are_26_different_characters_but_not_pangram:PASS

-----------------------
11 Tests 0 Failures 0 Ignored 
OK

real	0m0.111s
user	0m0.072s
sys	0m0.042s

===============================================================================

Running: make memcheck | ansifilter
Compiling memcheck
test_pangram.c:85:test_null:PASS
test_pangram.c:86:test_empty_sentence:PASS
test_pangram.c:87:test_perfect_lower_case:PASS
test_pangram.c:88:test_only_lower_case:PASS
test_pangram.c:89:test_missing_letter_x:PASS
test_pangram.c:90:test_missing_letter_h:PASS
test_pangram.c:91:test_with_underscores:PASS
test_pangram.c:92:test_with_numbers:PASS
test_pangram.c:93:test_missing_letters_replaced_by_numbers:PASS
test_pangram.c:94:test_mixed_case_and_punctuation:PASS
test_pangram.c:95:test_a_to_m_and_A_to_M_are_26_different_characters_but_not_pangram:PASS

-----------------------
11 Tests 0 Failures 0 Ignored 
OK
Memory check passed

real	0m0.139s
user	0m0.101s
sys	0m0.039s

===============================================================================

Running: clang-format-16 -style=file -i ./pangram.c ./test_pangram.c ./pangram.h

real	0m0.019s
user	0m0.009s
sys	0m0.009s

===============================================================================

Running: clang-check-16 ./pangram.c ./test_pangram.c ./pangram.h --

real	0m0.043s
user	0m0.031s
sys	0m0.012s

===============================================================================

Running: clang-tidy-16 ./pangram.c ./test_pangram.c ./pangram.h -checks=*,-llvm-header-guard,-llvmlibc-restrict-system-libc-headers -- | head -n 100
2680 warnings generated.
6673 warnings generated.
9350 warnings generated.
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:20:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0, j = 0; i < (int)strlen(sentence); i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:17:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    char *new_sentence = calloc(strlen(sentence) + 2, sizeof(char));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:22:33: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            new_sentence[j++] = tolower(sentence[i]);
                                ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:35:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; i < (int)strlen(new_sentence); i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:35:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'new_sentence' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (int i = 0; i < (int)strlen(new_sentence); i++) {
                    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/pangram.c:41:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; i < ALPHABET_SIZE; i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:8:31: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
static void test_null(void) { TEST_ASSERT_FALSE(is_pangram(NULL)); }
                              ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:14:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:21:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:28:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:36:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:43:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:50:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:57:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:64:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_pangram(sentence));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/pangram/test_pangram.c:71:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]

real	0m0.260s
user	0m0.237s
sys	0m0.025s

===============================================================================

