Running automated test file(s):


===============================================================================

Running: make clean
rm -rf *.o *.out *.out.dSYM

real	0m0.003s
user	0m0.000s
sys	0m0.003s

===============================================================================

Running: make test | ansifilter
Compiling tests.out
test_luhn.c:150:test_single_digit_strings_can_not_be_valid:PASS
test_luhn.c:151:test_a_single_zero_is_invalid:PASS
test_luhn.c:152:test_a_simple_valid_SIN_that_remains_valid_if_reversed:PASS
test_luhn.c:153:test_a_simple_valid_SIN_that_becomes_invalid_if_reversed:PASS
test_luhn.c:154:test_a_valid_Canadian_SIN:PASS
test_luhn.c:155:test_invalid_Canadian_SIN:PASS
test_luhn.c:156:test_invalid_credit_card:PASS
test_luhn.c:157:test_invalid_long_number_with_an_even_remainder:PASS
test_luhn.c:158:invalid_long_number_with_a_remainder_divisible_by_5:PASS
test_luhn.c:159:test_valid_number_with_an_even_number_of_digits:PASS
test_luhn.c:160:test_valid_number_with_an_odd_number_of_spaces:PASS
test_luhn.c:161:test_valid_string_with_a_non_digit_added_at_the_end_to_become_invalid:PASS
test_luhn.c:163:test_valid_strings_with_punctuation_included_become_invalid:PASS
test_luhn.c:164:test_valid_strings_with_symbols_included_become_invalid:PASS
test_luhn.c:165:test_single_zero_with_space_is_invalid:PASS
test_luhn.c:166:test_more_than_a_single_zero_is_valid:PASS
test_luhn.c:167:test_input_digit_9_is_correctly_converted_to_output_digit_9:PASS
test_luhn.c:168:test_very_long_input_is_valid:PASS
test_luhn.c:169:test_number_with_odd_number_of_digits_and_non_zero_first_digit:PASS
test_luhn.c:170:test_ascii_value_for_non_doubled_non_digit_isnt_allowed:PASS
test_luhn.c:171:test_ascii_value_for_doubled_non_digit_isnt_allowed:PASS
test_luhn.c:172:test_non_numeric_non_space_char_in_middle_with_sum_divisible_by_10_isnt_allowed:PASS

-----------------------
22 Tests 0 Failures 0 Ignored 
OK

real	0m0.115s
user	0m0.084s
sys	0m0.033s

===============================================================================

Running: make memcheck | ansifilter
Compiling memcheck
test_luhn.c:150:test_single_digit_strings_can_not_be_valid:PASS
test_luhn.c:151:test_a_single_zero_is_invalid:PASS
test_luhn.c:152:test_a_simple_valid_SIN_that_remains_valid_if_reversed:PASS
test_luhn.c:153:test_a_simple_valid_SIN_that_becomes_invalid_if_reversed:PASS
test_luhn.c:154:test_a_valid_Canadian_SIN:PASS
test_luhn.c:155:test_invalid_Canadian_SIN:PASS
test_luhn.c:156:test_invalid_credit_card:PASS
test_luhn.c:157:test_invalid_long_number_with_an_even_remainder:PASS
test_luhn.c:158:invalid_long_number_with_a_remainder_divisible_by_5:PASS
test_luhn.c:159:test_valid_number_with_an_even_number_of_digits:PASS
test_luhn.c:160:test_valid_number_with_an_odd_number_of_spaces:PASS
test_luhn.c:161:test_valid_string_with_a_non_digit_added_at_the_end_to_become_invalid:PASS
test_luhn.c:163:test_valid_strings_with_punctuation_included_become_invalid:PASS
test_luhn.c:164:test_valid_strings_with_symbols_included_become_invalid:PASS
test_luhn.c:165:test_single_zero_with_space_is_invalid:PASS
test_luhn.c:166:test_more_than_a_single_zero_is_valid:PASS
test_luhn.c:167:test_input_digit_9_is_correctly_converted_to_output_digit_9:PASS
test_luhn.c:168:test_very_long_input_is_valid:PASS
test_luhn.c:169:test_number_with_odd_number_of_digits_and_non_zero_first_digit:PASS
test_luhn.c:170:test_ascii_value_for_non_doubled_non_digit_isnt_allowed:PASS
test_luhn.c:171:test_ascii_value_for_doubled_non_digit_isnt_allowed:PASS
test_luhn.c:172:test_non_numeric_non_space_char_in_middle_with_sum_divisible_by_10_isnt_allowed:PASS

-----------------------
22 Tests 0 Failures 0 Ignored 
OK
Memory check passed

real	0m0.139s
user	0m0.109s
sys	0m0.030s

===============================================================================

Running: clang-format-16 -style=file -i ./luhn.c ./test_luhn.c ./luhn.h

real	0m0.027s
user	0m0.012s
sys	0m0.015s

===============================================================================

Running: clang-check-16 ./luhn.c ./test_luhn.c ./luhn.h --

real	0m0.035s
user	0m0.020s
sys	0m0.015s

===============================================================================

Running: clang-tidy-16 ./luhn.c ./test_luhn.c ./luhn.h -checks=*,-llvm-header-guard,-llvmlibc-restrict-system-libc-headers -- | head -n 100
1330 warnings generated.
4147 warnings generated.
5469 warnings generated.
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:15:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 1; i < numbers.size; i += 2) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:15:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'numbers' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (int i = 1; i < numbers.size; i += 2) {
                    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:19:31: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (numbers.list[i] > 9) {
                              ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:20:32: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            numbers.list[i] -= 9;
                               ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:25:24: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (sum(numbers) % 10 == 0) {
                       ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:39:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; i < numbers.size; i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:54:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (size_t i = 0; i < strlen(str); i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:73:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (size_t i = 0; i < strlen(str) - 1; i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:89:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (size_t i = 0; i < strlen(str) - 0; i++) {
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.h:10:9: warning: accessing fields in struct 'numbers_list_t' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
typedef struct {
        ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.h:10:9: note: use "__attribute__((aligned(128)))" to align struct 'numbers_list_t' to 128 bytes
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/luhn.c:12:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    numbers_list_t numbers = get_numbers(str);
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:9:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(luhn("1"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:14:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(luhn("0"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:19:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(luhn("059"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:24:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(luhn("59"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:29:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(luhn("055 444 285"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:34:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(luhn("055 444 286"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:39:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(luhn("8273 1232 7352 0569"));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/luhn/test_luhn.c:44:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(luhn("1 2345 6789 1234 5678 9012"));
    ^

real	0m0.267s
user	0m0.244s
sys	0m0.024s

===============================================================================

