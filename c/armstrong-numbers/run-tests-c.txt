Running automated test file(s):


===============================================================================

Running: make clean
rm -rf *.o *.out *.out.dSYM

real	0m0.008s
user	0m0.003s
sys	0m0.005s

===============================================================================

Running: make test | ansifilter
Compiling tests.out
test_armstrong_numbers.c:55:test_zero_is_an_armstrong_number:PASS
test_armstrong_numbers.c:56:test_single_digit_numbers_are_armstrong_numbers:PASS
test_armstrong_numbers.c:57:test_there_are_no_two_digit_armstrong_numbers:PASS
test_armstrong_numbers.c:58:test_three_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:59:test_three_digit_number_that_is_not_an_armstrong_number:PASS
test_armstrong_numbers.c:60:test_four_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:61:test_four_digit_number_that_is_not_an_armstrong_number:PASS
test_armstrong_numbers.c:62:test_seven_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:63:test_seven_digit_number_that_is_not_an_armstrong_number:PASS

-----------------------
9 Tests 0 Failures 0 Ignored 
OK

real	0m0.114s
user	0m0.082s
sys	0m0.035s

===============================================================================

Running: make memcheck | ansifilter
Compiling memcheck
test_armstrong_numbers.c:55:test_zero_is_an_armstrong_number:PASS
test_armstrong_numbers.c:56:test_single_digit_numbers_are_armstrong_numbers:PASS
test_armstrong_numbers.c:57:test_there_are_no_two_digit_armstrong_numbers:PASS
test_armstrong_numbers.c:58:test_three_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:59:test_three_digit_number_that_is_not_an_armstrong_number:PASS
test_armstrong_numbers.c:60:test_four_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:61:test_four_digit_number_that_is_not_an_armstrong_number:PASS
test_armstrong_numbers.c:62:test_seven_digit_number_that_is_an_armstrong_number:PASS
test_armstrong_numbers.c:63:test_seven_digit_number_that_is_not_an_armstrong_number:PASS

-----------------------
9 Tests 0 Failures 0 Ignored 
OK
Memory check passed

real	0m0.130s
user	0m0.089s
sys	0m0.041s

===============================================================================

Running: clang-check-16 ./armstrong_numbers.c ./test_armstrong_numbers.c ./armstrong_numbers.h --

real	0m0.049s
user	0m0.033s
sys	0m0.016s

===============================================================================

Running: clang-tidy-16 ./armstrong_numbers.c ./test_armstrong_numbers.c ./armstrong_numbers.h -checks=*,-llvm-header-guard,-llvmlibc-restrict-system-libc-headers -- | head -n 100
3433 warnings generated.
7224 warnings generated.
10648 warnings generated.
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:4:21: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (candidate < 10) {
                    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:12:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'num' and may cause performance degradation [altera-id-dependent-backward-branch]
    while (num > 0) {
           ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:13:30: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        int pow_temp = num % 10;
                             ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:16:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (int i = 0; i < digit_count; i++) {
        ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:16:25: warning: backward branch (for loop) is ID-dependent due to variable reference to 'digit_count' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (int i = 0; i < digit_count; i++) {
                        ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/armstrong_numbers.c:21:16: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        num /= 10;
               ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:9:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_armstrong_number(0));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:14:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_armstrong_number(5));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:19:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_armstrong_number(10));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:24:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_armstrong_number(153));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:29:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_armstrong_number(100));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:34:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_armstrong_number(9474));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:39:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_armstrong_number(9475));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:44:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_armstrong_number(9926315));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test_armstrong_numbers.c:49:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_armstrong_number(9926314));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/armstrong-numbers/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h:39:23: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
Suppressed 10629 warnings (10629 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

real	0m0.333s
user	0m0.310s
sys	0m0.025s

===============================================================================

Running: clang-format-16 -style=file -i ./armstrong_numbers.c ./test_armstrong_numbers.c ./armstrong_numbers.h

real	0m0.020s
user	0m0.009s
sys	0m0.011s

===============================================================================

