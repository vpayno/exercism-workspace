Running automated test file(s):


===============================================================================

Running: make clean
rm -rf *.o *.out *.out.dSYM

real	0m0.004s
user	0m0.002s
sys	0m0.002s

===============================================================================

Running: make test | ansifilter
Compiling tests.out
test_triangle.c:137:test_equilateral_triangle_all_sides_are_equal:PASS
test_triangle.c:138:test_equilateral_triangle_if_any_side_is_unequal:PASS
test_triangle.c:139:test_equilateral_triangle_no_sides_are_equal:PASS
test_triangle.c:140:test_equilateral_triangle_all_zero_sides_is_not_a_triangle:PASS
test_triangle.c:141:test_equilateral_triangle_sides_may_be_floats:PASS
test_triangle.c:142:test_isosceles_triangle_last_two_sides_are_equal:PASS
test_triangle.c:143:test_isosceles_triangle_first_two_sides_are_equal:PASS
test_triangle.c:144:test_isosceles_triangle_if_first_and_last_sides_are_equal:PASS
test_triangle.c:145:test_isosceles_triangle_equilateral_triangles_are_also_isosceles:PASS
test_triangle.c:146:test_isosceles_triangle_no_sides_are_equal:PASS
test_triangle.c:147:test_isosceles_triangle_first_triangle_inequality_violation:PASS
test_triangle.c:148:test_isosceles_triangle_second_triangle_inequality_violation:PASS
test_triangle.c:149:test_isosceles_triangle_third_triangle_inequality_violation:PASS
test_triangle.c:150:test_isosceles_triangle_sides_may_be_floats:PASS
test_triangle.c:151:test_scalene_triangle_no_sides_are_equal:PASS
test_triangle.c:152:test_scalene_triangle_all_sides_are_equal:PASS
test_triangle.c:153:test_scalene_triangle_first_and_second_sides_are_equal:PASS
test_triangle.c:154:test_scalene_triangle_first_and_third_sides_are_equal:PASS
test_triangle.c:155:test_scalene_triangle_second_and_third_sides_are_equal:PASS
test_triangle.c:156:test_scalene_triangle_may_not_violate_triangle_inequality:PASS
test_triangle.c:157:test_scalene_triangle_sides_may_be_floats:PASS

-----------------------
21 Tests 0 Failures 0 Ignored 
OK

real	0m0.119s
user	0m0.089s
sys	0m0.032s

===============================================================================

Running: make memcheck | ansifilter
Compiling memcheck
test_triangle.c:137:test_equilateral_triangle_all_sides_are_equal:PASS
test_triangle.c:138:test_equilateral_triangle_if_any_side_is_unequal:PASS
test_triangle.c:139:test_equilateral_triangle_no_sides_are_equal:PASS
test_triangle.c:140:test_equilateral_triangle_all_zero_sides_is_not_a_triangle:PASS
test_triangle.c:141:test_equilateral_triangle_sides_may_be_floats:PASS
test_triangle.c:142:test_isosceles_triangle_last_two_sides_are_equal:PASS
test_triangle.c:143:test_isosceles_triangle_first_two_sides_are_equal:PASS
test_triangle.c:144:test_isosceles_triangle_if_first_and_last_sides_are_equal:PASS
test_triangle.c:145:test_isosceles_triangle_equilateral_triangles_are_also_isosceles:PASS
test_triangle.c:146:test_isosceles_triangle_no_sides_are_equal:PASS
test_triangle.c:147:test_isosceles_triangle_first_triangle_inequality_violation:PASS
test_triangle.c:148:test_isosceles_triangle_second_triangle_inequality_violation:PASS
test_triangle.c:149:test_isosceles_triangle_third_triangle_inequality_violation:PASS
test_triangle.c:150:test_isosceles_triangle_sides_may_be_floats:PASS
test_triangle.c:151:test_scalene_triangle_no_sides_are_equal:PASS
test_triangle.c:152:test_scalene_triangle_all_sides_are_equal:PASS
test_triangle.c:153:test_scalene_triangle_first_and_second_sides_are_equal:PASS
test_triangle.c:154:test_scalene_triangle_first_and_third_sides_are_equal:PASS
test_triangle.c:155:test_scalene_triangle_second_and_third_sides_are_equal:PASS
test_triangle.c:156:test_scalene_triangle_may_not_violate_triangle_inequality:PASS
test_triangle.c:157:test_scalene_triangle_sides_may_be_floats:PASS

-----------------------
21 Tests 0 Failures 0 Ignored 
OK
Memory check passed

real	0m0.169s
user	0m0.133s
sys	0m0.038s

===============================================================================

Running: clang-check-16 ./test_triangle.c ./triangle.c ./triangle.h --

real	0m0.036s
user	0m0.016s
sys	0m0.020s

===============================================================================

Running: clang-tidy-16 ./test_triangle.c ./triangle.c ./triangle.h -checks=*,-llvm-header-guard,-llvmlibc-restrict-system-libc-headers -- | head -n 100
2224 warnings generated.
2233 warnings generated.
2242 warnings generated.
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:10:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_equilateral(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:16:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_equilateral(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:21:25: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    triangle_t sides = {5, 4, 6};
                        ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:21:31: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    triangle_t sides = {5, 4, 6};
                              ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:22:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_equilateral(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:28:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_equilateral(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'
#define TEST_ASSERT_FALSE(condition)                                                               UNITY_TEST_ASSERT(      !(condition), __LINE__, " Expected FALSE Was TRUE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:33:25: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    triangle_t sides = {0.5, 0.5, 0.5};
                        ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:33:30: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    triangle_t sides = {0.5, 0.5, 0.5};
                             ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:33:35: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    triangle_t sides = {0.5, 0.5, 0.5};
                                  ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:34:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_equilateral(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:40:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_isosceles(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:46:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_isosceles(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:52:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_isosceles(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:59:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_TRUE(is_isosceles(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:126:100: note: expanded from macro 'TEST_ASSERT_TRUE'
#define TEST_ASSERT_TRUE(condition)                                                                UNITY_TEST_ASSERT(       (condition), __LINE__, " Expected TRUE Was FALSE")
                                                                                                   ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity_internals.h:775:98: note: expanded from macro 'UNITY_TEST_ASSERT'
#define UNITY_TEST_ASSERT(condition, line, message)                                              do {if (condition) {} else {UNITY_TEST_FAIL((UNITY_LINE_TYPE)(line), (message));}} while(0)
                                                                                                 ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test_triangle.c:65:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    TEST_ASSERT_FALSE(is_isosceles(sides));
    ^
/home/vpayno/git_vpayno/exercism-workspace/c/triangle/test-framework/unity.h:128:100: note: expanded from macro 'TEST_ASSERT_FALSE'

real	0m0.149s
user	0m0.122s
sys	0m0.028s

===============================================================================

Running: clang-format-16 -style=file -i ./test_triangle.c ./triangle.c ./triangle.h

real	0m0.022s
user	0m0.012s
sys	0m0.010s

===============================================================================

