Running automated test file(s):


===============================================================================

Running: pylint ./src

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)


real	0m0.902s
user	0m0.819s
sys	0m0.085s

===============================================================================

Running: ruff check --ignore E501 ./src

real	0m0.101s
user	0m0.034s
sys	0m0.072s

===============================================================================

Running: pyright --stats ./src
Found 2 source files
pyright 1.1.347
0 errors, 0 warnings, 0 informations 
Completed in 0.622sec

Analysis stats
Total files parsed and bound: 22
Total files checked: 2

Timing stats
Find Source Files:    0sec
Read Source Files:    0.01sec
Tokenize:             0.04sec
Parse:                0.05sec
Resolve Imports:      0.05sec
Bind:                 0.06sec
Check:                0.1sec
Detect Cycles:        0sec

real	0m1.405s
user	0m1.296s
sys	0m0.157s

===============================================================================

Running: bandit --verbose --recursive ./src
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.12.1
Run started:2024-01-17 16:36:29.739883
Files in scope (2):
	./src/largest_series_product/__init__.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./src/largest_series_product/largest_series_product.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (2):
	./src/largest_series_product/__pycache__/__init__.cpython-312.pyc
	./src/largest_series_product/__pycache__/largest_series_product.cpython-312.pyc

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 32
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):

real	0m0.294s
user	0m0.224s
sys	0m0.073s

===============================================================================

Running: refurb ./src

real	0m1.106s
user	0m1.016s
sys	0m0.092s

===============================================================================

python -m doctest -v ./src/largest_series_product/__init__.py ./src/largest_series_product/largest_series_product.py
1 items had no tests:
    __init__
0 tests in 1 items.
0 passed and 0 failed.
Test passed.
2 items had no tests:
    largest_series_product
    largest_series_product.largest_product
0 tests in 2 items.
0 passed and 0 failed.
Test passed.

real	0m0.141s
user	0m0.082s
sys	0m0.062s


===============================================================================

==> .coveragerc <==
[run]
omit = __init__.py, *_test.py

Running: PYTHONPATH=./src pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./test
============================= test session starts ==============================
platform linux -- Python 3.12.1, pytest-7.4.3, pluggy-1.3.0 -- /home/vpayno/.pyenv/versions/3.12.1/bin/python
cachedir: .pytest_cache
rootdir: /home/vpayno/git_vpayno/exercism-workspace/python/largest-series-product
configfile: pytest.ini
plugins: anyio-4.2.0, libtmux-0.25.0, pylama-8.4.1, cov-4.1.0, datafiles-3.0.0, docker-2.0.1, subprocess-1.5.0, typeguard-4.1.5
collecting ... collected 14 items

test/largest_series_product_test.py::LargestSeriesProductTest::test_can_find_the_largest_product_of_2 PASSED [  7%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_can_find_the_largest_product_of_2_with_numbers_in_order PASSED [ 14%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_can_find_the_largest_product_of_3 PASSED [ 21%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_can_find_the_largest_product_of_3_with_numbers_in_order PASSED [ 28%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_can_find_the_largest_product_of_5_with_numbers_in_order PASSED [ 35%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_can_get_the_largest_product_of_a_big_number PASSED [ 42%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_euler_big_number PASSED [ 50%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_finds_the_largest_product_if_span_equals_length PASSED [ 57%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_rejects_empty_string_and_nonzero_span PASSED [ 64%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_rejects_invalid_character_in_digits PASSED [ 71%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_rejects_negative_span PASSED [ 78%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_rejects_span_longer_than_string_length PASSED [ 85%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_reports_zero_if_all_spans_include_zero PASSED [ 92%]
test/largest_series_product_test.py::LargestSeriesProductTest::test_reports_zero_if_the_only_digits_are_zero PASSED [100%]

---------- coverage: platform linux, python 3.12.1-final-0 -----------
Name                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------
largest_series_product.py      26      0     16      1    98%   33->40
-----------------------------------------------------------------------
TOTAL                          26      0     16      1    98%
Coverage XML written to file .coverage.xml


============================== 14 passed in 0.08s ==============================

real	0m0.859s
user	0m0.742s
sys	0m0.119s

===============================================================================

Running: coverage report --show-missing
Name                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------
largest_series_product.py      26      0     16      1    98%   33->40
-----------------------------------------------------------------------
TOTAL                          26      0     16      1    98%

real	0m0.161s
user	0m0.102s
sys	0m0.061s

===============================================================================

coverage annotate

real	0m0.165s
user	0m0.097s
sys	0m0.069s

tail -n 10000 ./*,cover | grep -E -C 3 '^> def |^! '
  
> def largest_product(series: str, size: int) -> int:
>     """Returns the largest product for a contiguous substring of digits of size n.

===============================================================================

Running: misspell ./src/largest_series_product/__init__.py ./src/largest_series_product/largest_series_product.py

real	0m0.019s
user	0m0.015s
sys	0m0.013s

===============================================================================

