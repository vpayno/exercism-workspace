#!/bin/bash

shopt -s nullglob

if [[ ! -d .exercism ]]; then
	printf "ERROR: Run from inside a project directory.\n\n"
	exit 1
fi

declare package_name
declare project_dir

get_python_package_name() {
	basename "${PWD}"
} # get_python_package_name()

package_name="$(get_python_package_name)"
project_dir="$(basename "${PWD}")"

if ! grep -q ./"${project_dir}"/README.md ../README.md; then

	cat >>../README.md <<EOF
- [${project_dir}](./${project_dir}/README.md)
EOF

fi

if ! grep -q "my solution" ./README.md; then

	# Two empty spaces because the file is missing a trailing new line.
	cat >>./README.md <<EOF


### My Solution

- [my solution]($(printf "%s\n" ./*[.]py | grep -v "_test[.]py"))
EOF

	cat >>./README.md <<EOF
- [run-tests](./run-tests-python.txt)
EOF

fi
printf "\n"

git add ../README.md ./README.md
git diff --cached ../README.md ./README.md
printf "\n"

mkdir -pv "./src/${package_name//-/_}" ./test

[[ -d src/${package_name//-/_}/__init__.py ]] || touch "src/${package_name//-/_}/__init__.py"
[[ -d test/__init__.py ]] || touch test/__init__.py

declare -a SOLUTION_FILES
mapfile -t SOLUTION_FILES < <(jq -r '.files.solution[]' .exercism/config.json)

for f in "${SOLUTION_FILES[@]}"; do
	ln -svf ../../"${f}" "src/${package_name//-/_}/"
done

declare -a TEST_FILES
mapfile -t TEST_FILES < <(jq -r '.files.test[]' .exercism/config.json)

for f in "${TEST_FILES[@]}"; do
	ln -svf "../${f}" "./test/"
done

[[ -f .coveragerc ]] || cp -v ../.coveragerc .

cat >pytest.ini <<EOF
[pytest]
pythonpath = .
addopts = --doctest-modules
markers =
    task: exercise task/step
EOF

ln -svf ../.pylintrc .pylintrc

git add ./src ./test .coveragerc pytest.ini .pylintrc
printf "\n"

cd ..

printf "\n"
