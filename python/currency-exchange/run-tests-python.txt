Running automated test file(s):


===============================================================================

Running: pylint ./src
************* Module currency_exchange.exchange
src/currency_exchange/exchange.py:29:0: C0301: Line too long (105/100) (line-too-long)
src/currency_exchange/exchange.py:49:0: C0301: Line too long (108/100) (line-too-long)
src/currency_exchange/exchange.py:69:0: C0301: Line too long (104/100) (line-too-long)

-------------------------------------------------------------------
Your code has been rated at 8.33/10 (previous run: 10.00/10, -1.67)


real	0m0.463s
user	0m0.383s
sys	0m0.082s

===============================================================================

Running: ruff check --ignore E501 ./src

real	0m0.076s
user	0m0.035s
sys	0m0.045s

===============================================================================

Running: pyright --stats ./src
Found 2 source files
pyright 1.1.347
0 errors, 0 warnings, 0 informations 
Completed in 0.547sec

Analysis stats
Total files parsed and bound: 20
Total files checked: 2

Timing stats
Find Source Files:    0sec
Read Source Files:    0.01sec
Tokenize:             0.03sec
Parse:                0.03sec
Resolve Imports:      0.04sec
Bind:                 0.06sec
Check:                0.05sec
Detect Cycles:        0sec

real	0m1.425s
user	0m1.172s
sys	0m0.190s

===============================================================================

Running: bandit --verbose --recursive ./src
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.12.1
Run started:2024-01-17 05:24:00.960208
Files in scope (2):
	./src/currency_exchange/__init__.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./src/currency_exchange/exchange.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (0):

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 59
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):

real	0m0.279s
user	0m0.220s
sys	0m0.061s

===============================================================================

Running: refurb ./src

real	0m1.172s
user	0m1.089s
sys	0m0.084s

===============================================================================

python -m doctest -v ./src/currency_exchange/exchange.py ./src/currency_exchange/__init__.py
8 items had no tests:
    exchange
    exchange.exchange_money
    exchange.exchangeable_value
    exchange.get_actual_exchange_rate
    exchange.get_change
    exchange.get_leftover_of_bills
    exchange.get_number_of_bills
    exchange.get_value_of_bills
0 tests in 8 items.
0 passed and 0 failed.
Test passed.
1 items had no tests:
    __init__
0 tests in 1 items.
0 passed and 0 failed.
Test passed.

real	0m0.134s
user	0m0.074s
sys	0m0.061s


===============================================================================

==> .coveragerc <==
[run]
omit = __init__.py, *_test.py

Running: PYTHONPATH=./src pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./test
============================= test session starts ==============================
platform linux -- Python 3.12.1, pytest-7.4.3, pluggy-1.3.0 -- /home/vpayno/.pyenv/versions/3.12.1/bin/python
cachedir: .pytest_cache
rootdir: /home/vpayno/git_vpayno/exercism-workspace/python/currency-exchange
configfile: pytest.ini
plugins: anyio-4.2.0, libtmux-0.25.0, pylama-8.4.1, cov-4.1.0, datafiles-3.0.0, docker-2.0.1, subprocess-1.5.0, typeguard-4.1.5
collecting ... collected 7 items

test/exchange_test.py::CurrencyExchangeTest::test_exchange_money PASSED  [ 14%]
test/exchange_test.py::CurrencyExchangeTest::test_exchangeable_value PASSED [ 28%]
test/exchange_test.py::CurrencyExchangeTest::test_get_actual_exchange_rate PASSED [ 42%]
test/exchange_test.py::CurrencyExchangeTest::test_get_change PASSED      [ 57%]
test/exchange_test.py::CurrencyExchangeTest::test_get_leftover_of_bills PASSED [ 71%]
test/exchange_test.py::CurrencyExchangeTest::test_get_number_of_bills PASSED [ 85%]
test/exchange_test.py::CurrencyExchangeTest::test_get_value_of_bills PASSED [100%]

---------- coverage: platform linux, python 3.12.1-final-0 -----------
Name          Stmts   Miss Branch BrPart  Cover   Missing
---------------------------------------------------------
exchange.py      18      0      0      0   100%
---------------------------------------------------------
TOTAL            18      0      0      0   100%
Coverage XML written to file .coverage.xml


============================== 7 passed in 0.05s ===============================

real	0m0.782s
user	0m0.673s
sys	0m0.110s

===============================================================================

Running: coverage report --show-missing
Name          Stmts   Miss Branch BrPart  Cover   Missing
---------------------------------------------------------
exchange.py      18      0      0      0   100%
---------------------------------------------------------
TOTAL            18      0      0      0   100%

real	0m0.151s
user	0m0.104s
sys	0m0.049s

===============================================================================

coverage annotate

real	0m0.165s
user	0m0.110s
sys	0m0.057s

tail -n 10000 ./*,cover | grep -E -C 3 '^> def |^! '
  
> def exchange_money(budget: float, exchange_rate: float) -> float:
>     """Return the value of the exchanged currency.
--
  
> def get_change(budget: float, exchanging_value: float) -> float:
>     """Return the amount of money that is left from the budget.
--
  
> def get_value_of_bills(denomination: int, number_of_bills: int) -> int:
>     """Return only the total value of the bills (excluding fractional amounts) the booth would give back.
--
  
> def get_number_of_bills(budget: float, denomination: int) -> int:
>     """Return the number of currency bills that you can receive within the given budget.
--
  
> def get_leftover_of_bills(budget: float, denomination: int) -> float:
>     """Return the leftover amount that cannot be exchanged from your budget given the denomination of bills.
--
  
> def get_actual_exchange_rate(exchange_rate: float, spread: int) -> float:
>     """Return the actual exchange rate which includes the spread (cost).
--
  
> def exchangeable_value(budget: float, exchange_rate: float, spread: int, denomination: int) -> int:
>     """Return the maximum value of the new currency after calculating the exchange rate plus the spread.

===============================================================================

Running: misspell ./src/currency_exchange/exchange.py ./src/currency_exchange/__init__.py

real	0m0.018s
user	0m0.019s
sys	0m0.009s

===============================================================================

