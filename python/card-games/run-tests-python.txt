Running automated test file(s):


===============================================================================

Running: pylint ./src
************* Module card_games.lists
src/card_games/lists.py:48:0: C0301: Line too long (107/100) (line-too-long)

------------------------------------------------------------------
Your code has been rated at 9.62/10 (previous run: 9.62/10, +0.00)


real	0m0.745s
user	0m0.645s
sys	0m0.102s

===============================================================================

Running: ruff check --ignore E501 ./src

real	0m0.106s
user	0m0.030s
sys	0m0.079s

===============================================================================

Running: pyright --stats ./src
Found 2 source files
pyright 1.1.347
0 errors, 0 warnings, 0 informations 
Completed in 0.602sec

Analysis stats
Total files parsed and bound: 20
Total files checked: 2

Timing stats
Find Source Files:    0sec
Read Source Files:    0.01sec
Tokenize:             0.03sec
Parse:                0.04sec
Resolve Imports:      0.06sec
Bind:                 0.04sec
Check:                0.09sec
Detect Cycles:        0sec

real	0m1.294s
user	0m1.149s
sys	0m0.188s

===============================================================================

Running: bandit --verbose --recursive ./src
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.12.1
Run started:2024-01-17 05:00:41.914583
Files in scope (2):
	./src/card_games/__init__.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./src/card_games/lists.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (2):
	./src/card_games/__pycache__/__init__.cpython-312.pyc
	./src/card_games/__pycache__/lists.cpython-312.pyc

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 59
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):

real	0m0.245s
user	0m0.169s
sys	0m0.078s

===============================================================================

Running: refurb ./src

real	0m1.118s
user	0m1.036s
sys	0m0.084s

===============================================================================

python -m doctest -v ./src/card_games/__init__.py ./src/card_games/lists.py
1 items had no tests:
    __init__
0 tests in 1 items.
0 passed and 0 failed.
Test passed.
8 items had no tests:
    lists
    lists.approx_average_is_average
    lists.average_even_is_average_odd
    lists.card_average
    lists.concatenate_rounds
    lists.get_rounds
    lists.list_contains_round
    lists.maybe_double_last
0 tests in 8 items.
0 passed and 0 failed.
Test passed.

real	0m0.133s
user	0m0.087s
sys	0m0.046s


===============================================================================

==> .coveragerc <==
[run]
omit = __init__.py, *_test.py

Running: PYTHONPATH=./src pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./test
============================= test session starts ==============================
platform linux -- Python 3.12.1, pytest-7.4.3, pluggy-1.3.0 -- /home/vpayno/.pyenv/versions/3.12.1/bin/python
cachedir: .pytest_cache
rootdir: /home/vpayno/git_vpayno/exercism-workspace/python/card-games
configfile: pytest.ini
plugins: anyio-4.2.0, libtmux-0.25.0, pylama-8.4.1, cov-4.1.0, datafiles-3.0.0, docker-2.0.1, subprocess-1.5.0, typeguard-4.1.5
collecting ... collected 7 items

test/lists_test.py::CardGamesTest::test_approx_average_is_average PASSED [ 14%]
test/lists_test.py::CardGamesTest::test_average_even_is_average_odd PASSED [ 28%]
test/lists_test.py::CardGamesTest::test_card_average PASSED              [ 42%]
test/lists_test.py::CardGamesTest::test_concatenate_rounds PASSED        [ 57%]
test/lists_test.py::CardGamesTest::test_get_rounds PASSED                [ 71%]
test/lists_test.py::CardGamesTest::test_list_contains_round PASSED       [ 85%]
test/lists_test.py::CardGamesTest::test_maybe_double_last PASSED         [100%]

---------- coverage: platform linux, python 3.12.1-final-0 -----------
Name       Stmts   Miss Branch BrPart  Cover   Missing
------------------------------------------------------
lists.py      26      0      2      0   100%
------------------------------------------------------
TOTAL         26      0      2      0   100%
Coverage XML written to file .coverage.xml


============================== 7 passed in 0.05s ===============================

real	0m0.841s
user	0m0.713s
sys	0m0.131s

===============================================================================

Running: coverage report --show-missing
Name       Stmts   Miss Branch BrPart  Cover   Missing
------------------------------------------------------
lists.py      26      0      2      0   100%
------------------------------------------------------
TOTAL         26      0      2      0   100%

real	0m0.166s
user	0m0.110s
sys	0m0.057s

===============================================================================

coverage annotate

real	0m0.172s
user	0m0.104s
sys	0m0.070s

tail -n 10000 ./*,cover | grep -E -C 3 '^> def |^! '
  
> def get_rounds(number: int) -> List[int]:
>     """Create a list containing the current and next two round numbers.
--
  
> def concatenate_rounds(rounds_1: List[int], rounds_2: List[int]) -> List[int]:
>     """Concatenate two lists of round numbers.
--
  
> def list_contains_round(rounds: List[int], number: int) -> bool:
>     """Check if the list of rounds contains the specified number.
--
  
> def card_average(hand: List[int]) -> float:
>     """Calculate and returns the average card value from the list.
--
  
> def approx_average_is_average(hand: List[int]) -> bool:
>     """Return if an average is using (first + last index values ) OR ('middle' card) == calculated average.
--
  
> def average_even_is_average_odd(hand: List[int]) -> bool:
>     """Return if the (average of even indexed card values) == (average of odd indexed card values).
--
  
> def maybe_double_last(hand: List[int]) -> List[int]:
>     """Multiply a Jack card value in the last index position by 2.

===============================================================================

Running: misspell ./src/card_games/__init__.py ./src/card_games/lists.py

real	0m0.020s
user	0m0.014s
sys	0m0.016s

===============================================================================

