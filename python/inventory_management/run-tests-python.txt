Running automated test file(s):


===============================================================================

Running: pylint --ignore-patterns (__init__|.*_test).py ./dicts.py ./dicts_test.py ./__init__.py

--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)


real	0m0.770s
user	0m0.702s
sys	0m0.070s

===============================================================================

Running: ruff check --ignore E501 ./dicts.py ./dicts_test.py ./__init__.py

real	0m0.065s
user	0m0.032s
sys	0m0.038s

===============================================================================

Running: pyright --stats .
No configuration file found.
No pyproject.toml file found.
Assuming Python platform Linux
Searching for source files
Found 3 source files
pyright 1.1.305
0 errors, 0 warnings, 0 informations 
Completed in 0.75sec

Analysis stats
Total files parsed and bound: 81
Total files checked: 3

Timing stats
Find Source Files:    0sec
Read Source Files:    0.01sec
Tokenize:             0.06sec
Parse:                0.07sec
Resolve Imports:      0.07sec
Bind:                 0.06sec
Check:                0.14sec
Detect Cycles:        0sec

real	0m1.677s
user	0m1.688s
sys	0m0.166s

===============================================================================

Running: bandit --verbose --recursive .
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.11.3
Run started:2023-05-01 05:28:04.252492
Files in scope (3):
	./__init__.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./dicts.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./dicts_test.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (16):
	./.coverage
	./.coverage.xml
	./.coveragerc
	./.exercism/config.json
	./.exercism/metadata.json
	./.mypy_cache/.gitignore
	./.mypy_cache/3.11/@plugins_snapshot.json
	./.mypy_cache/CACHEDIR.TAG
	./HELP.md
	./HINTS.md
	./README.md
	./__pycache__/__init__.cpython-311.pyc
	./__pycache__/dicts.cpython-311.pyc
	./__pycache__/dicts_test.cpython-311-pytest-7.3.1.pyc
	./dicts.py,cover
	./run-tests-python.txt

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 93
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):

real	0m0.224s
user	0m0.180s
sys	0m0.047s

===============================================================================

Running: refurb .

real	0m5.906s
user	0m5.748s
sys	0m0.162s

===============================================================================

==> .coveragerc <==
[run]
omit = __init__.py, *_test.py

Running: pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly
============================= test session starts ==============================
platform linux -- Python 3.11.3, pytest-7.3.1, pluggy-1.0.0 -- /home/vpayno/.pyenv/versions/3.11.3/bin/python
cachedir: .pytest_cache
rootdir: /home/vpayno/git_vpayno/exercism-workspace/python
configfile: pytest.ini
plugins: anyio-3.6.2, libtmux-0.21.1, pylama-8.4.1, cov-4.0.0, datafiles-3.0.0, docker-1.0.1, subprocess-1.5.0, typeguard-2.13.3
collecting ... collected 10 items

dicts_test.py::InventoryTest::test_add_from_empty_dict PASSED            [ 10%]
dicts_test.py::InventoryTest::test_add_multiple_items PASSED             [ 20%]
dicts_test.py::InventoryTest::test_add_new_item PASSED                   [ 30%]
dicts_test.py::InventoryTest::test_add_one_item PASSED                   [ 40%]
dicts_test.py::InventoryTest::test_create_inventory PASSED               [ 50%]
dicts_test.py::InventoryTest::test_decrement_items PASSED                [ 60%]
dicts_test.py::InventoryTest::test_list_inventory PASSED                 [ 70%]
dicts_test.py::InventoryTest::test_not_below_zero PASSED                 [ 80%]
dicts_test.py::InventoryTest::test_remove_item PASSED                    [ 90%]
dicts_test.py::InventoryTest::test_remove_item_not_in_inventory PASSED   [100%]

---------- coverage: platform linux, python 3.11.3-final-0 -----------
Name       Stmts   Miss Branch BrPart  Cover   Missing
------------------------------------------------------
dicts.py      19      0      8      0   100%
------------------------------------------------------
TOTAL         19      0      8      0   100%
Coverage XML written to file .coverage.xml


============================== 10 passed in 0.05s ==============================

real	0m0.982s
user	0m0.859s
sys	0m0.123s

===============================================================================

Running: coverage report --show-missing
Name       Stmts   Miss Branch BrPart  Cover   Missing
------------------------------------------------------
dicts.py      19      0      8      0   100%
------------------------------------------------------
TOTAL         19      0      8      0   100%

real	0m0.139s
user	0m0.100s
sys	0m0.041s

===============================================================================

coverage annotate
The annotate command will be removed in a future version.
Get in touch if you still use it: ned@nedbatchelder.com

real	0m0.157s
user	0m0.102s
sys	0m0.058s

tail -n 10000 ./*,cover | grep -E -C 3 '^> def |^! '
  
> def create_inventory(items: List[str]) -> Dict[str, int]:
>     """Create a dict that tracks the amount (count) of each element on the `items` list.
--
  
> def add_items(inventory: Dict[str, int], items: List[str]) -> Dict[str, int]:
>     """Add or increment items in inventory using elements from the items `list`.
--
  
> def decrement_items(inventory: Dict[str, int], items: List[str]) -> Dict[str, int]:
>     """Decrement items in inventory using elements from the `items` list.
--
  
> def remove_item(inventory: Dict[str, int], item: str) -> Dict[str, int]:
>     """Remove item from inventory if it matches `item` string.
--
  
> def list_inventory(inventory: Dict[str, int]) -> List[Tuple[str, int]]:
>     """Create a list containing all (item_name, item_count) pairs in inventory.

===============================================================================

Running: misspell ./dicts.py ./dicts_test.py ./__init__.py

real	0m0.027s
user	0m0.025s
sys	0m0.015s

===============================================================================

