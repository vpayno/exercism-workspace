> """Solution to Ellen's Alien Game exercise."""
  
> from typing import List, Tuple
  
  
> class Alien:
>     """Create an Alien object with location x_coordinate and y_coordinate.
  
>     Attributes
>     ----------
>     (class)total_aliens_created: int
>     x_coordinate: int - Position on the x-axis.
>     y_coordinate: int - Position on the y-axis.
>     health: int - Amount of health points.
  
>     Methods
>     -------
>     hit(): Decrement Alien health by one point.
>     is_alive(): Return a boolean for if Alien is alive (if health is > 0).
>     teleport(new_x_coordinate, new_y_coordinate): Move Alien object to new coordinates.
>     collision_detection(other): Implementation TBD.
>     """
  
>     total_aliens_created: int = 0
  
>     def __init__(self, x_coordinate: int, y_coordinate: int) -> None:
>         Alien.total_aliens_created += 1
  
>         self.x_coordinate: int = x_coordinate
>         self.y_coordinate: int = y_coordinate
>         self.health: int = 3
  
>     def hit(self) -> None:
>         """Hits do health damage."""
>         self.health -= 1
  
>     def is_alive(self) -> bool:
>         """The alien is alive as long as it's health isn't zero."""
>         return self.health > 0
  
>     def teleport(self, x_coordinate: int, y_coordinate: int) -> None:
>         """Teleports the alien to a new set of coordinates."""
>         self.x_coordinate = x_coordinate
>         self.y_coordinate = y_coordinate
  
>     def collision_detection(self, other: object) -> None:
>         """Aliens don't have car insurance so ignore collisions."""
  
  
> def new_aliens_collection(positions: List[Tuple[int, int]]) -> List[Alien]:
>     """Returns a new list of aliens"""
>     return [Alien(*position) for position in positions]
  
  
> alien_start_positions: List[Tuple[int, int]] = [(4, 7), (-1, 0)]
  
> aliens = new_aliens_collection(alien_start_positions)
  
> for alien in aliens:
>     print(alien.x_coordinate, alien.y_coordinate)
