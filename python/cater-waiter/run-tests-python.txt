Running automated test file(s):


===============================================================================

Running: pylint --ignore-patterns (__init__|.*_test).py ./__init__.py ./sets_categories_data.py ./sets.py ./sets_test_data.py ./sets_test.py
************* Module cater-waiter.sets
sets.py:6:0: E0401: Unable to import 'sets_categories_data' (import-error)
sets.py:49:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
sets.py:78:0: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)

------------------------------------------------------------------
Your code has been rated at 7.41/10 (previous run: 7.41/10, +0.00)


real	0m0.897s
user	0m0.819s
sys	0m0.081s

===============================================================================

Running: ruff check --ignore E501 ./__init__.py ./sets_categories_data.py ./sets.py ./sets_test_data.py ./sets_test.py
sets_test.py:19:35: F401 [*] `sets_categories_data.ALCOHOLS` imported but unused
sets_test.py:20:35: F401 [*] `sets_categories_data.SPECIAL_INGREDIENTS` imported but unused
sets_test.py:21:35: F401 [*] `sets_categories_data.VEGAN_INTERSECTIONS` imported but unused
sets_test.py:22:35: F401 [*] `sets_categories_data.VEGETARIAN_INTERSECTIONS` imported but unused
sets_test.py:23:35: F401 [*] `sets_categories_data.PALEO_INTERSECTIONS` imported but unused
sets_test.py:24:35: F401 [*] `sets_categories_data.KETO_INTERSECTIONS` imported but unused
sets_test.py:25:35: F401 [*] `sets_categories_data.OMNIVORE_INTERSECTIONS` imported but unused
Found 7 errors.
[*] 7 potentially fixable with the --fix option.

real	0m0.070s
user	0m0.043s
sys	0m0.033s

===============================================================================

Running: pyright --stats .
No configuration file found.
No pyproject.toml file found.
Assuming Python platform Linux
Searching for source files
Found 5 source files
pyright 1.1.305
/home/vpayno/git_vpayno/exercism-workspace/python/cater-waiter/sets_test.py
  /home/vpayno/git_vpayno/exercism-workspace/python/cater-waiter/sets_test.py:119:65 - error: Argument of type "set[str]" cannot be assigned to parameter "intersection" of type "List[str]" in function "singleton_ingredients"
    "set[str]" is incompatible with "List[str]" (reportGeneralTypeIssues)
1 error, 0 warnings, 0 informations 
Completed in 0.855sec

Analysis stats
Total files parsed and bound: 82
Total files checked: 5

Timing stats
Find Source Files:    0sec
Read Source Files:    0.01sec
Tokenize:             0.06sec
Parse:                0.1sec
Resolve Imports:      0.08sec
Bind:                 0.06sec
Check:                0.22sec
Detect Cycles:        0sec

real	0m2.167s
user	0m2.068s
sys	0m0.168s

===============================================================================

Running: bandit --verbose --recursive .
[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.11.3
Run started:2023-05-02 06:43:06.906480
Files in scope (5):
	./__init__.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./sets.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./sets_categories_data.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./sets_test.py (score: {SEVERITY: 0, CONFIDENCE: 0})
	./sets_test_data.py (score: {SEVERITY: 0, CONFIDENCE: 0})
Files excluded (20):
	./.coverage
	./.coverage.xml
	./.coveragerc
	./.exercism/config.json
	./.exercism/metadata.json
	./.mypy_cache/.gitignore
	./.mypy_cache/3.11/@plugins_snapshot.json
	./.mypy_cache/CACHEDIR.TAG
	./HELP.md
	./HINTS.md
	./README.md
	./__pycache__/__init__.cpython-311.pyc
	./__pycache__/sets.cpython-311.pyc
	./__pycache__/sets_categories_data.cpython-311.pyc
	./__pycache__/sets_test.cpython-311-pytest-7.3.1.pyc
	./__pycache__/sets_test_data.cpython-311.pyc
	./run-tests-python.txt
	./sets.py,cover
	./sets_categories_data.py,cover
	./sets_test_data.py,cover

Test results:
	No issues identified.

Code scanned:
	Total lines of code: 750
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 0
Files skipped (0):

real	0m0.382s
user	0m0.324s
sys	0m0.060s

===============================================================================

Running: refurb .

real	0m5.898s
user	0m5.735s
sys	0m0.163s

===============================================================================

==> .coveragerc <==
[run]
omit = __init__.py, *_test.py

Running: pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly
============================= test session starts ==============================
platform linux -- Python 3.11.3, pytest-7.3.1, pluggy-1.0.0 -- /home/vpayno/.pyenv/versions/3.11.3/bin/python
cachedir: .pytest_cache
rootdir: /home/vpayno/git_vpayno/exercism-workspace/python
configfile: pytest.ini
plugins: anyio-3.6.2, libtmux-0.21.1, pylama-8.4.1, cov-4.0.0, datafiles-3.0.0, docker-1.0.1, subprocess-1.5.0, typeguard-2.13.3
collecting ... collected 7 items

sets_test.py::SetsTest::test_categorize_dish PASSED                      [ 14%]
sets_test.py::SetsTest::test_check_drinks PASSED                         [ 28%]
sets_test.py::SetsTest::test_clean_ingredients PASSED                    [ 42%]
sets_test.py::SetsTest::test_compile_ingredients PASSED                  [ 57%]
sets_test.py::SetsTest::test_separate_appetizers PASSED                  [ 71%]
sets_test.py::SetsTest::test_singleton_ingredients PASSED                [ 85%]
sets_test.py::SetsTest::test_tag_special_ingredients PASSED              [100%]

---------- coverage: platform linux, python 3.11.3-final-0 -----------
Name                      Stmts   Miss Branch BrPart  Cover   Missing
---------------------------------------------------------------------
sets.py                      24      0     11      2    94%   73->exit, 91->exit
sets_categories_data.py      14      0      0      0   100%
sets_test_data.py            41      0     10      2    96%   452->exit, 453->exit
---------------------------------------------------------------------
TOTAL                        79      0     21      4    96%
Coverage XML written to file .coverage.xml


============================== 7 passed in 0.21s ===============================

real	0m1.145s
user	0m1.038s
sys	0m0.110s

===============================================================================

Running: coverage report --show-missing
Name                      Stmts   Miss Branch BrPart  Cover   Missing
---------------------------------------------------------------------
sets.py                      24      0     11      2    94%   73->exit, 91->exit
sets_categories_data.py      14      0      0      0   100%
sets_test_data.py            41      0     10      2    96%   452->exit, 453->exit
---------------------------------------------------------------------
TOTAL                        79      0     21      4    96%

real	0m0.211s
user	0m0.166s
sys	0m0.047s

===============================================================================

coverage annotate
The annotate command will be removed in a future version.
Get in touch if you still use it: ned@nedbatchelder.com

real	0m0.208s
user	0m0.160s
sys	0m0.049s

tail -n 10000 ./*,cover | grep -E -C 3 '^> def |^! '
  
> def clean_ingredients(dish_name: str, dish_ingredients: List[str]) -> Tuple[str, Set[str]]:
>     """Remove duplicates from `dish_ingredients`.
--
  
> def check_drinks(drink_name: str, drink_ingredients: List[str]) -> str:
>     """Append "Cocktail" (alcohol)  or "Mocktail" (no alcohol) to `drink_name`, based on `drink_ingredients`.
--
  
> def categorize_dish(dish_name: str, dish_ingredients: List[str]) -> str | None:
>     """Categorize `dish_name` based on `dish_ingredients`.
--
  
> def tag_special_ingredients(dish: Tuple[str, List[str]]) -> Tuple[str, Set[str]] | None:
>     """Compare `dish` ingredients to `SPECIAL_INGREDIENTS`.
--
  
> def compile_ingredients(dishes: List[Set[str]]) -> Set[str]:
>     """Create a master list of ingredients.
--
  
> def separate_appetizers(dishes: List[str], appetizers: List[str]) -> List[str]:
>     """Determine which `dishes` are designated `appetizers` and remove them.
--
  
> def singleton_ingredients(dishes: List[Set[str]], intersection: List[str]) -> Set[str]:
>     """Determine which `dishes` have a singleton ingredient (an ingredient that only appears once across dishes).

===============================================================================

Running: misspell ./__init__.py ./sets_categories_data.py ./sets.py ./sets_test_data.py ./sets_test.py

real	0m0.025s
user	0m0.024s
sys	0m0.012s

===============================================================================

