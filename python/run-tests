#!/bin/bash

print_ruler() {
	printf "\n"
	printf "=%.0s" {1..79}
	printf "\n"
	printf "\n"
} # print_ruler()

main() {
	export PYTHONPATH="."

	printf "Running automated test file(s):\n\n"

	print_ruler

	# https://github.com/pylint-dev/pylint

	echo Running: pylint --ignore-patterns '(__init__|.*_test).py' .
	time pylint --ignore-patterns '(__init__|.*_test).py' .

	print_ruler

	# https://github.com/charliermarsh/ruff

	echo Running: ruff check --ignore E501 ./*py
	time ruff check --ignore E501 ./*py

	print_ruler

	# https://github.com/microsoft/pyright

	echo Running: pyright --stats .
	time pyright --stats .

	print_ruler

	# https://github.com/PyCQA/bandit

	echo Running: bandit --verbose --recursive .
	time bandit --verbose --recursive .

	print_ruler

	# https://github.com/dosisod/refurb

	echo Running: refurb .
	time refurb .

	print_ruler

	for f in ./*[.]py; do
		if [[ ${f} =~ _test.py || ${f} == ./__init__.py ]]; then
			continue
		fi

		echo python -m doctest -v "${f}"
		time python -m doctest -v "${f}"
		printf "\n"
	done

	print_ruler

	# https://github.com/pytest-dev/pytest

	tail -v -n 1000 .coveragerc
	printf "\n"

	echo Running: pytest --verbose --cov=. --cov-branch --cov-report={term-missing,xml:.coverage.xml} -p no:randomly
	time pytest --verbose --cov=. --cov-branch --cov-report={term-missing,xml:.coverage.xml} -p no:randomly

	print_ruler

	echo Running: coverage report --show-missing
	time coverage report --show-missing

	print_ruler

	echo coverage annotate
	time coverage annotate
	printf "\n"

	echo tail -n 10000 './*,cover' '|' grep -E -C 3 "'^> def |^! '"
	tail -n 10000 ./*,cover | grep -E -C 1 '^> def |^! '

	print_ruler

	# go install github.com/client9/misspell/cmd/misspell@latest

	echo Running: misspell ./*py
	time misspell ./*py

	print_ruler

} # main()

time main "$@" |& tee ./run-tests-python.txt
