;; https://exercism.org/tracks/wasm/exercises/hamming

(module
  ;; https://github.com/exercism/wasm-lib
  (import "console" "log_mem_as_utf8" (func $log_mem_as_utf8 (param $byteOffset i32) (param $length i32)))
  ;; (import "console" "log_f32" (func $log_f32 (param f32)))
  ;; (import "console" "log_i32_s" (func $log_i32_s (param i32)))
  (import "console" "log_i32_u" (func $log_i32_u (param i32)))
  ;; (import "console" "log_i64_u" (func $log_i64_u (param i64)))
  ;; string log example
  ;; (call $log_mem_as_utf8 (local.get $offset) (local.get $length))
  ;; i32 log example
  ;; (call $log_i32_u (local.get $number))
  (memory (export "mem") 1)

  (global $error i32 (i32.const 0))

  ;;                      v     v      v       v     v        v
  ;;                      0000000000111111111122222222223333333
  ;;                      0123456789012345678901234567890123458
  ;;                      ^     ^      ^       ^     ^        ^
  (data (i32.const 2000) "first|second|readptr|limit|distance|")
  (global $debug_label_first_offset i32 (i32.const 2000))
  (global $debug_label_first_length i32 (i32.const 5))
  (global $debug_label_second_offset i32 (i32.const 2006))
  (global $debug_label_second_length i32 (i32.const 6))
  (global $debug_label_readptr_offset i32 (i32.const 2013))
  (global $debug_label_readptr_length i32 (i32.const 7))
  (global $debug_label_limit_offset i32 (i32.const 2021))
  (global $debug_label_limit_length i32 (i32.const 5))
  (global $debug_label_distance_offset i32 (i32.const 2027))
  (global $debug_label_distance_length i32 (i32.const 8))

  ;;
  ;; Calculate the hamming distance between two strings.
  ;;
  ;; @param {i32} firstOffset - The offset of the first string in linear memory.
  ;; @param {i32} firstLength - The length of the first string in linear memory.
  ;; @param {i32} secondOffset - The offset of the second string in linear memory.
  ;; @param {i32} secondLength - The length of the second string in linear memory.
  ;;
  ;; @returns {i32} - The hamming distance between the two strings or -1 if the
  ;;                  strings are not of equal length.
  ;;
  (func (export "compute")
    (param $firstOffset i32) (param $firstLength i32) (param $secondOffset i32) (param $secondLength i32) (result i32)

    (local $first_limit i32)
    (local $first_readptr i32)
    (local $second_readptr i32)
    (local $distance i32)

    (local.set $first_limit
      (i32.sub
        (i32.add
          (local.get $firstOffset)
          (local.get $firstLength)
          ) ;; add
        (i32.const 1)
        ) ;; sub
      )
    (local.set $first_readptr (local.get $firstOffset))
    (local.set $second_readptr (local.get $secondOffset))
    (local.set $distance (i32.const 0))

    (call $debug_print_str (global.get $debug_label_first_offset) (global.get $debug_label_first_length))
    (call $debug_print_str (global.get $firstOffset) (global.get $firstLength))

    (call $debug_print_str (global.get $debug_label_second_offset) (global.get $debug_label_second_length))
    (call $debug_print_str (global.get $secondOffset) (global.get $secondLength))

    (if
      (i32.ne
        (i32.load (local.get $firstLength))
        (i32.load (local.get $secondLength))
        ) ;; ne
      (then
        (return (global.get $error))
        ) ;; then
      ) ;; if

    (loop $my_loop
      (if
        (i32.ne
          (i32.load (local.get $first_readptr))
          (i32.load (local.get $second_readptr))
          ) ;; ne
        (then
          (local.set $distance (i32.add
            (local.get $distance)
            (i32.const 1)
            ) ;; d++
          ) ;; set d
          ) ;; then
        ) ;; if

      (local.set $first_readptr
        (i32.add
          (local.get $first_readptr)
          (i32.const 1)
          ) ;; add
        ) ;; readptr++

      (br_if $my_loop
        (i32.lt_u
          (local.get $first_readptr)
          (local.get $first_limit)
          ) ;; ge
        ) ;; br_if
      ) ;; loop

    (return (local.get $distance))
  )
)
