#!/usr/bin/env bash
#
# Bash Reference Manual (HTML)        : https://www.gnu.org/software/bash/manual/
# Bash Reference Manual (PDF)         : https://www.gnu.org/s/bash/manual/bash.pdf
#
# Bash Guide for Beginners (HTML)     : https://tldp.org/LDP/Bash-Beginners-Guide/html/Bash-Beginners-Guide.html
# Bash Guide for Beginners (PDF)      : https://tldp.org/LDP/Bash-Beginners-Guide/Bash-Beginners-Guide.pdf
#
# Advanced Bash-Scripting Guide (HTML): https://tldp.org/LDP/abs/html/
# Advanced Bash-Scripting Guide (PDF) : https://tldp.org/LDP/abs/abs-guide.pdf

# Enable/Disable debug output.
# This syntax let's us run it like this: DEBUG=true bash ./script_name.sh parameters
: "${DEBUG:=false}"

# Protect oursevles from code injection.
if [[ ! ${DEBUG,,} =~ ^(false|true)$ ]]; then
    DEBUG="false"
fi

# Lowercase the string and add /bin/ to the start of the string.
DEBUG="/bin/${DEBUG,,}"

# Function: printf to stderr if DEBUG is set to true
# Input : same as printf
# Output: same as printf, except it goes to stderr instead of stdout
# Return: from printf
eprintf()
{
    # Pass all the printf arguments and redirect stdout to stderr.
    # shellcheck disable=SC2059
    ${DEBUG} && printf "$@" >&2
} # eprintf()

# Function: check the validity of the script's arguments.
# Input : script arguments
# Output: error messages
# Return: 0 (valid) or >=1 (one or more input problems found)
check_args()
{
    # Capture the script's arguments.
    local -a vargs=( "$@" )
    local money="${1}"
    shift 1
    local -a coins=( "${@}" )

    # Variable used to track the return codes from each of the checks.
    local -i retval=0

    # Two or more arguments?
    if [[ ${#vargs[@]} -lt 2 ]]; then
        eprintf "ERROR: wrong number of arguments were passed [%s](%d)\n" "${vargs[*]}" "${#vargs[@]}"
        show_usage
        (( retval++ ))

    # First argument: integer?
    elif [[ ! ${money} =~ ^[0-9]+$ ]]; then
        eprintf "ERROR: change [%s] needs to be a + integer.\n" "${change}"
        printf "%s\n" "target can't be negative"
        show_usage
        (( retval++ ))

    # First argument: 0
    elif [[ ${money} =~ ^0$ ]]; then
        eprintf "ERROR: change [%s] needs to be a + integer.\n" "${change}"
        printf "%s\n" "no coins make 0 change"
        show_usage
        (( retval++ ))

    # Second argument: contains at least one element?
    elif [[ ${#coins[@]} -lt 1 ]]; then
        eprintf "ERROR: coins list [%s](%d) needs at least 1 value.\n" "${coins[*]}" "${#coins[@]}"
        show_usage
        (( retval++ ))

    # Second argument: space separated list of positive integers?
    elif [[ ! ${coins[*]} =~ ^([0-9]+| )+$ ]]; then
        eprintf "ERROR: coins list [%s] needs to only contain space separated integers.\n" "${coins[*]}"
        show_usage
        (( retval++ ))

    fi

    # If a non-zero value is returned, it means that one or more tests have failed.
    return "${retval}"
} # check_args()

# Function: print the scripts usage help message.
# Input : none
# Output: usage help screen
# Return: 1 (always)
show_usage()
{
    {
        printf "%s\n\n" "Correctly determine the fewest number of coins to be given to a customer such that the sum of the coins' value would equal the correct amount of change."
        printf "Usage: %s change \"coin denominations\"" "$0"
        printf "\n"
    } >&2
} # show_usage()

# Check the inputs for validity and exit if the checks fail.
check_args "$@" || exit "$?"

# Function: Makes change.
# Input : value, list of coin denominations
# Output: change
# Return: 0
change_maker()
{
    local -i money="${1}"
    shift 1
    local -a -i coins

    local -i coin
    local -i change
    local -a output
    local -i i
    local -i j
    local -i k
    local -i l
	local -i coin_count
	local -A tracker
	local -a register
	local -i remaining_change
	local -i previous_coin
	local -i previous_count
	local -i last_coin
	local -i length

    read -r -a coins <<< "$@"
    mapfile -t coins < <(printf "%d\n" "${coins[@]}" | sort -n -r)

	last_coin="${coins[*]: -1}"
	eprintf "last_coin = [%d]\n" "${last_coin}"

    eprintf "%s\n" "Change if we use the least number of coins:"

	for (( i="${#coins[@]}"; i>0; i-- )); do

		eprintf "i=%d\n" "${i}"

		coin_count=0
		change="${money}"

		unset counts
		declare -A counts

		register=()

		k="${#coins[@]}"
		for coin in "${coins[@]: -${i}}"; do

			eprintf "coin = [%d]\n" "${coin}"

			(( coin_count = change / coin ))
			eprintf "(( %d = %d / %d ))\n" "${coin_count}" "${change}" "${coin}"

			(( remaining_change = change % coin ))
			eprintf "(( %d = %d %% %d ))\n" "${remaining_change}" "${change}" "${coin}"

			if (( coin_count == 0 )); then
				eprintf "\n"
				continue
			fi

			if [[ ${remaining_change} -gt 0 ]] && (( coin_count > 0 )); then

				eprintf "\n"
				eprintf "\tChecking to see if we need to borrow (coin=%d, coin_count=%d)...\n" "${coin}" "${coin_count}"

				# We need to check to see if the remaining change fits in the remaining coins.
				# If it doesn't fit borrow 1 coin from the current coin loop.
				need_to_borrow=true

				if [[ ${k} -gt 1 ]]; then
					(( k = k - 1 ))
				fi
				eprintf "k=%d\n" "${k}"

				eprintf "\t\tDo the remaining coins, [%s], fit in [%d]?\n" "${coins[*]: -${k}}" "${remaining_change}"

				eprintf "      coin [%s]\n" "${coins[*]}"
				eprintf "coin slice [%s]\n" "${coins[*]: -${k}}"

				length="${#coins[@]} - ${k}"

				for (( l = k; l < length; l++ )); do
					item="${coins[${l}]}"

					eprintf "\t\tChecking to see if change [%d] fits in [%d]\n" "${remaining_change}" "${item}"

					eprintf "\t\tremaining_change (%d) >= coin (%d)\n" "${remaining_change}" "${item}"

					if [[ ${remaining_change} -le "${item}" ]]; then
						eprintf "\t\tDon't need to borrow. [%d] fits in [%d].\n" "${remaining_change}" "${item}"

						# If it fits in at least one of the remaining coins, stop checking, we don't need to borrow.
						need_to_borrow=false

						break
					fi
				done

				if ${need_to_borrow}; then

					if [[ ${last_coin} == "${coin}" ]]; then

						eprintf "\t\tBorrowing from previous coin [%d].\n" "${previous_coin}"
						# Borrow.
						eprintf "\t\tChange Before: [%d]\t" "${remaining_change}"
						change="${remaining_change} + ${previous_coin}"
						eprintf "Change After: [%s]\n" "${change}"

						eprintf "\t\tCount for [%d]: Before (%d)\t" "${previous_coin}" "${previous_count}"
						counts["${previous_coin}"]="$(( ${counts[${previous_coin}]} - 1 ))"
						eprintf "After (%s)\n" "${previous_count:-0}"

						for index in "${!register[@]}"; do
							# we just need to remove the first instance of the previous coin we encounter.
							if [[ ${register[${index}]} == "${previous_coin}" ]]; then
								unset "register[${index}]"
								break
							fi
						done

					else

						eprintf "\t\tBorrowing from current coin [%d].\n" "${coin}"
						# Borrow.
						eprintf "\t\tChange Before: [%d]\t" "${remaining_change}"
						change="${remaining_change} + ${coin}"
						eprintf "Change After: [%s]\n" "${change}"

						eprintf "\t\tCount for [%d]: Before (%d)\t" "${coin}" "${coin_count}"
						(( coin_count -= 1 ))
						eprintf "After (%s)\n" "${coin_count:-0}"

					fi

					eprintf "\n"
				else
					(( change %= coin ))

					# if change isn't zero and this is the last coin, we need to redo the loop after borrowing
				fi

				eprintf "\tcoin [%d], count [%d]\n" "${coin}" "${coin_count}"

				for (( j=1; j <= "${coin_count}"; j++ )); do
					register+=( "${coin}" )
				done

			else

				# This is always setting change to 0.
				(( change %= coin ))

				for (( j=1; j <= "${coin_count}"; j++ )); do
					register+=( "${coin}" )
				done

			fi

			previous_coin="${coin}"
			previous_count="${coin_count}"

			counts["${coin}"]="${coin_count}"

			eprintf "\t%d x %d = %d, remainder = %d (change)\n" "${coin}" "${counts[${coin}]}" "$(( coin * ${counts[${coin}]:-0} ))" "${change}"
			eprintf "\n"
		done

		eprintf "register = [%s]\n" "${register[*]}"

		if [[ ${change} -eq 0 ]] && [[ ${#register} -gt 0 ]]; then
			tracker[$(wc -w <<< "${register[*]}")]="${register[*]}"
			eprintf "tracker => count (%d) : register [%s]\n" "$(wc -w <<< "${register[*]}")" "${register[*]}"
			eprintf "\n"
		else
			eprintf "Didn't find a solution, skipping.\n"
		fi
	done

	if [[ ${#tracker[@]} -gt 0 ]]; then
		${DEBUG} && declare -p -A tracker > /dev/stderr
		eprintf "\n"

		winner="$(printf "%s\n" "${!tracker[@]}" | sort -n | head -n 1)"
		eprintf "winner: [%d]\n" "${winner}"

		read -r -a output <<< "${tracker[${winner}]}"
	else
		eprintf "The tracker is empty, no solutions found.\n"
	fi

    eprintf "output: [%s]\n" "${output[*]}"
	printf "%s\n" "${output[@]}" | sort -n
    return
} # change_maker()

# Function: main function
# Input : script argument(s)
# Output: exercise output
# Return: 0
main()
{
    local -i money="${1:-99}"
    shift 1
    local -a coins=( "${@:-1 5 10 25}" )

    local -a -i output

    eprintf "               Money: [%s]\n" "${money}"
    eprintf "Change Denominations: [%s]\n" "${coins[*]}"
    eprintf "\n"

    mapfile -t output < <(change_maker "${money}" "${coins[@]}")

    for (( i=0; i < "${#output[@]}"; i++ )); do
        printf "%s" "${output[${i}]}"
        (( i < (${#output[@]} - 1) )) && printf " "
    done
    printf "\n"
} # main()

# Run the main function.
main "${@}"
