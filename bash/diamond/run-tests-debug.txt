
[./diamond.sh]

bash ./diamond.sh E

end_letter_index [E] = [5]
for row in 1 .. 5
for col in 1 .. 9

(col, row) = ( 1,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 2,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 3,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 4,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 5,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
first_letter_index [5] == [5] col
A

(col, row) = ( 6,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 7,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 8,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 9,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

[____A____]
for col in 1 .. 9

(col, row) = ( 1,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 2,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 3,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 4,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
first_letter_index [4] == [4] col
B

(col, row) = ( 5,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 6,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
second_letter_index [6] == [6] col
B

(col, row) = ( 7,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 8,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 9,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

[___B_B___]
for col in 1 .. 9

(col, row) = ( 1,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 2,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 3,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
first_letter_index [3] == [3] col
C

(col, row) = ( 4,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 5,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 6,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 7,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
second_letter_index [7] == [7] col
C

(col, row) = ( 8,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 9,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

[__C___C__]
for col in 1 .. 9

(col, row) = ( 1,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 2,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
first_letter_index [2] == [2] col
D

(col, row) = ( 3,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 4,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 5,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 6,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 7,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 8,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
second_letter_index [8] == [8] col
D

(col, row) = ( 9,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

[_D_____D_]
for col in 1 .. 9

(col, row) = ( 1,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
first_letter_index [1] == [1] col
E

(col, row) = ( 2,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 3,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 4,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 5,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 6,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 7,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 8,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
.

(col, row) = ( 9,  5):
Testing position for letter [E](5)
first_letter_index: [5 - (5 - 1)] = [1]
space_between_letters: [(2 * 5) - 3] = [7]
second_letter_index [1 + 7 + 1] = [9]
second_letter_index [9] == [9] col
E

[E_______E]
for row in 4 .. 1
for row in 1 .. 1
for col in 1 .. 9

(col, row) = ( 1,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 2,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
first_letter_index [2] == [2] col
D

(col, row) = ( 3,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 4,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 5,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 6,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 7,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

(col, row) = ( 8,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
second_letter_index [8] == [8] col
D

(col, row) = ( 9,  4):
Testing position for letter [D](4)
first_letter_index: [5 - (4 - 1)] = [2]
space_between_letters: [(2 * 4) - 3] = [5]
second_letter_index [2 + 5 + 1] = [8]
.

[_D_____D_]
for col in 1 .. 9

(col, row) = ( 1,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 2,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 3,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
first_letter_index [3] == [3] col
C

(col, row) = ( 4,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 5,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 6,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 7,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
second_letter_index [7] == [7] col
C

(col, row) = ( 8,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

(col, row) = ( 9,  3):
Testing position for letter [C](3)
first_letter_index: [5 - (3 - 1)] = [3]
space_between_letters: [(2 * 3) - 3] = [3]
second_letter_index [3 + 3 + 1] = [7]
.

[__C___C__]
for col in 1 .. 9

(col, row) = ( 1,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 2,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 3,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 4,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
first_letter_index [4] == [4] col
B

(col, row) = ( 5,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 6,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
second_letter_index [6] == [6] col
B

(col, row) = ( 7,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 8,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

(col, row) = ( 9,  2):
Testing position for letter [B](2)
first_letter_index: [5 - (2 - 1)] = [4]
space_between_letters: [(2 * 2) - 3] = [1]
second_letter_index [4 + 1 + 1] = [6]
.

[___B_B___]
for col in 1 .. 9

(col, row) = ( 1,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 2,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 3,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 4,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 5,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
first_letter_index [5] == [5] col
A

(col, row) = ( 6,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 7,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 8,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

(col, row) = ( 9,  1):
Testing position for letter [A](1)
first_letter_index: [5 - (1 - 1)] = [5]
space_between_letters: [(2 * 1) - 3] = [-1]
.

[____A____]

[____A____]
[___B_B___]
[__C___C__]
[_D_____D_]
[E_______E]
[_D_____D_]
[__C___C__]
[___B_B___]
[____A____]

real	0m3.306s
user	0m0.620s
sys	0m0.808s
