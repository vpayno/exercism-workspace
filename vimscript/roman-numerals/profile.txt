SCRIPT  /home/vpayno/git_vpayno/exercism-workspace/vimscript/roman-numerals/roman_numerals.vim
Sourced 1 time
Total time:   0.000023458
 Self time:   0.000023458

count     total (s)      self (s)
                            "
                            " Write a function to convert Arabic numbers to Roman numerals.
                            "
                            " Examples:
                            "
                            "   :echo ToRoman(1990)
                            "   MCMXC
                            "
                            "   :echo ToRoman(2008)
                            "   MMVIII
                            "
    1              0.000004016 function! ToRoman(number) abort
                              let l:d2r = {
                                \ 1: 'I',
                                \ 4: 'IV',
                                \ 5: 'V',
                                \ 9: 'IX',
                                \ 10: 'X',
                                \ 40: 'XL',
                                \ 50: 'L',
                                \ 90: 'XC',
                                \ 100: 'C',
                                \ 400: 'CD',
                                \ 500: 'D',
                                \ 900: 'CM',
                                \ 1000: 'M',
                                \ }
                            
                              let l:register = a:number
                              let l:roman = ''
                            
                              " They keys may look like integers; However, they're strings.
                              let l:int_keys = []
                              for l:str_key in keys(l:d2r)
                                  let l:int_keys = l:int_keys + [str2nr(l:str_key)]
                              endfor
                            
                              " the n function sorts numerically
                              let l:rkeys = reverse(sort(l:int_keys, 'n'))
                              " echom 'keys: ' . string(l:rkeys)
                            
                              " the reversed sort order is preserved in l:rkeys below
                              for l:digits in l:rkeys
                                  let l:letter = l:d2r[l:digits]
                            
                                  while l:register >= l:digits
                                      let l:roman = l:roman . l:letter
                                      let l:register -= l:digits
                                  endwhile
                              endfor
                            
                              return l:roman
                            endfunction

FUNCTION  ToRoman()
    Defined: ~/git_vpayno/exercism-workspace/vimscript/roman-numerals/roman_numerals.vim:12
Called 40 times
Total time:   0.004744926
 Self time:   0.004744926

count     total (s)      self (s)
   40                 0.000200682   let l:d2r = { 1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M', }
                                  
   40                 0.000033420   let l:register = a:number
   40                 0.000027449   let l:roman = ''
                                  
                                    " They keys may look like integers; However, they're strings.
   40                 0.000026829   let l:int_keys = []
  560                 0.000329894   for l:str_key in keys(l:d2r)
  520                 0.000785677       let l:int_keys = l:int_keys + [str2nr(l:str_key)]
  560                 0.000155521   endfor
                                  
                                    " the n function sorts numerically
   40                 0.000371931   let l:rkeys = reverse(sort(l:int_keys, 'n'))
                                    " echom 'keys: ' . string(l:rkeys)
                                  
                                    " the reversed sort order is preserved in l:rkeys below
  560                 0.000245480   for l:digits in l:rkeys
  520                 0.000552806       let l:letter = l:d2r[l:digits]
                                  
  653                 0.000427167       while l:register >= l:digits
  133                 0.000134881           let l:roman = l:roman . l:letter
  133                 0.000108996           let l:register -= l:digits
  653                 0.000199728       endwhile
  560                 0.000152848   endfor
                                  
   40                 0.000024608   return l:roman

FUNCTIONS SORTED ON TOTAL TIME
count     total (s)      self (s)  function
   40   0.004744926                ToRoman()

FUNCTIONS SORTED ON SELF TIME
count     total (s)      self (s)  function
   40                 0.004744926  ToRoman()

