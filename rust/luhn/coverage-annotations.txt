/home/vpayno/git_vpayno/exercism-workspace/rust/luhn/src/lib.rs:
    1|       |/// Check a Luhn checksum.
    2|       |///
    3|       |/// Example - test empty string
    4|       |/// ```rust
    5|       |/// use luhn::*;
    6|       |///
    7|       |/// let input: &str = "";
    8|       |///
    9|       |/// let want: bool = false;
   10|       |/// let got: bool = luhn::is_valid(input);
   11|       |///
   12|       |/// assert_eq!(got, want);
   13|       |/// ```
   14|       |///
   15|       |/// Example - test string with non-ascii char
   16|       |/// ```rust
   17|       |/// use luhn::*;
   18|       |///
   19|       |/// let input: &str = "123 âœ“ 456";
   20|       |///
   21|       |/// let want: bool = false;
   22|       |/// let got: bool = luhn::is_valid(input);
   23|       |///
   24|       |/// assert_eq!(got, want);
   25|       |/// ```
   26|       |///
   27|       |/// Example - test string with ascii letter
   28|       |/// ```rust
   29|       |/// use luhn::*;
   30|       |///
   31|       |/// let input: &str = "123 a 456";
   32|       |///
   33|       |/// let want: bool = false;
   34|       |/// let got: bool = luhn::is_valid(input);
   35|       |///
   36|       |/// assert_eq!(got, want);
   37|       |/// ```
   38|       |///
   39|       |/// Example - valid input that's a luhn number
   40|       |/// ```rust
   41|       |/// use luhn::*;
   42|       |///
   43|       |/// let input: &str = "4539 3195 0343 6467";
   44|       |///
   45|       |/// let want: bool = true;
   46|       |/// let got: bool = luhn::is_valid(input);
   47|       |///
   48|       |/// assert_eq!(got, want);
   49|       |/// ```
   50|       |///
   51|       |/// Example - valid input that isn't a luhn number
   52|       |/// ```rust
   53|       |/// use luhn::*;
   54|       |///
   55|       |/// let input: &str = "8273 1232 7352 0569";
   56|       |///
   57|       |/// let want: bool = false;
   58|       |/// let got: bool = luhn::is_valid(input);
   59|       |///
   60|       |/// assert_eq!(got, want);
   61|       |/// ```
   62|     63|pub fn is_valid(code: &str) -> bool {
   63|     63|    match code.trim() {
   64|     63|        code if code == "0" => false,
                      ^6                     ^6
   65|     57|        code if code.is_empty() => false,
                      ^0                         ^0
   66|     57|        code if !code.is_ascii() => false,
                      ^6                          ^6
   67|     51|        code if !is_only_numbers_and_spaces(code) => false,
                      ^21                                          ^21
   68|     30|        _ => is_luhn_number(code),
   69|       |    }
   70|     63|}
  ------------------
  | luhn::is_valid:
  |   62|     63|pub fn is_valid(code: &str) -> bool {
  |   63|     63|    match code.trim() {
  |   64|     63|        code if code == "0" => false,
  |                      ^6                     ^6
  |   65|     57|        code if code.is_empty() => false,
  |                      ^0                         ^0
  |   66|     57|        code if !code.is_ascii() => false,
  |                      ^6                          ^6
  |   67|     51|        code if !is_only_numbers_and_spaces(code) => false,
  |                      ^21                                          ^21
  |   68|     30|        _ => is_luhn_number(code),
  |   69|       |    }
  |   70|     63|}
  ------------------
  | Unexecuted instantiation: luhn::is_valid
  ------------------
   71|       |
   72|       |/// Does the math on a checked input string to see if it's a valid luhn number.
   73|       |///
   74|       |/// Example - test if a number is a luhn number
   75|       |/// ```rust
   76|       |/// use luhn::*;
   77|       |///
   78|       |/// let input: &str = "4539 3195 0343 6467";
   79|       |///
   80|       |/// let want: bool = true;
   81|       |/// let got: bool = luhn::is_luhn_number(input);
   82|       |///
   83|       |/// assert_eq!(got, want);
   84|       |/// ```
   85|       |///
   86|       |/// Example - valid input that isn't a luhn number
   87|       |/// ```rust
   88|       |/// use luhn::*;
   89|       |///
   90|       |/// let input: &str = "8273 1232 7352 0569";
   91|       |///
   92|       |/// let want: bool = false;
   93|       |/// let got: bool = luhn::is_luhn_number(input);
   94|       |///
   95|       |/// assert_eq!(got, want);
   96|       |/// ```
   97|     30|pub fn is_luhn_number(code: &str) -> bool {
   98|     30|    let digits: Vec<u32> = extract_digits_from_str_slice(code);
   99|     30|
  100|     30|    let numbers = step_one_and_two(digits);
  101|     30|
  102|     30|    let digit_sum: u32 = sum(numbers);
  103|     30|
  104|     30|    (digit_sum % 10) == 0
  105|     30|}
  ------------------
  | luhn::is_luhn_number:
  |   97|     30|pub fn is_luhn_number(code: &str) -> bool {
  |   98|     30|    let digits: Vec<u32> = extract_digits_from_str_slice(code);
  |   99|     30|
  |  100|     30|    let numbers = step_one_and_two(digits);
  |  101|     30|
  |  102|     30|    let digit_sum: u32 = sum(numbers);
  |  103|     30|
  |  104|     30|    (digit_sum % 10) == 0
  |  105|     30|}
  ------------------
  | Unexecuted instantiation: luhn::is_luhn_number
  ------------------
  106|       |
  107|       |/// Performs the first and second steps of the luhn algorithm.
  108|       |///
  109|       |/// Example
  110|       |/// ```rust
  111|       |/// use luhn::*;
  112|       |///
  113|       |/// let input: &str = "4539 3195 0343 6467";
  114|       |///
  115|       |/// let want: Vec<u32> = vec![7,3,4,3,3,8,3,0,5,9,1,6,9,6,5,8];
  116|       |/// let got: Vec<u32> = step_one_and_two(extract_digits_from_str_slice(input));
  117|       |///
  118|       |/// assert_eq!(got, want);
  119|       |/// ```
  120|     30|pub fn step_one_and_two(mut vector: Vec<u32>) -> Vec<u32> {
  121|     30|    let mut i = 1;
  122|       |
  123|     96|    while i < vector.len() {
  124|     93|        vector[i] *= 2;
  125|     93|
  126|     93|        if vector[i] > 9 {
  127|     48|            vector[i] -= 9;
  128|     48|        }
                       ^45
  129|       |
  130|     93|        i += 2;
  131|     93|
  132|     93|        if i >= vector.len() {
  133|     27|            break;
  134|     66|        }
  135|       |    }
  136|       |
  137|     30|    vector
  138|     30|}
  ------------------
  | luhn::step_one_and_two:
  |  120|     30|pub fn step_one_and_two(mut vector: Vec<u32>) -> Vec<u32> {
  |  121|     30|    let mut i = 1;
  |  122|       |
  |  123|     96|    while i < vector.len() {
  |  124|     93|        vector[i] *= 2;
  |  125|     93|
  |  126|     93|        if vector[i] > 9 {
  |  127|     48|            vector[i] -= 9;
  |  128|     48|        }
  |                       ^45
  |  129|       |
  |  130|     93|        i += 2;
  |  131|     93|
  |  132|     93|        if i >= vector.len() {
  |  133|     27|            break;
  |  134|     66|        }
  |  135|       |    }
  |  136|       |
  |  137|     30|    vector
  |  138|     30|}
  ------------------
  | Unexecuted instantiation: luhn::step_one_and_two
  ------------------
  139|       |
  140|       |/// Sums Vector of numbers.
  141|       |///
  142|       |/// Example
  143|       |/// ```rust
  144|       |/// use luhn::*;
  145|       |///
  146|       |/// let input: &str = "0 1234 5678 9";
  147|       |///
  148|       |/// let want: u32 = 45;
  149|       |/// let got: u32 = luhn::sum(extract_digits_from_str_slice(input));
  150|       |///
  151|       |/// assert_eq!(got, want);
  152|       |/// ```
  153|       |///
  154|       |/// Example
  155|       |/// ```rust
  156|       |/// use luhn::*;
  157|       |///
  158|       |/// let input: &str = "4539 3195 0343 6467";
  159|       |/// let digits: Vec<u32> = step_one_and_two(extract_digits_from_str_slice(input));
  160|       |///
  161|       |/// let want: u32 = 80;
  162|       |/// let got: u32 = luhn::sum(digits);
  163|       |///
  164|       |/// assert_eq!(got, want);
  165|       |/// ```
  166|     30|pub fn sum(vector: Vec<u32>) -> u32 {
  167|     30|    vector.iter().sum()
  168|     30|}
  ------------------
  | luhn::sum:
  |  166|     30|pub fn sum(vector: Vec<u32>) -> u32 {
  |  167|     30|    vector.iter().sum()
  |  168|     30|}
  ------------------
  | Unexecuted instantiation: luhn::sum
  ------------------
  169|       |
  170|       |/// Creates a reversed Vector of u32 from a string slice.
  171|       |///
  172|       |/// Example
  173|       |/// ```rust
  174|       |/// use luhn::*;
  175|       |///
  176|       |/// let input: &str = "1a2b 3c4d";
  177|       |///
  178|       |/// let want: Vec<u32> = vec![4,3,2,1];
  179|       |/// let got: Vec<u32> = extract_digits_from_str_slice(input);
  180|       |///
  181|       |/// println!("want: {:?}\n", want);
  182|       |/// println!(" got: {:?}\n", got);
  183|       |///
  184|       |/// assert!(got == want, "vectors aren't equal");
  185|       |/// ```
  186|     30|pub fn extract_digits_from_str_slice(code: &str) -> Vec<u32> {
  187|     30|    code.chars()
  188|    243|        .filter(|x| x.is_ascii_digit())
  ------------------
  | luhn::extract_digits_from_str_slice::{closure#0}:
  |  188|    243|        .filter(|x| x.is_ascii_digit())
  ------------------
  | Unexecuted instantiation: luhn::extract_digits_from_str_slice::{closure#0}
  ------------------
  189|    204|        .map(|x| x.to_digit(10).unwrap())
  ------------------
  | luhn::extract_digits_from_str_slice::{closure#1}:
  |  189|    204|        .map(|x| x.to_digit(10).unwrap())
  ------------------
  | Unexecuted instantiation: luhn::extract_digits_from_str_slice::{closure#1}
  ------------------
  190|     30|        .rev()
  191|     30|        .collect()
  192|     30|}
  ------------------
  | luhn::extract_digits_from_str_slice:
  |  186|     30|pub fn extract_digits_from_str_slice(code: &str) -> Vec<u32> {
  |  187|     30|    code.chars()
  |  188|     30|        .filter(|x| x.is_ascii_digit())
  |  189|     30|        .map(|x| x.to_digit(10).unwrap())
  |  190|     30|        .rev()
  |  191|     30|        .collect()
  |  192|     30|}
  ------------------
  | Unexecuted instantiation: luhn::extract_digits_from_str_slice
  ------------------
  193|       |
  194|       |/// Checks to see if string slice only has numbers and spaces.
  195|       |///
  196|       |/// Example
  197|       |/// ```rust
  198|       |/// use luhn::*;
  199|       |///
  200|       |/// let input: &str = "1234 5678 9";
  201|       |///
  202|       |/// let want: bool = true;
  203|       |/// let got: bool = luhn::is_only_numbers_and_spaces(input);
  204|       |///
  205|       |/// assert_eq!(got, want);
  206|       |/// ```
  207|       |///
  208|       |/// Example
  209|       |/// ```rust
  210|       |/// use luhn::*;
  211|       |///
  212|       |/// let input: &str = "1234 a678 9";
  213|       |///
  214|       |/// let want: bool = false;
  215|       |/// let got: bool = luhn::is_only_numbers_and_spaces(input);
  216|       |///
  217|       |/// assert_eq!(got, want);
  218|       |/// ```
  219|     51|pub fn is_only_numbers_and_spaces(code: &str) -> bool {
  220|    315|    for c in code.chars() {
                                ^51
  221|    315|        if !c.is_ascii_digit() && !c.is_whitespace() {
                                                ^60
  222|     21|            return false;
  223|    294|        };
  224|       |    }
  225|       |
  226|     30|    true
  227|     51|}
  ------------------
  | luhn::is_only_numbers_and_spaces:
  |  219|     51|pub fn is_only_numbers_and_spaces(code: &str) -> bool {
  |  220|    315|    for c in code.chars() {
  |                                ^51
  |  221|    315|        if !c.is_ascii_digit() && !c.is_whitespace() {
  |                                                ^60
  |  222|     21|            return false;
  |  223|    294|        };
  |  224|       |    }
  |  225|       |
  |  226|     30|    true
  |  227|     51|}
  ------------------
  | Unexecuted instantiation: luhn::is_only_numbers_and_spaces
  ------------------

/home/vpayno/git_vpayno/exercism-workspace/rust/luhn/src/main.rs:
    1|       |use luhn::*;
    2|       |
    3|      0|fn main() {
    4|      0|    let input: &str = "4539 3195 0343 6467";
    5|      0|
    6|      0|    println!("is empty: {}\n", input.is_empty());
    7|      0|
    8|      0|    println!("is ascii: {}\n", input.is_ascii());
    9|      0|
   10|      0|    println!("is correct: {}\n", is_only_numbers_and_spaces(input));
   11|      0|
   12|      0|    let clean: Vec<u32> = extract_digits_from_str_slice(input);
   13|      0|
   14|      0|    println!("  clean: {:?}\n", clean);
   15|      0|
   16|      0|    let updated: Vec<u32> = step_one_and_two(clean);
   17|      0|
   18|      0|    println!("updated: {:?}\n", updated);
   19|      0|
   20|      0|    let digit_sum: u32 = sum(updated);
   21|      0|
   22|      0|    println!("valid: {}\n", digit_sum % 80 == 0);
   23|      0|
   24|      0|    println!("valid: {}\n", is_valid(input));
   25|      0|}
  ------------------
  | Unexecuted instantiation: luhn::main
  ------------------
  | Unexecuted instantiation: luhn::main
  ------------------