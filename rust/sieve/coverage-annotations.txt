    1|       |//! Exercise Url: <https://exercism.org/tracks/rust/exercises/sieve>
    2|       |
    3|       |/// primes_up_to returns primes from 2 to number given.
    4|       |///
    5|       |/// Example
    6|       |///
    7|       |/// ```rust
    8|       |/// use sieve::primes_up_to;
    9|       |///
   10|       |/// let want = [2, 3, 5, 7, 11, 13, 17, 19];
   11|       |/// let got = primes_up_to(20);
   12|       |///
   13|       |/// assert_eq!(got, want);
   14|       |/// ```
   15|     15|pub fn primes_up_to(upper_bound: u64) -> Vec<u64> {
   16|     15|    let mut result = Vec::new();
   17|     15|
   18|     15|    if upper_bound <= 1 {
   19|      3|        return result;
   20|     12|    }
   21|     12|
   22|     12|    if upper_bound == 2 {
   23|      3|        result.push(2);
   24|      3|
   25|      3|        return result;
   26|      9|    };
   27|      9|
   28|      9|    let mut numbers: Vec<bool> = vec![true; (upper_bound + 1) as usize];
   29|      9|
   30|      9|    // upper_bound has to be at least 3 to get here, we don't need to make sure these positions exist
   31|      9|    numbers[0] = false;
   32|      9|    numbers[1] = false;
   33|       |
   34|  3.05k|    for (number, is_prime) in numbers.iter_mut().enumerate().skip(3) {
                                            ^9
   35|  3.05k|        if number % 2 == 0 {
   36|  1.52k|            *is_prime = false;
   37|  1.52k|        }
   38|       |    }
   39|       |
   40|  3.06k|    for number in 2..numbers.len() {
                                   ^9
   41|  3.06k|        let is_prime = numbers[number];
   42|  3.06k|
   43|  3.06k|        if is_prime {
   44|    534|            let mut j: usize = 2;
   45|       |
   46|  6.45k|            while number * j <= upper_bound as usize {
   47|  5.92k|                let i: usize = number * j;
   48|  5.92k|                numbers[i] = false;
   49|  5.92k|                j += 1;
   50|  5.92k|            }
   51|  2.52k|        }
   52|       |    }
   53|       |
   54|  3.07k|    for (number, is_prime) in numbers.into_iter().enumerate() {
                                            ^9
   55|  3.07k|        if is_prime {
   56|    534|            result.push(number as u64);
   57|  2.54k|        }
   58|       |    }
   59|       |
   60|      9|    result
   61|     15|}
  ------------------
  | sieve::primes_up_to:
  |   15|     15|pub fn primes_up_to(upper_bound: u64) -> Vec<u64> {
  |   16|     15|    let mut result = Vec::new();
  |   17|     15|
  |   18|     15|    if upper_bound <= 1 {
  |   19|      3|        return result;
  |   20|     12|    }
  |   21|     12|
  |   22|     12|    if upper_bound == 2 {
  |   23|      3|        result.push(2);
  |   24|      3|
  |   25|      3|        return result;
  |   26|      9|    };
  |   27|      9|
  |   28|      9|    let mut numbers: Vec<bool> = vec![true; (upper_bound + 1) as usize];
  |   29|      9|
  |   30|      9|    // upper_bound has to be at least 3 to get here, we don't need to make sure these positions exist
  |   31|      9|    numbers[0] = false;
  |   32|      9|    numbers[1] = false;
  |   33|       |
  |   34|  3.05k|    for (number, is_prime) in numbers.iter_mut().enumerate().skip(3) {
  |                                            ^9
  |   35|  3.05k|        if number % 2 == 0 {
  |   36|  1.52k|            *is_prime = false;
  |   37|  1.52k|        }
  |   38|       |    }
  |   39|       |
  |   40|  3.06k|    for number in 2..numbers.len() {
  |                                   ^9
  |   41|  3.06k|        let is_prime = numbers[number];
  |   42|  3.06k|
  |   43|  3.06k|        if is_prime {
  |   44|    534|            let mut j: usize = 2;
  |   45|       |
  |   46|  6.45k|            while number * j <= upper_bound as usize {
  |   47|  5.92k|                let i: usize = number * j;
  |   48|  5.92k|                numbers[i] = false;
  |   49|  5.92k|                j += 1;
  |   50|  5.92k|            }
  |   51|  2.52k|        }
  |   52|       |    }
  |   53|       |
  |   54|  3.07k|    for (number, is_prime) in numbers.into_iter().enumerate() {
  |                                            ^9
  |   55|  3.07k|        if is_prime {
  |   56|    534|            result.push(number as u64);
  |   57|  2.54k|        }
  |   58|       |    }
  |   59|       |
  |   60|      9|    result
  |   61|     15|}
  ------------------
  | Unexecuted instantiation: sieve::primes_up_to
  ------------------