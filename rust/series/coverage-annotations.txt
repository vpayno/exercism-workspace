    1|       |/// Exercise Url: <https://exercism.org/tracks/rust/exercises/series>
    2|       |
    3|       |/// Given a string of digits, output all the contiguous substrings of length n in that string in the order that they appear.
    4|       |///
    5|       |/// Not sure why we're not returning a Result here.
    6|       |///
    7|       |/// Example with a sequence of 5 digits and a span of 3:
    8|       |/// ```rust
    9|       |/// use series::*;
   10|       |///
   11|       |/// let want: Vec<String> = vec!["491".to_string(), "914".to_string(), "142".to_string()];
   12|       |/// let got: Vec<String> = series("49142", 3);
   13|       |///
   14|       |/// assert_eq!(got, want);
   15|       |/// ```
   16|       |///
   17|       |/// Example with a sequence of 5 digits and a span of 2:
   18|       |/// ```rust
   19|       |/// use series::*;
   20|       |///
   21|       |/// let want: Vec<String> = vec!["4914".to_string(), "9142".to_string()];
   22|       |/// let got: Vec<String> = series("49142", 4);
   23|       |///
   24|       |/// assert_eq!(got, want);
   25|       |/// ```
   26|     15|pub fn series(sequence: &str, span: usize) -> Vec<String> {
   27|     15|    match (sequence, span) {
   28|     15|        (_, span) if span == 0 => {
                          ^3
   29|       |            // this corner case, with_zero_length, doesn't make sense, why isn't the data just an empty vector?
   30|      3|            vec!["".to_string(); sequence.len() + 1]
   31|       |        }
   32|     12|        (sequence, span) if sequence.len() < span => {
                       ^6
   33|       |            // corner case ignored by tests
   34|      6|            vec![]
   35|       |        }
   36|      6|        (sequence, span) => sequence
   37|      6|            .chars()
   38|      6|            .collect::<Vec<char>>()
   39|      6|            .windows(span)
   40|     15|            .map(|x| x.iter().collect::<String>())
  ------------------
  | series::series::{closure#0}:
  |   40|     15|            .map(|x| x.iter().collect::<String>())
  ------------------
  | Unexecuted instantiation: series::series::{closure#0}
  ------------------
   41|      6|            .collect(),
   42|       |    }
   43|     15|}
  ------------------
  | series::series:
  |   26|     15|pub fn series(sequence: &str, span: usize) -> Vec<String> {
  |   27|     15|    match (sequence, span) {
  |   28|     15|        (_, span) if span == 0 => {
  |                          ^3
  |   29|       |            // this corner case, with_zero_length, doesn't make sense, why isn't the data just an empty vector?
  |   30|      3|            vec!["".to_string(); sequence.len() + 1]
  |   31|       |        }
  |   32|     12|        (sequence, span) if sequence.len() < span => {
  |                       ^6
  |   33|       |            // corner case ignored by tests
  |   34|      6|            vec![]
  |   35|       |        }
  |   36|      6|        (sequence, span) => sequence
  |   37|      6|            .chars()
  |   38|      6|            .collect::<Vec<char>>()
  |   39|      6|            .windows(span)
  |   40|      6|            .map(|x| x.iter().collect::<String>())
  |   41|      6|            .collect(),
  |   42|       |    }
  |   43|     15|}
  ------------------
  | Unexecuted instantiation: series::series
  ------------------