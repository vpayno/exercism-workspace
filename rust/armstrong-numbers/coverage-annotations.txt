    1|     39|pub fn is_armstrong_number(candidate: u32) -> bool {
    2|     39|    if candidate < 10 {
    3|      6|        return true;
    4|     33|    }
    5|     33|
    6|     33|    let digit_count: usize = ((candidate as f64).log10() as usize) + 1;
    7|     33|
    8|     33|    let mut num: u64 = candidate as u64;
    9|     33|    let mut pow_total: u64 = 0;
   10|       |
   11|    237|    while num > 0 {
   12|    204|        let pow_temp: u64 = num % 10;
   13|    204|        let mut pow_temp_total = 1;
   14|    204|
   15|  1.54k|        for _ in 0..digit_count {
   16|  1.54k|            pow_temp_total *= pow_temp;
   17|  1.54k|        }
   18|       |
   19|    204|        pow_total += pow_temp_total;
   20|    204|        num /= 10;
   21|       |    }
   22|       |
   23|     33|    pow_total == (candidate as u64)
   24|     39|}
  ------------------
  | Unexecuted instantiation: armstrong_numbers::is_armstrong_number
  ------------------
  | armstrong_numbers::is_armstrong_number:
  |    1|     39|pub fn is_armstrong_number(candidate: u32) -> bool {
  |    2|     39|    if candidate < 10 {
  |    3|      6|        return true;
  |    4|     33|    }
  |    5|     33|
  |    6|     33|    let digit_count: usize = ((candidate as f64).log10() as usize) + 1;
  |    7|     33|
  |    8|     33|    let mut num: u64 = candidate as u64;
  |    9|     33|    let mut pow_total: u64 = 0;
  |   10|       |
  |   11|    237|    while num > 0 {
  |   12|    204|        let pow_temp: u64 = num % 10;
  |   13|    204|        let mut pow_temp_total = 1;
  |   14|    204|
  |   15|  1.54k|        for _ in 0..digit_count {
  |   16|  1.54k|            pow_temp_total *= pow_temp;
  |   17|  1.54k|        }
  |   18|       |
  |   19|    204|        pow_total += pow_temp_total;
  |   20|    204|        num /= 10;
  |   21|       |    }
  |   22|       |
  |   23|     33|    pow_total == (candidate as u64)
  |   24|     39|}
  ------------------