    1|       |use std::collections::HashSet;
    2|       |use unicode_segmentation::UnicodeSegmentation;
    3|       |
    4|     42|pub fn anagrams_for<'a>(word: &str, possible_anagrams: &[&'a str]) -> HashSet<&'a str> {
    5|     42|    let mut anagrams: HashSet<&'a str> = HashSet::new();
    6|     42|
    7|     42|    let lc_word: String = word.to_lowercase().graphemes(true).collect();
    8|     42|    let mut vec_word: Vec<u16> = lc_word.encode_utf16().collect();
    9|     42|    vec_word.sort();
   10|       |
   11|     42|    let test_word: String = match String::from_utf16(&vec_word.clone()) {
   12|     42|        Ok(value) => value,
   13|      0|        Err(error) => {
   14|      0|            println!("falied to convert {:?} to a string: {}", vec_word, error);
   15|      0|
   16|      0|            return anagrams.clone();
   17|       |        }
   18|       |    };
   19|       |
   20|     42|    let test_length = vec_word.len();
   21|     42|
   22|     42|    println!("\ntest_word: {}", word);
   23|       |
   24|    138|    for candidate in possible_anagrams {
                      ^96
   25|     96|        let lc_candidate: String = candidate.to_lowercase().graphemes(true).collect();
   26|     96|
   27|     96|        if lc_word.eq(&lc_candidate) {
   28|      9|            println!("{} == {} | skipping", lc_word, lc_candidate);
   29|      9|            continue;
   30|     87|        }
   31|     87|
   32|     87|        let mut vec_candidate: Vec<u16> = lc_candidate.encode_utf16().collect();
   33|     87|        vec_candidate.sort();
   34|       |
   35|     87|        let test_candidate: String = match String::from_utf16(&vec_candidate.clone()) {
   36|     87|            Ok(value) => value,
   37|      0|            Err(error) => {
   38|      0|                panic!("{}", error);
   39|       |            }
   40|       |        };
   41|       |
   42|     87|        if test_length != vec_candidate.len() {
   43|     39|            continue;
   44|     48|        }
   45|     48|
   46|     48|        println!(
   47|     48|            "test_word: {}\ttest_candidate: {}",
   48|     48|            test_word, test_candidate
   49|     48|        );
   50|     48|
   51|     48|        if test_word.eq(&test_candidate) {
   52|     24|            println!("{} == {} | adding {}", test_word, test_candidate, candidate);
   53|     24|            anagrams.insert(*candidate);
   54|     24|        }
   55|       |
   56|     48|        println!();
   57|       |    }
   58|       |
   59|     42|    println!("found anagrams: {:?}", anagrams);
   60|     42|
   61|     42|    anagrams.clone()
   62|     42|}
  ------------------
  | Unexecuted instantiation: anagram::anagrams_for
  ------------------
  | anagram::anagrams_for:
  |    4|     42|pub fn anagrams_for<'a>(word: &str, possible_anagrams: &[&'a str]) -> HashSet<&'a str> {
  |    5|     42|    let mut anagrams: HashSet<&'a str> = HashSet::new();
  |    6|     42|
  |    7|     42|    let lc_word: String = word.to_lowercase().graphemes(true).collect();
  |    8|     42|    let mut vec_word: Vec<u16> = lc_word.encode_utf16().collect();
  |    9|     42|    vec_word.sort();
  |   10|       |
  |   11|     42|    let test_word: String = match String::from_utf16(&vec_word.clone()) {
  |   12|     42|        Ok(value) => value,
  |   13|      0|        Err(error) => {
  |   14|      0|            println!("falied to convert {:?} to a string: {}", vec_word, error);
  |   15|      0|
  |   16|      0|            return anagrams.clone();
  |   17|       |        }
  |   18|       |    };
  |   19|       |
  |   20|     42|    let test_length = vec_word.len();
  |   21|     42|
  |   22|     42|    println!("\ntest_word: {}", word);
  |   23|       |
  |   24|    138|    for candidate in possible_anagrams {
  |                      ^96
  |   25|     96|        let lc_candidate: String = candidate.to_lowercase().graphemes(true).collect();
  |   26|     96|
  |   27|     96|        if lc_word.eq(&lc_candidate) {
  |   28|      9|            println!("{} == {} | skipping", lc_word, lc_candidate);
  |   29|      9|            continue;
  |   30|     87|        }
  |   31|     87|
  |   32|     87|        let mut vec_candidate: Vec<u16> = lc_candidate.encode_utf16().collect();
  |   33|     87|        vec_candidate.sort();
  |   34|       |
  |   35|     87|        let test_candidate: String = match String::from_utf16(&vec_candidate.clone()) {
  |   36|     87|            Ok(value) => value,
  |   37|      0|            Err(error) => {
  |   38|      0|                panic!("{}", error);
  |   39|       |            }
  |   40|       |        };
  |   41|       |
  |   42|     87|        if test_length != vec_candidate.len() {
  |   43|     39|            continue;
  |   44|     48|        }
  |   45|     48|
  |   46|     48|        println!(
  |   47|     48|            "test_word: {}\ttest_candidate: {}",
  |   48|     48|            test_word, test_candidate
  |   49|     48|        );
  |   50|     48|
  |   51|     48|        if test_word.eq(&test_candidate) {
  |   52|     24|            println!("{} == {} | adding {}", test_word, test_candidate, candidate);
  |   53|     24|            anagrams.insert(*candidate);
  |   54|     24|        }
  |   55|       |
  |   56|     48|        println!();
  |   57|       |    }
  |   58|       |
  |   59|     42|    println!("found anagrams: {:?}", anagrams);
  |   60|     42|
  |   61|     42|    anagrams.clone()
  |   62|     42|}
  ------------------