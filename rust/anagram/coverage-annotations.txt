    1|       |use std::collections::HashSet;
    2|       |use unicode_segmentation::UnicodeSegmentation;
    3|       |
    4|     42|pub fn anagrams_for<'a>(word: &str, possible_anagrams: &[&'a str]) -> HashSet<&'a str> {
    5|     42|    let mut anagrams: HashSet<&'a str> = HashSet::new();
    6|     42|
    7|     42|    let lc_word: String = word.to_lowercase().graphemes(true).collect();
    8|     42|    let mut vec_word: Vec<u16> = lc_word.encode_utf16().collect();
    9|     42|    vec_word.sort();
   10|       |
   11|     42|    let test_word: String = match String::from_utf16(&vec_word.clone()) {
   12|     42|        Ok(value) => value,
   13|      0|        Err(error) => {
   14|      0|            println!(
   15|      0|                "falied to convert test word {:?} to a string: {}",
   16|      0|                vec_word, error
   17|      0|            );
   18|      0|
   19|      0|            return anagrams.clone();
   20|       |        }
   21|       |    };
   22|       |
   23|     42|    println!("\ntest_word: {}", word);
   24|       |
   25|    138|    for candidate in possible_anagrams {
                      ^96
   26|     96|        let lc_candidate: String = candidate.to_lowercase().graphemes(true).collect();
   27|     96|
   28|     96|        if lc_word.eq(&lc_candidate) {
   29|      9|            println!("{} == {} | skipping", lc_word, lc_candidate);
   30|      9|            continue;
   31|     87|        }
   32|     87|
   33|     87|        let mut vec_candidate: Vec<u16> = lc_candidate.encode_utf16().collect();
   34|     87|        vec_candidate.sort();
   35|       |
   36|     87|        let test_candidate: String = match String::from_utf16(&vec_candidate.clone()) {
   37|     87|            Ok(value) => value,
   38|      0|            Err(error) => {
   39|      0|                println!(
   40|      0|                    "falied to convert candidate {:?} to a string: {}",
   41|      0|                    vec_candidate, error
   42|      0|                );
   43|      0|                continue;
   44|       |            }
   45|       |        };
   46|       |
   47|     87|        println!(
   48|     87|            "test_word: {}\ttest_candidate: {}",
   49|     87|            test_word, test_candidate
   50|     87|        );
   51|     87|
   52|     87|        if test_word.eq(&test_candidate) {
   53|     24|            println!("{} == {} | adding {}", test_word, test_candidate, candidate);
   54|     24|            anagrams.insert(*candidate);
   55|     63|        }
   56|       |
   57|     87|        println!();
   58|       |    }
   59|       |
   60|     42|    println!("found anagrams: {:?}", anagrams);
   61|     42|
   62|     42|    anagrams.clone()
   63|     42|}
  ------------------
  | Unexecuted instantiation: anagram::anagrams_for
  ------------------
  | anagram::anagrams_for:
  |    4|     42|pub fn anagrams_for<'a>(word: &str, possible_anagrams: &[&'a str]) -> HashSet<&'a str> {
  |    5|     42|    let mut anagrams: HashSet<&'a str> = HashSet::new();
  |    6|     42|
  |    7|     42|    let lc_word: String = word.to_lowercase().graphemes(true).collect();
  |    8|     42|    let mut vec_word: Vec<u16> = lc_word.encode_utf16().collect();
  |    9|     42|    vec_word.sort();
  |   10|       |
  |   11|     42|    let test_word: String = match String::from_utf16(&vec_word.clone()) {
  |   12|     42|        Ok(value) => value,
  |   13|      0|        Err(error) => {
  |   14|      0|            println!(
  |   15|      0|                "falied to convert test word {:?} to a string: {}",
  |   16|      0|                vec_word, error
  |   17|      0|            );
  |   18|      0|
  |   19|      0|            return anagrams.clone();
  |   20|       |        }
  |   21|       |    };
  |   22|       |
  |   23|     42|    println!("\ntest_word: {}", word);
  |   24|       |
  |   25|    138|    for candidate in possible_anagrams {
  |                      ^96
  |   26|     96|        let lc_candidate: String = candidate.to_lowercase().graphemes(true).collect();
  |   27|     96|
  |   28|     96|        if lc_word.eq(&lc_candidate) {
  |   29|      9|            println!("{} == {} | skipping", lc_word, lc_candidate);
  |   30|      9|            continue;
  |   31|     87|        }
  |   32|     87|
  |   33|     87|        let mut vec_candidate: Vec<u16> = lc_candidate.encode_utf16().collect();
  |   34|     87|        vec_candidate.sort();
  |   35|       |
  |   36|     87|        let test_candidate: String = match String::from_utf16(&vec_candidate.clone()) {
  |   37|     87|            Ok(value) => value,
  |   38|      0|            Err(error) => {
  |   39|      0|                println!(
  |   40|      0|                    "falied to convert candidate {:?} to a string: {}",
  |   41|      0|                    vec_candidate, error
  |   42|      0|                );
  |   43|      0|                continue;
  |   44|       |            }
  |   45|       |        };
  |   46|       |
  |   47|     87|        println!(
  |   48|     87|            "test_word: {}\ttest_candidate: {}",
  |   49|     87|            test_word, test_candidate
  |   50|     87|        );
  |   51|     87|
  |   52|     87|        if test_word.eq(&test_candidate) {
  |   53|     24|            println!("{} == {} | adding {}", test_word, test_candidate, candidate);
  |   54|     24|            anagrams.insert(*candidate);
  |   55|     63|        }
  |   56|       |
  |   57|     87|        println!();
  |   58|       |    }
  |   59|       |
  |   60|     42|    println!("found anagrams: {:?}", anagrams);
  |   61|     42|
  |   62|     42|    anagrams.clone()
  |   63|     42|}
  ------------------