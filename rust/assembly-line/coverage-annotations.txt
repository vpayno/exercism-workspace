    1|     42|fn get_success_rate(speed: u8) -> f64 {
    2|       |    //  1-4: 100% success rate
    3|       |    //  5-8:  90% success rate
    4|       |    // 9-10:  77% success rate
    5|     42|    let result: f64 = match speed {
    6|     36|        1..=4 => 1.00,
                               ^12
    7|     24|        5..=8 => 0.90,
                               ^12
    8|     12|        9..=10 => 0.77,
                                ^9
    9|      9|        _ => 0.0,
   10|       |    };
   11|       |
   12|       |    // I know I could just return from the match statement but this is more obvious.
   13|     42|    result
   14|     42|}
  ------------------
  | assembly_line::get_success_rate:
  |    1|     12|fn get_success_rate(speed: u8) -> f64 {
  |    2|       |    //  1-4: 100% success rate
  |    3|       |    //  5-8:  90% success rate
  |    4|       |    // 9-10:  77% success rate
  |    5|     12|    let result: f64 = match speed {
  |    6|     12|        1..=4 => 1.00,
  |                               ^3
  |    7|      9|        5..=8 => 0.90,
  |                               ^3
  |    8|      6|        9..=10 => 0.77,
  |                                ^3
  |    9|      3|        _ => 0.0,
  |   10|       |    };
  |   11|       |
  |   12|       |    // I know I could just return from the match statement but this is more obvious.
  |   13|     12|    result
  |   14|     12|}
  ------------------
  | assembly_line::get_success_rate:
  |    1|     30|fn get_success_rate(speed: u8) -> f64 {
  |    2|       |    //  1-4: 100% success rate
  |    3|       |    //  5-8:  90% success rate
  |    4|       |    // 9-10:  77% success rate
  |    5|     30|    let result: f64 = match speed {
  |    6|     24|        1..=4 => 1.00,
  |                               ^9
  |    7|     15|        5..=8 => 0.90,
  |                               ^9
  |    8|      6|        9..=10 => 0.77,
  |    9|      6|        _ => 0.0,
  |   10|       |    };
  |   11|       |
  |   12|       |    // I know I could just return from the match statement but this is more obvious.
  |   13|     30|    result
  |   14|     30|}
  ------------------
   15|       |
   16|     30|pub fn production_rate_per_hour(speed: u8) -> f64 {
   17|     30|    let cars_per_hour: i64 = 221;
   18|     30|    let rate: f64 = get_success_rate(speed) * speed as f64 * cars_per_hour as f64;
   19|     30|
   20|     30|    rate
   21|     30|}
  ------------------
  | Unexecuted instantiation: assembly_line::production_rate_per_hour
  ------------------
  | assembly_line::production_rate_per_hour:
  |   16|     30|pub fn production_rate_per_hour(speed: u8) -> f64 {
  |   17|     30|    let cars_per_hour: i64 = 221;
  |   18|     30|    let rate: f64 = get_success_rate(speed) * speed as f64 * cars_per_hour as f64;
  |   19|     30|
  |   20|     30|    rate
  |   21|     30|}
  ------------------
   22|       |
   23|     15|pub fn working_items_per_minute(speed: u8) -> u32 {
   24|     15|    let result: u32 = production_rate_per_hour(speed) as u32 / 60;
   25|     15|
   26|     15|    result
   27|     15|}
  ------------------
  | Unexecuted instantiation: assembly_line::working_items_per_minute
  ------------------
  | assembly_line::working_items_per_minute:
  |   23|     15|pub fn working_items_per_minute(speed: u8) -> u32 {
  |   24|     15|    let result: u32 = production_rate_per_hour(speed) as u32 / 60;
  |   25|     15|
  |   26|     15|    result
  |   27|     15|}
  ------------------
   28|       |
   29|       |#[cfg(test)]
   30|       |mod tests {
   31|       |    use super::*;
   32|       |
   33|      3|    #[test]
   34|      3|    fn test_get_success_rate() {
   35|      3|        let speeds = vec![1, 5, 9, 88];
   36|      3|        let wants = vec![1.0, 0.9, 0.77, 0.0];
   37|       |
   38|     12|        for it in speeds.iter().zip(wants.iter()) {
                                ^3
   39|     12|            let (speed, want) = it;
   40|     12|            let got: f64 = get_success_rate(*speed);
   41|     12|            assert_eq!(got, *want);
   42|       |        }
   43|      3|    }
   44|       |}