    1|       |//! Exercise Url: <https://exercism.org/tracks/rust/exercises/acronym>
    2|       |
    3|       |use regex::Regex;
    4|       |
    5|       |/// abbreviate function returns the acronym from a string.
    6|       |///
    7|       |/// # Examples
    8|       |/// ```rust
    9|       |/// use acronym::abbreviate;
   10|       |///
   11|       |/// let want = "ABC";
   12|       |/// let got = abbreviate("Apple Banana Cranberries");
   13|       |///
   14|       |/// assert_eq!(got, want);
   15|       |/// ```
   16|     36|pub fn abbreviate(phrase: &str) -> String {
   17|       |    // I refuse to get in the bad habit of using .unwrap()!
   18|     36|    let re = match Regex::new(r"[-_]") {
   19|     36|        Ok(re) => re,
   20|      0|        Err(error) => panic!("Bad regex string: {:?}", error),
   21|       |    };
   22|       |
   23|     36|    let tmp_str = re.replace_all(phrase, " ");
   24|     36|
   25|     36|    let mut acronym = String::new();
   26|       |
   27|    156|    for word in tmp_str.split_whitespace() {
                                      ^36
   28|       |        // I refuse to get in the bad habit of using .unwrap()!
   29|    156|        acronym.push(match word.to_uppercase().chars().next().ok_or(' ') {
   30|    156|            Ok(letter) => letter,
   31|      0|            Err(error) => panic!("Problem getting the first letter in word: {:?}", error),
   32|       |        });
   33|       |
   34|       |        // take_next flags capital letters in a word if it's preceded by at least one lowercase letter.
   35|    156|        let mut take_next = false;
   36|       |        // Already grabbed the first letter of the word so the slice doesn't contain it.
   37|    672|        for letter in word[1..].chars() {
                                    ^156
   38|    672|            if letter.is_lowercase() {
   39|    648|                take_next = true;
   40|    648|                continue;
   41|     24|            }
   42|     24|
   43|     24|            if letter.is_uppercase() && take_next {
                                                      ^15
   44|      3|                acronym.push(letter);
   45|      3|                take_next = false;
   46|     21|            }
   47|       |        }
   48|       |    }
   49|       |
   50|     36|    acronym
   51|     36|}
  ------------------
  | acronym::abbreviate:
  |   16|     36|pub fn abbreviate(phrase: &str) -> String {
  |   17|       |    // I refuse to get in the bad habit of using .unwrap()!
  |   18|     36|    let re = match Regex::new(r"[-_]") {
  |   19|     36|        Ok(re) => re,
  |   20|      0|        Err(error) => panic!("Bad regex string: {:?}", error),
  |   21|       |    };
  |   22|       |
  |   23|     36|    let tmp_str = re.replace_all(phrase, " ");
  |   24|     36|
  |   25|     36|    let mut acronym = String::new();
  |   26|       |
  |   27|    156|    for word in tmp_str.split_whitespace() {
  |                                      ^36
  |   28|       |        // I refuse to get in the bad habit of using .unwrap()!
  |   29|    156|        acronym.push(match word.to_uppercase().chars().next().ok_or(' ') {
  |   30|    156|            Ok(letter) => letter,
  |   31|      0|            Err(error) => panic!("Problem getting the first letter in word: {:?}", error),
  |   32|       |        });
  |   33|       |
  |   34|       |        // take_next flags capital letters in a word if it's preceded by at least one lowercase letter.
  |   35|    156|        let mut take_next = false;
  |   36|       |        // Already grabbed the first letter of the word so the slice doesn't contain it.
  |   37|    672|        for letter in word[1..].chars() {
  |                                    ^156
  |   38|    672|            if letter.is_lowercase() {
  |   39|    648|                take_next = true;
  |   40|    648|                continue;
  |   41|     24|            }
  |   42|     24|
  |   43|     24|            if letter.is_uppercase() && take_next {
  |                                                      ^15
  |   44|      3|                acronym.push(letter);
  |   45|      3|                take_next = false;
  |   46|     21|            }
  |   47|       |        }
  |   48|       |    }
  |   49|       |
  |   50|     36|    acronym
  |   51|     36|}
  ------------------
  | Unexecuted instantiation: acronym::abbreviate
  ------------------