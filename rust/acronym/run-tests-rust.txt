Running automated test file(s):


===============================================================================

Running: ../../.github/citools/rust/rust-lint-check --release

Running Rust Cargo CheckRunning: cargo clean

real	0m0.045s
user	0m0.009s
sys	0m0.035s

===============================================================================

Running: cargo check --release
   Compiling memchr v2.5.0
    Checking regex-syntax v0.7.4
    Checking aho-corasick v1.0.4
    Checking regex-automata v0.3.6
    Checking regex v1.9.3
    Checking acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished release [optimized] target(s) in 0.68s

real	0m0.688s
user	0m0.203s
sys	0m0.118s

===============================================================================


real	0m0.736s
user	0m0.212s
sys	0m0.156s

===============================================================================

Running: ../../.github/citools/rust/rust-lint-clippy --release

Running Rust Cargo ClippyRunning: cargo clean

real	0m0.011s
user	0m0.006s
sys	0m0.004s

===============================================================================

Running: cargo clippy --release
   Compiling memchr v2.5.0
    Checking regex-syntax v0.7.4
    Checking aho-corasick v1.0.4
    Checking regex-automata v0.3.6
    Checking regex v1.9.3
    Checking acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished release [optimized] target(s) in 0.67s

real	0m0.695s
user	0m0.314s
sys	0m0.144s

===============================================================================


real	0m0.707s
user	0m0.321s
sys	0m0.148s

===============================================================================

Running: ../../.github/citools/rust/rust-lint-audit

Running Rust Cargo AuditRunning: cargo clean

real	0m0.023s
user	0m0.010s
sys	0m0.012s

===============================================================================

Running: cargo audit
[0m[0m[1m[32m    Fetching[0m advisory database from `https://github.com/RustSec/advisory-db.git`
[0m[0m[1m[32m      Loaded[0m 561 security advisories (from /home/vpayno/.cargo/advisory-db)
[0m[0m[1m[32m    Updating[0m crates.io index
[0m[0m[1m[32m    Scanning[0m Cargo.lock for vulnerabilities (6 crate dependencies)

real	0m2.161s
user	0m0.552s
sys	0m0.425s

===============================================================================


real	0m2.186s
user	0m0.562s
sys	0m0.439s

===============================================================================

rm -fv ./*.profraw ./*.profdata

===============================================================================

Running: ../../.github/citools/rust/rust-test-with-tarpaulin

Running Rust Tests With Tarpaulin

Running: cargo clean

real	0m0.017s
user	0m0.009s
sys	0m0.008s

===============================================================================

Running: cargo test
   Compiling memchr v2.5.0
   Compiling regex-syntax v0.7.4
   Compiling aho-corasick v1.0.4
   Compiling regex-automata v0.3.6
   Compiling regex v1.9.3
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished test [unoptimized + debuginfo] target(s) in 1.71s
     Running unittests src/lib.rs (target/debug/deps/acronym-1fa5fe6a19e4ddfd)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/acronym.rs (target/debug/deps/acronym-adce97eb1581b6e5)

running 12 tests
test camelcase ... ok
test all_caps_word ... ok
test apostrophes ... ok
test basic ... ok
test lowercase_words ... ok
test empty ... ok
test consecutive_delimiters ... ok
test all_caps_word_with_punctuation ... ok
test punctuation ... ok
test punctuation_without_whitespace ... ok
test very_long_abbreviation ... ok
test underscore_emphasis ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

   Doc-tests acronym

running 1 test
test src/lib.rs - abbreviate (line 8) ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.44s


real	0m2.182s
user	0m1.728s
sys	0m0.624s

===============================================================================

Running: cargo tarpaulin --release --timeout=300
[2mAug 22 21:56:42.587[0m [32m INFO[0m cargo_tarpaulin::config: Creating config
[2mAug 22 21:56:42.599[0m [32m INFO[0m cargo_tarpaulin: Running Tarpaulin
[2mAug 22 21:56:42.599[0m [32m INFO[0m cargo_tarpaulin: Building project
[2mAug 22 21:56:42.599[0m [32m INFO[0m cargo_tarpaulin::cargo: Cleaning project
   Compiling memchr v2.5.0
   Compiling regex-syntax v0.7.4
   Compiling aho-corasick v1.0.4
   Compiling regex-automata v0.3.6
   Compiling regex v1.9.3
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished release [optimized] target(s) in 1.52s
[2mAug 22 21:56:44.163[0m [32m INFO[0m cargo_tarpaulin::process_handling::linux: Launching test
[2mAug 22 21:56:44.163[0m [32m INFO[0m cargo_tarpaulin::process_handling: running /home/vpayno/git_vpayno/exercism-workspace/rust/acronym/target/release/deps/acronym-5a9f3990fcebc83f

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

[2mAug 22 21:56:44.656[0m [32m INFO[0m cargo_tarpaulin::process_handling::linux: Launching test
[2mAug 22 21:56:44.656[0m [32m INFO[0m cargo_tarpaulin::process_handling: running /home/vpayno/git_vpayno/exercism-workspace/rust/acronym/target/release/deps/acronym-065f95d3a980a68a

running 12 tests
test empty ... ok
test lowercase_words ... ok
test consecutive_delimiters ... ok
test camelcase ... ok
test basic ... ok
test apostrophes ... ok
test all_caps_word_with_punctuation ... ok
test very_long_abbreviation ... ok
test all_caps_word ... ok
test underscore_emphasis ... ok
test punctuation_without_whitespace ... ok
test punctuation ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s

[2mAug 22 21:56:45.634[0m [32m INFO[0m cargo_tarpaulin::report: Coverage Results:
|| Uncovered Lines:
|| src/lib.rs: 20, 31, 37-38, 43
|| Tested/Total Lines:
|| src/lib.rs: 6/11
|| 
54.55% coverage, 6/11 lines covered

real	0m3.063s
user	0m2.028s
sys	0m1.691s

===============================================================================


real	0m5.264s
user	0m3.765s
sys	0m2.326s

===============================================================================

Running: ../../.github/citools/rust/rust-test-with-llvm-coverage

Running Rust Tests With LLVM Coverage

Running: cargo clean

real	0m0.031s
user	0m0.005s
sys	0m0.026s

===============================================================================

cargo llvm-cov clean --workspace

===============================================================================

rm -fv ./*.profraw ./*.profdata

===============================================================================

RUSTFLAGS="-C instrument-coverage"
RUSTDOCFLAGS="-C instrument-coverage"

===============================================================================

Running: cargo test
   Compiling memchr v2.5.0
   Compiling regex-syntax v0.7.4
   Compiling aho-corasick v1.0.4
   Compiling regex-automata v0.3.6
   Compiling regex v1.9.3
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished test [unoptimized + debuginfo] target(s) in 1.59s
     Running unittests src/lib.rs (target/debug/deps/acronym-1fa5fe6a19e4ddfd)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/acronym.rs (target/debug/deps/acronym-adce97eb1581b6e5)

running 12 tests
test consecutive_delimiters ... ok
test basic ... ok
test all_caps_word ... ok
test apostrophes ... ok
test camelcase ... ok
test all_caps_word_with_punctuation ... ok
test empty ... ok
test lowercase_words ... ok
test punctuation ... ok
test punctuation_without_whitespace ... ok
test very_long_abbreviation ... ok
test underscore_emphasis ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

   Doc-tests acronym

running 1 test
test src/lib.rs - abbreviate (line 8) ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.62s


real	0m2.247s
user	0m1.651s
sys	0m0.622s

===============================================================================

Running: llvm-profdata-16 merge -sparse default_11694395107201762003_0_6538.profraw default_13167020396836235105_0_6539.profraw default_5337570763997981835_0_6564.profraw -o acronym.profdata

real	0m0.022s
user	0m0.015s
sys	0m0.013s

===============================================================================

cargo llvm-cov
   Compiling memchr v2.5.0
   Compiling regex-syntax v0.7.4
   Compiling aho-corasick v1.0.4
   Compiling regex-automata v0.3.6
   Compiling regex v1.9.3
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished test [unoptimized + debuginfo] target(s) in 1.38s
     Running unittests src/lib.rs (target/llvm-cov-target/debug/deps/acronym-d93a30a199a1590a)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/acronym.rs (target/llvm-cov-target/debug/deps/acronym-870477081495f800)

running 12 tests
test all_caps_word ... ok
test all_caps_word_with_punctuation ... ok
test apostrophes ... ok
test basic ... ok
test camelcase ... ok
test consecutive_delimiters ... ok
test empty ... ok
test lowercase_words ... ok
test punctuation ... ok
test punctuation_without_whitespace ... ok
test underscore_emphasis ... ok
test very_long_abbreviation ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

Filename                                                               Regions    Missed Regions     Cover   Functions  Missed Functions  Executed       Lines      Missed Lines     Cover    Branches   Missed Branches     Cover
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/home/vpayno/git_vpayno/exercism-workspace/rust/acronym/src/lib.rs          21                 2    90.48%           1                 0   100.00%          24                 2    91.67%           0                 0         -
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                       21                 2    90.48%           1                 0   100.00%          24                 2    91.67%           0                 0         -

===============================================================================

cargo llvm-cov --text
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished test [unoptimized + debuginfo] target(s) in 0.76s
     Running unittests src/lib.rs (target/llvm-cov-target/debug/deps/acronym-d93a30a199a1590a)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/acronym.rs (target/llvm-cov-target/debug/deps/acronym-870477081495f800)

running 12 tests
test all_caps_word ... ok
test all_caps_word_with_punctuation ... ok
test apostrophes ... ok
test basic ... ok
test camelcase ... ok
test consecutive_delimiters ... ok
test empty ... ok
test lowercase_words ... ok
test punctuation ... ok
test punctuation_without_whitespace ... ok
test underscore_emphasis ... ok
test very_long_abbreviation ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

    1|       |//! Exercise Url: <https://exercism.org/tracks/rust/exercises/acronym>
    2|       |
    3|       |use regex::Regex;
    4|       |
    5|       |/// abbreviate function returns the acronym from a string.
    6|       |///
    7|       |/// # Examples
    8|       |/// ```rust
    9|       |/// use acronym::abbreviate;
   10|       |///
   11|       |/// let want = "ABC";
   12|       |/// let got = abbreviate("Apple Banana Cranberries");
   13|       |///
   14|       |/// assert_eq!(got, want);
   15|       |/// ```
   16|     12|pub fn abbreviate(phrase: &str) -> String {
   17|       |    // I refuse to get in the bad habit of using .unwrap()!
   18|     12|    let re = match Regex::new(r"[-_]") {
   19|     12|        Ok(re) => re,
   20|      0|        Err(error) => panic!("Bad regex string: {:?}", error),
   21|       |    };
   22|       |
   23|     12|    let tmp_str = re.replace_all(phrase, " ");
   24|     12|
   25|     12|    let mut acronym = String::new();
   26|       |
   27|     52|    for word in tmp_str.split_whitespace() {
                                      ^12
   28|       |        // I refuse to get in the bad habit of using .unwrap()!
   29|     52|        acronym.push(match word.to_uppercase().chars().next().ok_or(' ') {
   30|     52|            Ok(letter) => letter,
   31|      0|            Err(error) => panic!("Problem getting the first letter in word: {:?}", error),
   32|       |        });
   33|       |
   34|       |        // take_next flags capital letters in a word if it's preceded by at least one lowercase letter.
   35|     52|        let mut take_next = false;
   36|       |        // Already grabbed the first letter of the word so the slice doesn't contain it.
   37|    224|        for letter in word[1..].chars() {
                                    ^52
   38|    224|            if letter.is_lowercase() {
   39|    216|                take_next = true;
   40|    216|                continue;
   41|      8|            }
   42|      8|
   43|      8|            if letter.is_uppercase() && take_next {
                                                      ^5
   44|      1|                acronym.push(letter);
   45|      1|                take_next = false;
   46|      7|            }
   47|       |        }
   48|       |    }
   49|       |
   50|     12|    acronym
   51|     12|}
  ------------------
  | acronym::abbreviate:
  |   16|     12|pub fn abbreviate(phrase: &str) -> String {
  |   17|       |    // I refuse to get in the bad habit of using .unwrap()!
  |   18|     12|    let re = match Regex::new(r"[-_]") {
  |   19|     12|        Ok(re) => re,
  |   20|      0|        Err(error) => panic!("Bad regex string: {:?}", error),
  |   21|       |    };
  |   22|       |
  |   23|     12|    let tmp_str = re.replace_all(phrase, " ");
  |   24|     12|
  |   25|     12|    let mut acronym = String::new();
  |   26|       |
  |   27|     52|    for word in tmp_str.split_whitespace() {
  |                                      ^12
  |   28|       |        // I refuse to get in the bad habit of using .unwrap()!
  |   29|     52|        acronym.push(match word.to_uppercase().chars().next().ok_or(' ') {
  |   30|     52|            Ok(letter) => letter,
  |   31|      0|            Err(error) => panic!("Problem getting the first letter in word: {:?}", error),
  |   32|       |        });
  |   33|       |
  |   34|       |        // take_next flags capital letters in a word if it's preceded by at least one lowercase letter.
  |   35|     52|        let mut take_next = false;
  |   36|       |        // Already grabbed the first letter of the word so the slice doesn't contain it.
  |   37|    224|        for letter in word[1..].chars() {
  |                                    ^52
  |   38|    224|            if letter.is_lowercase() {
  |   39|    216|                take_next = true;
  |   40|    216|                continue;
  |   41|      8|            }
  |   42|      8|
  |   43|      8|            if letter.is_uppercase() && take_next {
  |                                                      ^5
  |   44|      1|                acronym.push(letter);
  |   45|      1|                take_next = false;
  |   46|      7|            }
  |   47|       |        }
  |   48|       |    }
  |   49|       |
  |   50|     12|    acronym
  |   51|     12|}
  ------------------
  | Unexecuted instantiation: acronym::abbreviate
  ------------------


===============================================================================

cargo llvm-cov --all-features --workspace --lcov --output-path report.lcov
   Compiling acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished test [unoptimized + debuginfo] target(s) in 0.77s
     Running unittests src/lib.rs (target/llvm-cov-target/debug/deps/acronym-d93a30a199a1590a)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/acronym.rs (target/llvm-cov-target/debug/deps/acronym-870477081495f800)

running 12 tests
test all_caps_word ... ok
test all_caps_word_with_punctuation ... ok
test apostrophes ... ok
test basic ... ok
test camelcase ... ok
test consecutive_delimiters ... ok
test empty ... ok
test lowercase_words ... ok
test punctuation ... ok
test punctuation_without_whitespace ... ok
test underscore_emphasis ... ok
test very_long_abbreviation ... ok

test result: ok. 12 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


    Finished report saved to report.lcov

lcov --summary report.lcov
Reading tracefile report.lcov
Summary coverage rate:
  lines......: 91.7% (22 of 24 lines)
  functions..: 50.0% (1 of 2 functions)
  branches...: no data found

===============================================================================

rm -fv ./default_11694395107201762003_0_6538.profraw ./default_13167020396836235105_0_6539.profraw ./default_5337570763997981835_0_6564.profraw ./acronym.profdata
removed './default_11694395107201762003_0_6538.profraw'
removed './default_13167020396836235105_0_6539.profraw'
removed './default_5337570763997981835_0_6564.profraw'
removed './acronym.profdata'

===============================================================================

cargo llvm-cov clean --workspace

===============================================================================


real	0m6.128s
user	0m4.414s
sys	0m1.913s

===============================================================================

Running: misspell .

real	0m0.031s
user	0m0.049s
sys	0m0.022s

===============================================================================

Running: cargo doc
   Compiling memchr v2.5.0
    Checking regex-syntax v0.7.4
 Documenting regex-syntax v0.7.4
 Documenting memchr v2.5.0
    Checking aho-corasick v1.0.4
    Checking regex-automata v0.3.6
 Documenting aho-corasick v1.0.4
    Checking regex v1.9.3
 Documenting regex-automata v0.3.6
 Documenting regex v1.9.3
 Documenting acronym v1.7.0 (/home/vpayno/git_vpayno/exercism-workspace/rust/acronym)
    Finished dev [unoptimized + debuginfo] target(s) in 2.22s

real	0m2.229s
user	0m2.691s
sys	0m0.435s

===============================================================================

Running: cargo clean

real	0m0.054s
user	0m0.009s
sys	0m0.044s

===============================================================================

