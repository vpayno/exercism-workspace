    1|       |//! Exercise Url: <https://exercism.org/tracks/rust/exercises/secret-handshake>
    2|       |
    3|      0|#[derive(Debug, Clone, Copy)]
  ------------------
  | Unexecuted instantiation: <secret_handshake::Command as core::fmt::Debug>::fmt
  ------------------
  | Unexecuted instantiation: <secret_handshake::Command as core::fmt::Debug>::fmt
  ------------------
  | Unexecuted instantiation: <secret_handshake::Command as core::clone::Clone>::clone
  ------------------
  | Unexecuted instantiation: <secret_handshake::Command as core::clone::Clone>::clone
  ------------------
    4|       |#[repr(u8)]
    5|       |enum Command {
    6|       |    Wink = 0b0000_0001,
    7|       |    DoubleBlink = 0b0000_0010,
    8|       |    CloseYourEyes = 0b0000_0100,
    9|       |    Jump = 0b0000_1000,
   10|       |    Reverse = 0b0001_0000,
   11|       |    Limit = 0b0010_0000,
   12|       |}
   13|       |
   14|       |impl std::fmt::Display for Command {
   15|     51|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
   16|     51|        match self {
   17|     15|            Command::Wink => write!(f, "wink"),
   18|     15|            Command::DoubleBlink => write!(f, "double blink"),
   19|      9|            Command::CloseYourEyes => write!(f, "close your eyes"),
   20|     12|            Command::Jump => write!(f, "jump"),
   21|      0|            Command::Reverse => write!(f, "reverse"),
   22|      0|            _ => write!(f, ""),
   23|       |        }
   24|     51|    }
  ------------------
  | Unexecuted instantiation: <secret_handshake::Command as core::fmt::Display>::fmt
  ------------------
  | <secret_handshake::Command as core::fmt::Display>::fmt:
  |   15|     51|    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
  |   16|     51|        match self {
  |   17|     15|            Command::Wink => write!(f, "wink"),
  |   18|     15|            Command::DoubleBlink => write!(f, "double blink"),
  |   19|      9|            Command::CloseYourEyes => write!(f, "close your eyes"),
  |   20|     12|            Command::Jump => write!(f, "jump"),
  |   21|      0|            Command::Reverse => write!(f, "reverse"),
  |   22|      0|            _ => write!(f, ""),
  |   23|       |        }
  |   24|     51|    }
  ------------------
   25|       |}
   26|       |
   27|       |/// returns a vector of actions decoded from a number
   28|       |///
   29|       |/// Changed the return type from a static str slice to String because it's easier
   30|       |/// to work with (less you can't return a temporary borrowed value errors).
   31|       |///
   32|       |/// Example
   33|       |///
   34|       |/// ```rust
   35|       |/// use secret_handshake::actions;
   36|       |///
   37|       |/// let want = vec!["wink", "double blink", "close your eyes", "jump"];
   38|       |/// let got = actions(15);
   39|       |///
   40|       |/// assert_eq!(got, want);
   41|       |/// ```
   42|     33|pub fn actions(commands: u8) -> Vec<String> {
   43|     33|    let mut steps: Vec<String> = Vec::new();
   44|     33|
   45|     33|    if commands == 0 {
   46|      3|        // return steps.clone();
   47|     30|    }
   48|       |
   49|     33|    if commands >= Command::Limit as u8 {
   50|      0|        // return steps.clone();
   51|     33|    }
   52|       |
   53|     33|    if commands & Command::Wink as u8 == Command::Wink as u8 {
   54|     15|        steps.push(Command::Wink.to_string());
   55|     18|    }
   56|       |
   57|     33|    if commands & Command::DoubleBlink as u8 == Command::DoubleBlink as u8 {
   58|     15|        steps.push(Command::DoubleBlink.to_string());
   59|     18|    }
   60|       |
   61|     33|    if commands & Command::CloseYourEyes as u8 == Command::CloseYourEyes as u8 {
   62|      9|        steps.push(Command::CloseYourEyes.to_string());
   63|     24|    }
   64|       |
   65|     33|    if commands & Command::Jump as u8 == Command::Jump as u8 {
   66|     12|        steps.push(Command::Jump.to_string());
   67|     21|    }
   68|       |
   69|     33|    if commands & Command::Reverse as u8 == Command::Reverse as u8 {
   70|     12|        steps.reverse();
   71|     21|    }
   72|       |
   73|     33|    steps.clone()
   74|     33|}
  ------------------
  | Unexecuted instantiation: secret_handshake::actions
  ------------------
  | secret_handshake::actions:
  |   42|     33|pub fn actions(commands: u8) -> Vec<String> {
  |   43|     33|    let mut steps: Vec<String> = Vec::new();
  |   44|     33|
  |   45|     33|    if commands == 0 {
  |   46|      3|        // return steps.clone();
  |   47|     30|    }
  |   48|       |
  |   49|     33|    if commands >= Command::Limit as u8 {
  |   50|      0|        // return steps.clone();
  |   51|     33|    }
  |   52|       |
  |   53|     33|    if commands & Command::Wink as u8 == Command::Wink as u8 {
  |   54|     15|        steps.push(Command::Wink.to_string());
  |   55|     18|    }
  |   56|       |
  |   57|     33|    if commands & Command::DoubleBlink as u8 == Command::DoubleBlink as u8 {
  |   58|     15|        steps.push(Command::DoubleBlink.to_string());
  |   59|     18|    }
  |   60|       |
  |   61|     33|    if commands & Command::CloseYourEyes as u8 == Command::CloseYourEyes as u8 {
  |   62|      9|        steps.push(Command::CloseYourEyes.to_string());
  |   63|     24|    }
  |   64|       |
  |   65|     33|    if commands & Command::Jump as u8 == Command::Jump as u8 {
  |   66|     12|        steps.push(Command::Jump.to_string());
  |   67|     21|    }
  |   68|       |
  |   69|     33|    if commands & Command::Reverse as u8 == Command::Reverse as u8 {
  |   70|     12|        steps.reverse();
  |   71|     21|    }
  |   72|       |
  |   73|     33|    steps.clone()
  |   74|     33|}
  ------------------