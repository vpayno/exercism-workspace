==============================================================================
sum-of-multiples_spec.lua
==============================================================================
* local sum_of_multiples = require('sum-of-multiples')

* describe('sum-of-multiples', function()
*   it('should sum multiples of a single number', function()
*     assert.same(9, sum_of_multiples({ 3 }).to(7))
*     assert.same(15, sum_of_multiples({ 5 }).to(12))
    end)

*   it('should sum multiples of a list of numbers', function()
*     assert.same(33, sum_of_multiples({ 3, 5 }).to(11))
*     assert.same(129, sum_of_multiples({ 7, 3 }).to(25))
*     assert.same(153, sum_of_multiples({ 7, 3, 8 }).to(25))
    end)

*   it('should calculate multiples up to, but not including, the limit', function()
*     assert.same(9, sum_of_multiples({ 3 }).to(9))
*     assert.same(23, sum_of_multiples({ 3, 5 }).to(10))
    end)

*   it('should not include a multiple more than once', function()
*     assert.same(35, sum_of_multiples({ 2, 5 }).to(11))
*     assert.same(sum_of_multiples({ 2 }).to(11), sum_of_multiples({ 2, 4 }).to(11))
    end)
  end)

==============================================================================
sum-of-multiples.lua
==============================================================================
  return function(numbers)
  local function get_multiples(factor, limit)
*     local multiples = {}

*     for multiple=1,limit-1 do
*         if multiple % factor == 0 then
*             table.insert(multiples, multiple)
          end
      end

*     return multiples
  end

  local function to(base_value)
*     local sum = 0

*     if base_value == 0 then
0         return sum
      end

*     local hash = {}
*     local unique = {}
*     local multiples = {}

*     for _, item in pairs(numbers) do
*             for _, number in ipairs(get_multiples(item, base_value)) do
*                 table.insert(multiples, number)
              end
          end

*     for _, value in ipairs(multiples) do
*         hash[value] = true
      end

*     for key, _ in pairs(hash) do
*         table.insert(unique, key)
      end

*     table.foreach(unique, function(key, value) sum = sum + value end)

*     return sum
  end

*     return {
*         to = to
*     }
  end

==============================================================================
Summary
==============================================================================

File                      Hits Missed Coverage
----------------------------------------------
sum-of-multiples.lua      22   1      95.65%
sum-of-multiples_spec.lua 15   0      100.00%
----------------------------------------------
Total                     37   1      97.37%
