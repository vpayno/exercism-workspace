==============================================================================
space-age_spec.lua
==============================================================================
* local SpaceAge = require("space-age")

* describe("space-age", function()
* 	it("age in seconds", function()
* 		local age = SpaceAge:new(1000000)
* 		assert.are.equal(1000000, age.seconds)
  	end)

* 	it("age in Earth years", function()
* 		local age = SpaceAge:new(1000000000)
* 		assert.are.equal(31.69, age.on_earth())
  	end)

* 	it("age in Mercury years", function()
* 		local age = SpaceAge:new(2134835688)
* 		assert.are.equal(67.65, age.on_earth())
* 		assert.are.equal(280.88, age.on_mercury())
  	end)

* 	it("age in Venus years", function()
* 		local age = SpaceAge:new(189839836)
* 		assert.are.equal(6.02, age.on_earth())
* 		assert.are.equal(9.78, age.on_venus())
  	end)

* 	it("age in Mars years", function()
* 		local age = SpaceAge:new(2329871239)
* 		assert.are.equal(73.83, age.on_earth())
* 		assert.are.equal(39.25, age.on_mars())
  	end)

* 	it("age in Jupiter years", function()
* 		local age = SpaceAge:new(901876382)
* 		assert.are.equal(28.58, age.on_earth())
* 		assert.are.equal(2.41, age.on_jupiter())
  	end)

* 	it("age in Saturn years", function()
* 		local age = SpaceAge:new(3000000000)
* 		assert.are.equal(95.06, age.on_earth())
* 		assert.are.equal(3.23, age.on_saturn())
  	end)

* 	it("age in Uranus years", function()
* 		local age = SpaceAge:new(3210123456)
* 		assert.are.equal(101.72, age.on_earth())
* 		assert.are.equal(1.21, age.on_uranus())
  	end)

* 	it("age in Neptune year", function()
* 		local age = SpaceAge:new(8210123456)
* 		assert.are.equal(260.16, age.on_earth())
* 		assert.are.equal(1.58, age.on_neptune())
  	end)
  end)

==============================================================================
space-age.lua
==============================================================================
* local SpaceAge = {}
* SpaceAge.__index = SpaceAge

* function SpaceAge:new(seconds)
*     local orbital_periods = {
*         Mercury = 0.2408467,
*         Venus = 0.61519726,
*         Earth = 1.0,
*         Mars = 1.8808158,
*         Jupiter = 11.862615,
*         Saturn = 29.447498,
*         Uranus = 84.016846,
*         Neptune = 164.79132,
*     }

*     local seconds_in_earth_years = 365.25 * 24 * 60 * 60

*     return {
          -- one of the tests wants to retreive the seconds
*         seconds = seconds,

          -- these have to be anonymous functions
*         on_mercury = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Mercury * seconds_in_earth_years)))
          end,

*         on_venus = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Venus * seconds_in_earth_years)))
          end,

*         on_earth = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Earth * seconds_in_earth_years)))
          end,

*         on_mars = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Mars * seconds_in_earth_years)))
          end,

*         on_jupiter = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Jupiter * seconds_in_earth_years)))
          end,

*         on_saturn = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Saturn * seconds_in_earth_years)))
          end,

          on_uranus = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Uranus * seconds_in_earth_years)))
          end,

          on_neptune = function()
*             return tonumber(("%.2f"):format(seconds / (orbital_periods.Neptune * seconds_in_earth_years)))
          end,
*     }
  end

* return SpaceAge

==============================================================================
Summary
==============================================================================

File               Hits Missed Coverage
---------------------------------------
space-age.lua      32   0      100.00%
space-age_spec.lua 36   0      100.00%
---------------------------------------
Total              68   0      100.00%
